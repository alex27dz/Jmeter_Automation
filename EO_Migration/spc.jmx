<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="SPC" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, br</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${APP_HOST}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="APP_HOST" elementType="Argument">
            <stringProp name="Argument.name">APP_HOST</stringProp>
            <stringProp name="Argument.value">${__P(app_host,stage.eoiscamia.edu.gov.on.ca)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">creds/spc_creds.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">USER</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree (Save) - Errors Only" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">spc_failed_responses.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: SPC" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1481278449">
            <stringProp name="242203194">${__P(users_spc,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="RandomTimer.range">7000</stringProp>
          <stringProp name="ConstantTimer.delay">3000</stringProp>
          <stringProp name="TestPlan.comments">Recorded time was 6493 milliseconds</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="userName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userName</stringProp>
                <stringProp name="Argument.value">${USER}</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">spcp2/directLogon.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getUrlAsString()
	def pattern = &quot;administration&quot;
	def res = data =~ pattern
	if(res.size() == 0) {
		pattern = &quot;dashboard&quot;
		res = data =~ pattern
		if(res.size() == 0) {
			should_restart = true
			log.info data.toString()
		}
		else {
			log.info &quot;TYPE: dashboard : ${vars.get(&apos;USER&apos;)}&quot;
		}
	}
	else {
		log.info &quot;TYPE: administration : ${vars.get(&apos;USER&apos;)}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;AUTHENTICATION FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Login failed&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.control.WeightedSwitchController guiclass="com.blazemeter.jmeter.control.WeightedSwitchControllerGui" testclass="com.blazemeter.jmeter.control.WeightedSwitchController" testname="Weighted Switch Controller" enabled="true">
          <boolProp name="IsRandomChoice">true</boolProp>
          <collectionProp name="Weights">
            <collectionProp name="-621180660">
              <stringProp name="1153619511">List Templates</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="953624277">
              <stringProp name="-1439637903">List Plan Package</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="607739819">
              <stringProp name="270121620">Search Service Provider</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="1979781836">
              <stringProp name="-368391031">List Monitoring Reports</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="741046461">
              <stringProp name="283065451">List Agreements</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-830089756">
              <stringProp name="31592666">List Ministry Forecast</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
          </collectionProp>
        </com.blazemeter.jmeter.control.WeightedSwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Templates" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Bussiness Planning Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/home</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Business Plans Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: List Published Templates Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/templates</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Published Business Plan Templates&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search: Published Templates" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value">LBS-SD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">id</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="effectiveDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">effectiveDate</stringProp>
                    <stringProp name="Argument.value">01/01/2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/templateSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Plan Package" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Bussiness Planning Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/home</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Business Plans Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: List Business Plan Packages Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/viewBizPlanPackagesList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Business Plan Packages&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Business Plan Packages" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value">COJG</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProvider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProvider</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">id</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="localOffice" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">localOffice</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="spRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">spRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fiscalYearCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fiscalYearCode</stringProp>
                    <stringProp name="Argument.value">2019-2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="statusCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">statusCode</stringProp>
                    <stringProp name="Argument.value">PS04</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/bizPlanPkgSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Search Service Provider" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Service Provider Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/serviceProvider/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Service Provider Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Find Service Provider Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/serviceProvider/serviceProviderSearch</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Search Criteria&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Service Provider" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageCount</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="city" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">city</stringProp>
                    <stringProp name="Argument.value">Toronto</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProviderReferenceNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProviderReferenceNumber</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="businessName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">businessName</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sortby" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">sortby</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ifisSupplierNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ifisSupplierNumber</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sortDir" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">sortDir</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/serviceProvider/serviceProviderSearch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Monitoring Reports" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Monitoring Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Monitoring Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request:  List Monitoring Reports Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/monitoringReports</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Monitoring Reports&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Monitoring Reports" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="siteRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">siteRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="monthDue" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">monthDue</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="typeCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">typeCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProvider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProvider</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="spRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">spRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fiscalYearCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fiscalYearCode</stringProp>
                    <stringProp name="Argument.value">2019-2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="statusCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">statusCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/monitoringReportsSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Monitoring Report" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/report/14086</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Monitoring Report Details&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Generate Pdf" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fileName</stringProp>
                    <stringProp name="Argument.value">monitorReport.pdf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="contentType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">contentType</stringProp>
                    <stringProp name="Argument.value">monitor</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageHtml" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageHtml</stringProp>
                    <stringProp name="Argument.value">&lt;div id=&quot;monitorReportHome&quot; class=&quot;monitorReportHome&quot;&gt;&#xd; 	&lt;div class=&quot;container-fluid&quot;&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;p id=&quot;submitMessage&quot; class=&quot;mrSubmit&quot;&gt;&lt;/p&gt;&#xd; 		&lt;/div&gt;&#xd; &#xd; 		&lt;!--  tabs --&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 		  	&lt;ul class=&quot;nav nav-pills spc_nav&quot; role=&quot;tablist&quot;&gt;&#xd; 		  		&#xd; 			  					&lt;li class=&quot;active&quot; role=&quot;tab&quot;&gt;&lt;a id=&quot;viewReport&quot; href=&quot;#&quot; data-mydata=&quot;14086&quot;&gt;QSAR-Q4&lt;/a&gt;&lt;/li&gt;&#xd; 						  	&#xd; 								&lt;li role=&quot;tab&quot;&gt;&lt;a id=&quot;viewReport-inactive&quot; href=&quot;#&quot; data-mydata=&quot;8781&quot;&gt;QSAR-Q1&lt;/a&gt;&lt;/li&gt;&#xd; 						  	&#xd; 								&lt;li role=&quot;tab&quot;&gt;&lt;a id=&quot;viewReport-inactive&quot; href=&quot;#&quot; data-mydata=&quot;10994&quot;&gt;QSAR-Q2&lt;/a&gt;&lt;/li&gt;&#xd; 						  	&#xd; 								&lt;li role=&quot;tab&quot;&gt;&lt;a id=&quot;viewReport-inactive&quot; href=&quot;#&quot; data-mydata=&quot;12893&quot;&gt;QSAR-Q3&lt;/a&gt;&lt;/li&gt;&#xd; 						  	&#xd; &#xd; 		  	&lt;/ul&gt;&#xd; 		&lt;/div&gt;&#xd; &#xd; 		&lt;!-- Monitoring Report Details Panel --&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div id=&quot;autoSaveMsg&quot; style=&quot;display: none;&quot; class=&quot;autosave&quot;&gt;AutoSave is completed.&lt;/div&gt;&#xd; 			&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;table class=&quot;table table-bordered table-condensed&quot;&gt;&#xd; 					&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;col-sm-2 col-md-2 table-header table-no-border&quot;&gt;Monitoring Report Details&amp;nbsp;-&amp;nbsp;Quarterly Status and Adjustment Report&lt;/td&gt;&#xd; 						&lt;td class=&quot;col-sm-10 col-md-10 table-header table-no-border table-header-collapse&quot;&gt;&#xd;                            &lt;div class=&quot;arrow-holder&quot;&gt;&#xd;                            	   &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;printPDF&quot; title=&quot;Create PDF&quot; onclick=&quot;javascript:printPdf(&apos;monitorReportHome&apos;, &apos;monitorReport.pdf&apos;, &apos;monitor&apos;);&quot; src=&quot;/spcp2/resources/img/printer.png&quot;&gt;&lt;/a&gt;&#xd;                                &amp;nbsp;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;reprotDetails&quot; id=&quot;spmonitorReportDetailsArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						   &lt;/div&gt;&#xd; &#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 					&lt;tr id=&quot;reprotDetails&quot; class=&quot;details collapse in&quot;&gt;&#xd; 						&lt;td colspan=&quot;2&quot;&gt;&#xd; 							&lt;table class=&quot;table-responsive table-no-border table-condensed&quot;&gt;&#xd; 								&lt;tbody&gt;&lt;tr&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Reporting Period&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&#xd; 										01/01/2019 - 31/03/2019&#xd; 									&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Due Date&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;23/04/2019&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Status&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;Confirmed&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; &#xd; 								&lt;tr&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Site&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&#xd; 										&lt;a class=&quot;spc_link&quot; href=&quot;/spcp2/protected/sds/4691035573580726272&quot;&gt;3000C&lt;/a&gt;&#xd; 									&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Service Provider&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&#xd; 										&lt;a class=&quot;spc_link&quot; href=&quot;/spcp2/protected/serviceProvider/661721281967685632&quot;&gt;VPI INC&lt;/a&gt;&#xd; 									&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;PO Number&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&#xd; 										&lt;a class=&quot;spc_link&quot; href=&quot;/spcp2/protected/agreements/1359601&quot;&gt;32594&lt;/a&gt;&#xd; 									&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; &#xd; 								&lt;tr&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Program&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;Employment Service&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;TP Accountability Office&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;Toronto East Office&lt;/td&gt;&#xd; &#xd; 									&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; &#xd; 								&lt;tr&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Employment Training Consultant&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;Shradha Pathak&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Consultant Email&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;1465493_UAT_1_Shradha.Pathak@ontario.ca&lt;/td&gt;&#xd; &#xd; 									&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&lt;/tbody&gt;&lt;/table&gt;&#xd; 							&#xd; &#xd; &#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; &#xd; &#xd; 		&lt;!-- regional risk assessment rating --&gt;&#xd; 			&lt;div id=&quot;riskAssessment&quot;&gt;&#xd; 				&lt;!-- regional risk assessment rating --&gt;&#xd; &lt;div class=&quot;row&quot;&gt;&#xd; 	&lt;div class=&quot;panel panel-default&quot; role=&quot;tablist&quot;&gt;&#xd; 	&lt;table class=&quot;table table-bordered table-condensed&quot; role=&quot;tab&quot;&gt;&#xd; 		&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 			&lt;td class=&quot;table-header tableTitle spc-panel-title&quot;&gt;&lt;h2 title=&quot;Regional Risk Assessment Rating&quot;&gt;Regional Risk Assessment Rating&lt;/h2&gt;&lt;/td&gt;&#xd; 			&lt;td class=&quot;table-header spc-panel-title&quot;&gt;&#xd; 				 &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 				   &lt;label tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;riskAssessmentRating&quot; id=&quot;search-contentArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/label&gt;&#xd; 			     &lt;/div&gt;&#xd; 			&lt;/td&gt;&#xd; 		&lt;/tr&gt;&#xd; 		&lt;tr id=&quot;riskAssessmentRating&quot; class=&quot;details collapse in&quot;&gt;&#xd; 			&lt;td colspan=&quot;2&quot;&gt;&#xd; 				&lt;table class=&quot;table-responsive table-condensed tablesorter&quot;&gt;&#xd; 					&lt;thead class=&quot;table-header spc_header&quot;&gt;&#xd; 						&lt;tr&gt;&#xd; 							&lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Region&lt;/a&gt;&lt;/th&gt;&#xd; 							&lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Rating&lt;/a&gt;&lt;/th&gt;&#xd; 							&lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Status&lt;/a&gt;&lt;/th&gt;&#xd; 							&lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Last Update Date&lt;/a&gt;&lt;/th&gt;&#xd; 							&lt;th class=&quot;col-xs-4 col-sm-4 col-md-4 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Reason&lt;/a&gt;&lt;/th&gt;&#xd; 						&lt;/tr&gt;&#xd; 					&lt;/thead&gt;&#xd; 					&#xd; 						&lt;tbody&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  even&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/661721281967685632/102&quot;&gt;Central West Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  odd&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/661721281967685632/99&quot;&gt;Central East Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  even&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/661721281967685632/12&quot;&gt;Eastern Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  odd&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/661721281967685632/19&quot;&gt;Northern Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  even&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/308&quot;&gt;Western Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Low&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Approved&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;07/12/2018&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;Migration&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 						&lt;/tbody&gt;&#xd; 						&#xd; 				&lt;/table&gt;							&#xd; 			&lt;/td&gt;&#xd; 		&lt;/tr&gt;&#xd; 	&lt;/tbody&gt;&lt;/table&gt;&#xd; 	&lt;/div&gt;&#xd; &lt;/div&gt;&#xd; 			&lt;/div&gt;&#xd; 			 &lt;!-- Monitoring Level Details --&gt;&lt;!-- template pages --&gt;&#xd; 			&lt;div id=&quot;monitorTemplate&quot;&gt;&#xd; 				&lt;!-- form --&gt;&#xd; &lt;div class=&quot;template&quot;&gt;&#xd; 	&lt;div class=&quot;container-fluid&quot;&gt;&#xd; 		&lt;!-- page content --&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div id=&quot;monitorReportDetails&quot;&gt;&#xd; 			&lt;form id=&quot;templateForm&quot; role=&quot;form&quot; class=&quot;form form-horizontal areyousure&quot; action=&quot;saveBusinessPlan.do&quot; method=&quot;post&quot; autocomplete=&quot;off&quot;&gt;&lt;input id=&quot;monitorReportDetail.id&quot; name=&quot;monitorReportDetail.id&quot; type=&quot;hidden&quot; value=&quot;14086&quot;&gt;&lt;!-- Defect Fix 12783 Start --&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/bootstrap.min.ie.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/spc.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery-ui.min.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.mask.min.js&quot;&gt;&lt;/script&gt;        &#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.blockUI.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.idletimeout.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.idletimer.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.are-you-sure.js&quot;&gt;&lt;/script&gt;     &#xd; &lt;script src=&quot;/spcp2/resources/js/Chart.bundle.js&quot;&gt;&lt;/script&gt;&#xd; &lt;!-- Defect Fix 12783 End --&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/characterCount.js&quot;&gt;&lt;/script&gt;&#xd; &lt;!-- &#xd; .monthYearInput .ui-datepicker-calendar {&#xd;     display: none !important;&#xd;     }&#xd; --&gt;&#xd; &#xd; &lt;style&gt;&#xd; .ui-datepicker select.ui-datepicker-month, .ui-datepicker select.ui-datepicker-year&#xd; 	{&#xd; 	color: gray !important;&#xd; }&#xd; &#xd; p {&#xd; 	padding-right: 30px;&#xd; }&#xd; &#xd; .hideTextArea {&#xd; 	display: none;&#xd; }&#xd; &#xd; .hide {&#xd; 	display: none&#xd; }&#xd; ;&#xd; &lt;/style&gt;&#xd; &#xd; &lt;script&gt;&#xd;     function initMonthYearDatepicker(dateCtrlSelector){&#xd; 		$(dateCtrlSelector).datepicker({&#xd; 		    changeMonth: true,&#xd;     		changeYear: true,&#xd; 			showButtonPanel: true,&#xd; 			dateFormat : &apos;mm/yy&apos;,&#xd; 			showOn : &quot;both&quot;,&#xd; 			buttonImage : &quot;/spcp2/resources/img/calendar.png&quot;,&#xd; 			buttonImageOnly : true,&#xd; 		    onClose: function(dateText, inst) { &#xd; 		        var month = $(&quot;#ui-datepicker-div .ui-datepicker-month :selected&quot;).val();&#xd; 		        var year = $(&quot;#ui-datepicker-div .ui-datepicker-year :selected&quot;).val();&#xd; 		        $(this).datepicker(&apos;setDate&apos;, new Date(year, month, 1));&#xd; 		        //$(&quot;.ui-datepicker-calendar&quot;).show();&#xd; 		    },&#xd; 	        beforeShow : function(input, inst) {&#xd; 	            if ((datestr = $(this).val()).length &gt; 0) {&#xd; 	                actDate = datestr.split(&apos;/&apos;);&#xd; 	                month = actDate[0] - 1;&#xd; 	                year = actDate[1];&#xd; 	                $(this).datepicker(&apos;option&apos;, &apos;defaultDate&apos;, new Date(year, month));&#xd; 	                $(this).datepicker(&apos;setDate&apos;, new Date(year, month));&#xd; 	            }&#xd; 	        }&#xd; 		});&#xd; 		&#xd;     }&#xd; &#xd; 	$(document).ready(function() {	&#xd; 		initMonthYearDatepicker(&quot;.monthYearInput&quot;);&#xd;     	$(&apos;.monthYearInput&apos;).mask(&quot;99/9999&quot;, { placeholder: &quot;mm/yyyy&quot; });&#xd;     	&#xd;     	if(&quot;true&quot; == &quot;true&quot;) {&#xd;     		$(&apos;.datepicker&apos;).datepicker(&apos;disable&apos;);&#xd;     		$(&apos;.monthYearInput&apos;).datepicker(&apos;disable&apos;);&#xd;     	}&#xd;     	&#xd; 	});&#xd; &#xd; &lt;/script&gt;&#xd; &#xd; 	&lt;input id=&quot;id&quot; name=&quot;monitorTemplate.template.id&quot; type=&quot;hidden&quot; value=&quot;190&quot;&gt;&lt;input id=&quot;monitorTemplate.disabled&quot; name=&quot;monitorTemplate.disabled&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.templateId&quot; name=&quot;monitorTemplate.templateRequest.templateId&quot; value=&quot;190&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.templatePageId&quot; name=&quot;monitorTemplate.templateRequest.templatePageId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.visibilityFor&quot; name=&quot;monitorTemplate.templateRequest.visibilityFor&quot; value=&quot;Ministry&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.languageSel&quot; name=&quot;monitorTemplate.templateRequest.languageSel&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.programCode&quot; name=&quot;monitorTemplate.templateRequest.programCode&quot; value=&quot;ES&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.businessPlanId&quot; name=&quot;monitorTemplate.templateRequest.businessPlanId&quot; value=&quot;1316161&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.subAssociatedEntityId&quot; name=&quot;monitorTemplate.templateRequest.subAssociatedEntityId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;monitorTemplate.businessPlan.busPlanId&quot; name=&quot;monitorTemplate.businessPlan.busPlanId&quot; value=&quot;1316161&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;pageType&quot; name=&quot;monitorTemplate.template.currentPage.pageType&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;requestTemplatePageId&quot; name=&quot;monitorTemplate.templateRequest.requestTemplatePageId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;!-- for monitoring report only --&gt;&lt;input id=&quot;firstReportId&quot; name=&quot;monitorTemplate.firstReportId&quot; type=&quot;hidden&quot; value=&quot;14086&quot;&gt;&lt;input id=&quot;associatedEntityId&quot; name=&quot;monitorTemplate.associatedEntityId&quot; type=&quot;hidden&quot; value=&quot;14086&quot;&gt;&lt;input id=&quot;subAssociatedEntityId&quot; name=&quot;monitorTemplate.subAssociatedEntityId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;monitorTemplate.template.pages0.id&quot; name=&quot;monitorTemplate.template.pages[0].id&quot; type=&quot;hidden&quot; value=&quot;1133&quot;&gt;&lt;input id=&quot;monitorTemplate.template.pages0.label&quot; name=&quot;monitorTemplate.template.pages[0].label&quot; type=&quot;hidden&quot; value=&quot;QSAR&quot;&gt;&lt;input id=&quot;monitorTemplate.template.pages0.active&quot; name=&quot;monitorTemplate.template.pages[0].active&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;table class=&quot;table-responsive table table-bordered table-condensed&quot;&gt;&#xd; 					&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;table-header tableTitle spc-panel-title&quot;&gt;&lt;h2 title=&quot;Instruction&quot;&gt;Instruction&lt;/h2&gt;&lt;/td&gt;&#xd; 						&lt;td class=&quot;table-header table-header-collapse arrow&quot;&gt;&#xd; 							 &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;section1134&quot; id=&quot;shortcutsArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						     &lt;/div&gt;&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 					&#xd; 					&lt;tr id=&quot;section1134&quot; class=&quot;details collapse in&quot;&gt;&#xd; 						&lt;td colspan=&quot;2&quot; class=&quot;table-responsive&quot;&gt;&#xd; 							&#xd; 								&lt;table class=&quot;table-no-border table-condensed table-responsive&quot;&gt;&#xd; 								&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].id&quot; type=&quot;hidden&quot; value=&quot;3133&quot;&gt;&lt;input id=&quot;answerId-3133&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Purpose&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;The Quarterly Status and Adjustment Report (QSAR) provides a consistent approach for reporting against performance commitments and general program management for all funded service delivery sites. The intended outcome is to support service providers&amp;amp;amp;rsquo; organizational capacity as well as to ensure the continuous improvement of program delivery.&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;QSAR reporting periods and due dates for 2018-19 are:&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p style=&amp;amp;#034;padding-left: 30px;&amp;amp;#034;&amp;amp;gt;Reporting period: April 1, 2018 to June 30, 2018&amp;amp;lt;br /&amp;amp;gt;Due Date: August 16, 2018&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p style=&amp;amp;#034;padding-left: 30px;&amp;amp;#034;&amp;amp;gt;Reporting period: July 1, 2018 to September 30, 2018&amp;amp;lt;br /&amp;amp;gt;Due Date: October 22, 2018&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p style=&amp;amp;#034;padding-left: 30px;&amp;amp;#034;&amp;amp;gt;Reporting period: October 1, 2018 to December 31, 2018 &amp;amp;lt;br /&amp;amp;gt;Due Date: January 21, 2019&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p style=&amp;amp;#034;padding-left: 30px;&amp;amp;#034;&amp;amp;gt;Reporting period: January 1, 2019 to March 31, 2019&amp;amp;lt;br /&amp;amp;gt;Due Date: April 23, 2019&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections0.elements0.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tbody&gt;&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Purpose&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;The Quarterly Status and Adjustment Report (QSAR) provides a consistent approach for reporting against performance commitments and general program management for all funded service delivery sites. The intended outcome is to support service providers’ organizational capacity as well as to ensure the continuous improvement of program delivery.&lt;/p&gt;&#xd; &lt;p&gt;QSAR reporting periods and due dates for 2018-19 are:&lt;/p&gt;&#xd; &lt;p style=&quot;padding-left: 30px;&quot;&gt;Reporting period: April 1, 2018 to June 30, 2018&lt;br&gt;Due Date: August 16, 2018&lt;/p&gt;&#xd; &lt;p style=&quot;padding-left: 30px;&quot;&gt;Reporting period: July 1, 2018 to September 30, 2018&lt;br&gt;Due Date: October 22, 2018&lt;/p&gt;&#xd; &lt;p style=&quot;padding-left: 30px;&quot;&gt;Reporting period: October 1, 2018 to December 31, 2018 &lt;br&gt;Due Date: January 21, 2019&lt;/p&gt;&#xd; &lt;p style=&quot;padding-left: 30px;&quot;&gt;Reporting period: January 1, 2019 to March 31, 2019&lt;br&gt;Due Date: April 23, 2019&lt;/p&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].id&quot; type=&quot;hidden&quot; value=&quot;3132&quot;&gt;&lt;input id=&quot;answerId-3132&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Process&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;Each funded site is required to:&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;ul&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;submit the QSAR no later than the due date;&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;complete the QSAR questions by referencing available activity and financial reports, each site&amp;amp;amp;rsquo;s Schedules &amp;amp;amp;ldquo;D&amp;amp;amp;rdquo; and &amp;amp;amp;ldquo;G&amp;amp;amp;rdquo;, and the approved business plan for the current agreement;&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;respond to all mandatory questions, and provide comments, if required; and&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;complete one QSAR for each funded site.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;/ul&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;The Province will:&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;ul&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;provide written feedback no later than &amp;amp;lt;strong&amp;amp;gt;fifteen&amp;amp;lt;/strong&amp;amp;gt; (15) business days after the QSAR is submitted to the ministry; and&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;comment on strategies and/or actions that are reported on by the service provider in each QSAR.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;/ul&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections0.elements1.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;Each funded site is required to:&lt;/p&gt;&#xd; &lt;ul&gt;&#xd; &lt;li&gt;submit the QSAR no later than the due date;&lt;/li&gt;&#xd; &lt;li&gt;complete the QSAR questions by referencing available activity and financial reports, each site’s Schedules “D” and “G”, and the approved business plan for the current agreement;&lt;/li&gt;&#xd; &lt;li&gt;respond to all mandatory questions, and provide comments, if required; and&lt;/li&gt;&#xd; &lt;li&gt;complete one QSAR for each funded site.&lt;/li&gt;&#xd; &lt;/ul&gt;&#xd; &lt;p&gt;&lt;strong&gt;The Province will:&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;ul&gt;&#xd; &lt;li&gt;provide written feedback no later than &lt;strong&gt;fifteen&lt;/strong&gt; (15) business days after the QSAR is submitted to the ministry; and&lt;/li&gt;&#xd; &lt;li&gt;comment on strategies and/or actions that are reported on by the service provider in each QSAR.&lt;/li&gt;&#xd; &lt;/ul&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].id&quot; type=&quot;hidden&quot; value=&quot;3131&quot;&gt;&lt;input id=&quot;answerId-3131&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Please note&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;ul&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;Day 1 is considered the day that the QSARs are released in EOIS-SP Connect.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;All historically reported information will be available in EOIS-SP Connect during future quarters of the same fiscal year.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;Service providers are expected to submit the requested information for the current reporting period.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;Responses received after the due date will be noted as such in EOIS-SP Connect.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;The QSAR is not an audit tool. As indicated in Schedule &amp;amp;amp;ldquo;H&amp;amp;amp;rdquo; of the Agreement, only the Estimate of Expenditure Reports (EERs) will be used to make in-year financial adjustments.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;/ul&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections0.elements2.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;ul&gt;&#xd; &lt;li&gt;Day 1 is considered the day that the QSARs are released in EOIS-SP Connect.&lt;/li&gt;&#xd; &lt;li&gt;All historically reported information will be available in EOIS-SP Connect during future quarters of the same fiscal year.&lt;/li&gt;&#xd; &lt;li&gt;Service providers are expected to submit the requested information for the current reporting period.&lt;/li&gt;&#xd; &lt;li&gt;Responses received after the due date will be noted as such in EOIS-SP Connect.&lt;/li&gt;&#xd; &lt;li&gt;The QSAR is not an audit tool. As indicated in Schedule “H” of the Agreement, only the Estimate of Expenditure Reports (EERs) will be used to make in-year financial adjustments.&lt;/li&gt;&#xd; &lt;/ul&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&#xd; 								&lt;/tbody&gt;&lt;/table&gt;&#xd; 							&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;						&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; 	&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;table class=&quot;table-responsive table table-bordered table-condensed&quot;&gt;&#xd; 					&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;table-header tableTitle spc-panel-title&quot;&gt;&lt;h2 title=&quot;Questions&quot;&gt;Questions&lt;/h2&gt;&lt;/td&gt;&#xd; 						&lt;td class=&quot;table-header table-header-collapse arrow&quot;&gt;&#xd; 							 &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;section1135&quot; id=&quot;shortcutsArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						     &lt;/div&gt;&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 					&#xd; 					&lt;tr id=&quot;section1135&quot; class=&quot;details collapse in&quot;&gt;&#xd; 						&lt;td colspan=&quot;2&quot; class=&quot;table-responsive&quot;&gt;&#xd; 							&#xd; 								&lt;table class=&quot;table-no-border table-condensed table-responsive&quot;&gt;&#xd; 								&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].id&quot; type=&quot;hidden&quot; value=&quot;3136&quot;&gt;&lt;input id=&quot;answerId-3136&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384398&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND02&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;1. &amp;amp;lt;/strong&amp;amp;gt;Please share successes and/or challenges that your organization has faced in meeting its Schedule &amp;amp;#034;G&amp;amp;#034; Performance Commitments, and/or any of the strategies committed to in your 2018-19 business plan with the Province. Be sure to include the specific Performance Commitments and/or strategies, and the actions that you will or have already undertaken to achieve and sustain these commitments. *&amp;amp;amp;nbsp;*&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements0.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tbody&gt;&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;1. Performance Commitments&quot;&gt;&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt;Please share successes and/or challenges that your organization has faced in meeting its Schedule &quot;G&quot; Performance Commitments, and/or any of the strategies committed to in your 2018-19 business plan with the Province. Be sure to include the specific Performance Commitments and/or strategies, and the actions that you will or have already undertaken to achieve and sustain these commitments. *&amp;nbsp;*&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3136&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;This SDS successfully achieved all the Schedule “G” Performance Commitments for both ES and YJL. This SDS has attained 100% of assisted services target by accepting walk-in clients and referrals from community partners such as Toronto Community Housing as well as off-site intake. In this way, providing services to clients that are furthest removed from employment. This SDS continues to actively participate in various local committees such as the Student Leadership and Youth (SLYE), and service provider E-Team and has joined Meaningful Employment and Economic Opportunities Action group this quarter.  This presence allows the SDS to stay current and respond to emerging labour market trends, employment opportunities and problem-solve solutions to shared challenges.  Partnering with Frontier College to provide clients and residents with basic computer classes on-site.  This SDS hosted information sessions for applying to University of Toronto jobs, Access Community Capital Fund and held a company-wide Career in the Trades week to provide emerging trends in the labour market. This SDS has marketed and promoted Employment Ontario services at events such as Seneca College and Pathways to Education information sessions this quarter.  As well, this SDS has joined with East Scarborough Storefront to partner with LIUNA to assist clients to gain the technical and soft skills necessary to access the skilled trades.  This SDS attended Cannexus 2019 with over 1500 attendees to learn and share best practices in the career counselling and employment sector to assist clients in a more meaningful way. This SDS continues to provide monthly itinerant services to Service Canada and Malvern TESS with whom we also share our monthly newsletter outlining workshops and EO services and programs. This SDS continues to outreach and source new community partner opportunities that will assist and support clients with education and employment goals such as opening our facilities so that one our employers can have their new staff trained on First Aid/CPR and Mask fitting monthly. This SDS participated as a member of the SSIP committee for the 2019 Neighborhood Grant review panel, which demonstrates our commitment and ongoing support of the residents in the community.  These activities allow this SDS to continue to achieve its service coordination target.  We continue to maintain a good relationship with all of our successful YJL clients and continue to encourage them to refer their friends who require job search assistance.  The EYTI program is at 35.5% of the YTD target and had a gradual uptake with employers requesting information on program criteria for both employers and clients.&lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3136&quot;&gt;302&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].id&quot; type=&quot;hidden&quot; value=&quot;3135&quot;&gt;&lt;input id=&quot;answerId-3135&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry View Only Note&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;This question is mandatory and must include an update from all service providers. The focus should highlight successes and/or challenges, as applicable to the site in question.&amp;amp;lt;br /&amp;amp;gt;&amp;amp;lt;br /&amp;amp;gt;Ministry staff should further validate the service provider&amp;amp;amp;rsquo;s responses by reviewing business plan and agreement commitments, as well as current activity reports, in order to help surface any potential areas of concern as early as possible.&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;&amp;amp;amp;nbsp;&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements1.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Ministry View Only Note&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;This question is mandatory and must include an update from all service providers. The focus should highlight successes and/or challenges, as applicable to the site in question.&lt;br&gt;&lt;br&gt;Ministry staff should further validate the service provider’s responses by reviewing business plan and agreement commitments, as well as current activity reports, in order to help surface any potential areas of concern as early as possible.&lt;/p&gt;&#xd; &lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].inputType&quot; type=&quot;hidden&quot; value=&quot;IT12&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].id&quot; type=&quot;hidden&quot; value=&quot;3140&quot;&gt;&lt;input id=&quot;answerId-3140&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;378038&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;2.&amp;amp;amp;nbsp;&amp;amp;lt;/strong&amp;amp;gt;Innovation takes original, different, out-of-the-box, and/or creative ideas and turns them into new approaches in order to add value, improve &amp;amp;lt;strong&amp;amp;gt;client experience and/or have a positive community impact&amp;amp;lt;/strong&amp;amp;gt;. Has your site taken a new innovative approach to improve client experience and/or community impact, which goes beyond standard program guideline expectations? For example, applied best practices to processes in order to improve service delivery.&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Note:&amp;amp;lt;/strong&amp;amp;gt; this question is &amp;amp;lt;strong&amp;amp;gt;optional&amp;amp;lt;/strong&amp;amp;gt; and will &amp;amp;lt;strong&amp;amp;gt;not&amp;amp;lt;/strong&amp;amp;gt; be used to evaluate performance or determine future funding arrangements. Responses may be shared with the broader EO Network to support continuous improvement and sharing of best practices, please do not include examples which have already been reported on, either during the current or previous QSAR reporting period(s).&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements2.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Innovation&quot;&gt;&lt;p&gt;&lt;strong&gt;2.&amp;nbsp;&lt;/strong&gt;Innovation takes original, different, out-of-the-box, and/or creative ideas and turns them into new approaches in order to add value, improve &lt;strong&gt;client experience and/or have a positive community impact&lt;/strong&gt;. Has your site taken a new innovative approach to improve client experience and/or community impact, which goes beyond standard program guideline expectations? For example, applied best practices to processes in order to improve service delivery.&lt;/p&gt;&#xd; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this question is &lt;strong&gt;optional&lt;/strong&gt; and will &lt;strong&gt;not&lt;/strong&gt; be used to evaluate performance or determine future funding arrangements. Responses may be shared with the broader EO Network to support continuous improvement and sharing of best practices, please do not include examples which have already been reported on, either during the current or previous QSAR reporting period(s).&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements2.elementAnswers0.answer1&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].elementAnswers[0].answer&quot; title=&quot;Yes&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;1&quot; checked=&quot;checked&quot;&gt;&amp;nbsp;&amp;nbsp;Yes&amp;nbsp;&amp;nbsp;&#xd; 													    		&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements2.elementAnswers0.answer2&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].elementAnswers[0].answer&quot; title=&quot;No&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;0&quot;&gt;&amp;nbsp;&amp;nbsp;No&amp;nbsp;&amp;nbsp;&#xd; 													    		&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;3140&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].id&quot; type=&quot;hidden&quot; value=&quot;3148&quot;&gt;&lt;input id=&quot;answerId-3148&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384399&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND03&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;If yes, please take the opportunity to highlight the new innovative approaches your organization has undertaken, including why you have chosen to share this particular example.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements3.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;If yes, please take the opportunity to highlight the new innovative approaches your organization has undertaken.&quot;&gt;&lt;p&gt;If yes, please take the opportunity to highlight the new innovative approaches your organization has undertaken, including why you have chosen to share this particular example.&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3148&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;This SDS fosters community partnerships by providing customized on-site workshops geared to specific audiences as well as online Learning Centre with various resources. This SDS has hosted guest speakers on topics in response to emerging trends in the labour market such as Careers in the Trades and Access Community Capital Fund.&#xd; &#xd; This site&apos;s staff makes touchpoint calls to clients at 1 month and 2 month of exit, to assist with job search resources and opportunities to maintain momentum and encouragement during the job search process.&#xd; &lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3148&quot;&gt;2457&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;3140&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].id&quot; type=&quot;hidden&quot; value=&quot;3144&quot;&gt;&lt;input id=&quot;answerId-3144&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384400&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND03&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;Please identify how successful this new innovative practice has been in improving overall client experience and/or having a positive community impact, and describe some of the benefits that this new practice has had.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements4.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Innovation&quot;&gt;&lt;p&gt;Please identify how successful this new innovative practice has been in improving overall client experience and/or having a positive community impact, and describe some of the benefits that this new practice has had.&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3144&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;This SDS has had client’s experience increased and heightened awareness and willingness to provide feedback on ongoing job search results and attainment of employment and training provider.  Client participation engagement and retention has increased by 25% and unknown results have decreased by 15% since the end of Q3.&lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3144&quot;&gt;2680&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].id&quot; type=&quot;hidden&quot; value=&quot;3134&quot;&gt;&lt;input id=&quot;answerId-3134&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry View Only Note&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;This question is optional, a roll-up report of best practices and innovations that are shared here will be compiled and distributed both within the Ministry and to service providers at a later date. There is &amp;amp;lt;strong&amp;amp;gt;no need for action at the local office level&amp;amp;lt;/strong&amp;amp;gt; in response to this question.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements5.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Ministry View Only Note&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;This question is optional, a roll-up report of best practices and innovations that are shared here will be compiled and distributed both within the Ministry and to service providers at a later date. There is &lt;strong&gt;no need for action at the local office level&lt;/strong&gt; in response to this question.&lt;/p&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].inputType&quot; type=&quot;hidden&quot; value=&quot;IT12&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].id&quot; type=&quot;hidden&quot; value=&quot;3143&quot;&gt;&lt;input id=&quot;answerId-3143&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384401&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND02&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;3. &amp;amp;lt;/strong&amp;amp;gt;Has your organization had difficulty in achieving your Strategic Priority targets for OW and PWD client participation as committed to in your Business Plan &amp;amp;lt;strong&amp;amp;gt;(ES only)&amp;amp;lt;/strong&amp;amp;gt;?&amp;amp;amp;nbsp;*&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements6.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;3- Has your organization had difficulty in achieving your Strategic Priority targets for OW and PWD client participation as committed to in your Business Plan?&quot;&gt;&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt;Has your organization had difficulty in achieving your Strategic Priority targets for OW and PWD client participation as committed to in your Business Plan &lt;strong&gt;(ES only)&lt;/strong&gt;?&amp;nbsp;*&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements6.elementAnswers0.answer1&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].elementAnswers[0].answer&quot; title=&quot;Yes&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;1&quot; checked=&quot;checked&quot;&gt;&amp;nbsp;&amp;nbsp;Yes&amp;nbsp;&amp;nbsp;&#xd; 													    		&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements6.elementAnswers0.answer2&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].elementAnswers[0].answer&quot; title=&quot;No&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;0&quot;&gt;&amp;nbsp;&amp;nbsp;No&amp;nbsp;&amp;nbsp;&#xd; 													    		&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;3143&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].id&quot; type=&quot;hidden&quot; value=&quot;3151&quot;&gt;&lt;input id=&quot;answerId-3151&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384402&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND03&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;If yes, what strategies and action(s) do you have in place to achieve your targets by the agreement end date?&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements7.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;If yes, what strategies and action(s) do you have in place to achieve your targets by agreement end date?  &quot;&gt;&lt;p&gt;If yes, what strategies and action(s) do you have in place to achieve your targets by the agreement end date?&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3151&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;This SDS is has achieved 68% OW YTD target and over 100% of PWD Strategic Priority targets.  This SDS provides monthly itinerant services to Malvern TESS, Catholic Crosscultural Services and Agincourt Community Services (ACSA) - Chester Le. As a few TESS offices in Scarborough are merging and realigning, this SDS continues to stay in contact with TESS, demonstrating our willingness to provide itinerant services to additional TESS offices in Scarborough.  Understanding that TESS is currently reviewing services with respect to the most recent Auditor General report, this SDS continues to seek new partnerships and opportunities to assist Ontario Works clients such as Centre for Immigrant and Community Services, Toronto Integrated Service Centre (CICS) and Toronto Community Housing residents.&lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3151&quot;&gt;2201&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].id&quot; type=&quot;hidden&quot; value=&quot;3137&quot;&gt;&lt;input id=&quot;answerId-3137&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry View Only Note&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;Ministry staff should validate the service provider&amp;amp;amp;rsquo;s responses by reviewing activity reports for the current reporting period, in order to help surface any potential areas of concern as early as possible.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements8.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Ministry View Only Note&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;Ministry staff should validate the service provider’s responses by reviewing activity reports for the current reporting period, in order to help surface any potential areas of concern as early as possible.&lt;/p&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&#xd; 								&lt;/tbody&gt;&lt;/table&gt;&#xd; 							&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;						&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; 	&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;table class=&quot;table-responsive table table-bordered table-condensed&quot;&gt;&#xd; 					&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;table-header tableTitle spc-panel-title&quot;&gt;&lt;h2 title=&quot;Ministry Feedback&quot;&gt;Ministry Feedback&lt;/h2&gt;&lt;/td&gt;&#xd; 						&lt;td class=&quot;table-header table-header-collapse arrow&quot;&gt;&#xd; 							 &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;section1136&quot; id=&quot;shortcutsArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						     &lt;/div&gt;&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 					&#xd; 					&lt;tr id=&quot;section1136&quot; class=&quot;details collapse in&quot;&gt;&#xd; 						&lt;td colspan=&quot;2&quot; class=&quot;table-responsive&quot;&gt;&#xd; 							&#xd; 								&lt;table class=&quot;table-no-border table-condensed table-responsive&quot;&gt;&#xd; 								&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].id&quot; type=&quot;hidden&quot; value=&quot;3152&quot;&gt;&lt;input id=&quot;answerId-3152&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;387962&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry Feedback&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;br /&amp;amp;gt;&amp;amp;lt;br /&amp;amp;gt;Please find feedback from your ministry consultant below.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements0.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tbody&gt;&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Ministry Feedback&quot;&gt;&lt;p&gt;&lt;strong&gt;Ministry Feedback&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Please find feedback from your ministry consultant below.&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3152&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;Thank you for your timely submission of your QSAR for Q4.  Congratulations on meeting or exceeding targets in all the core measures: Customer Service (target:93%- actual:99%), Effectiveness (target:69%- actual:70%), Suitability (target:32%- actual:36%).  Outstanding dedication and performance has been noted by the Ministry. In addition to this, targets were surpassed regarding the performance commitments in assisted intake service and workshop activities/information sessions.   It is noted that you didn’t meet your client targets for OW but have surpassed your target for PWD as outlined in the business plan. OW strategic priority is at 68% (115 OW clients) and PWD is at 158% (103 PWD clients) for this fiscal year.  &#xd; The Service Quality Standard (SQS) is above target (target:5.63%- actual:5.83%). The ministry acknowledges your efforts and perseverance to assist these challenging client groups.  &#xd; &#xd; Regarding YJL for Q4, the Ministry congratulates you on your dedication and hard work regarding Customer Satisfaction which is above target at 102%.  In addition to this, you have surpassed the target for intake in resource and information sessions/workshops at 661%.  Job Matching is above target at 103% for Q4.  &#xd; Thank you for the work you do in the community, and I look forward to a successful incoming fiscal year 2019-20.&#xd; &#xd; &#xd; &lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3152&quot;&gt;1653&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].inputType&quot; type=&quot;hidden&quot; value=&quot;IT12&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].id&quot; type=&quot;hidden&quot; value=&quot;3552&quot;&gt;&lt;input id=&quot;answerId-3552&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;389236&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND02&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry View Only Question&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;A follow-up can be any activity from a call or an email to the service provider, to scheduling an on-site visit, which leads to obtaining more detailed information to address concerns that are raised by any of the responses provided above. If any answers above are incomplete, you have the option to &amp;amp;amp;ldquo;push back&amp;amp;amp;rdquo; this report to the provider, however if you feel that the answers are complete, but additional conversation or oversight of some form is warranted, identify that as a need to follow-up.&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;Having reviewed all of the information provided in this template, is follow-up with this site required?&amp;amp;amp;nbsp;*&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements1.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Follow-up required?&quot;&gt;&lt;p&gt;&lt;strong&gt;Ministry View Only Question&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;A follow-up can be any activity from a call or an email to the service provider, to scheduling an on-site visit, which leads to obtaining more detailed information to address concerns that are raised by any of the responses provided above. If any answers above are incomplete, you have the option to “push back” this report to the provider, however if you feel that the answers are complete, but additional conversation or oversight of some form is warranted, identify that as a need to follow-up.&lt;/p&gt;&#xd; &lt;p&gt;Having reviewed all of the information provided in this template, is follow-up with this site required?&amp;nbsp;*&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements1.elementAnswers0.answer1&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].elementAnswers[0].answer&quot; title=&quot;Yes&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;1&quot;&gt;&amp;nbsp;&amp;nbsp;Yes&amp;nbsp;&amp;nbsp;&#xd; 													    		&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements1.elementAnswers0.answer2&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].elementAnswers[0].answer&quot; title=&quot;No&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;0&quot; checked=&quot;checked&quot;&gt;&amp;nbsp;&amp;nbsp;No&amp;nbsp;&amp;nbsp;&#xd; 													    		&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;3552&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].id&quot; type=&quot;hidden&quot; value=&quot;3553&quot;&gt;&lt;input id=&quot;answerId-3553&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND03&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;If yes, please provide (internal) comments in the text box below.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements2.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Follow-up comments&quot;&gt;&lt;p&gt;If yes, please provide (internal) comments in the text box below.&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3553&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3553&quot;&gt;3000&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&#xd; 								&lt;/tbody&gt;&lt;/table&gt;&#xd; 							&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;						&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; 	&lt;!--  submit recommendation dialog --&gt;&lt;!--  re open monitoring report dialog --&gt;&#xd; 				&lt;div id=&quot;dialog-reopen-form&quot; title=&quot;Re-Open Monitoring Report&quot; class=&quot;totally-hidden&quot;&gt;&#xd; 				  &lt;div class=&quot;container-fluid&quot;&gt;&#xd; 					&lt;p&gt;Monitoring Report - Re-Open&lt;/p&gt;&#xd; 					&lt;!-- confirm to re open --&gt;&#xd; 					&lt;div class=&quot;error&quot;&gt;&#xd; 						&lt;div id=&quot;commentsRequired&quot; style=&quot;display: none;&quot; class=&quot;error&quot;&gt;&#xd; 							Comments Required&#xd; 						&lt;/div&gt;&#xd; 					&lt;/div&gt;&#xd; &#xd; 					&lt;br&gt;&#xd; 					&lt;div class=&quot;row&quot;&gt;&#xd; 						&lt;div class=&quot;col-xs-3 col-sm-3 col-md-3&quot;&gt;&#xd; 							&lt;label class=&quot;&quot; for=&quot;recommendationCommentDialog&quot;&gt;Comments&amp;nbsp;&lt;/label&gt;&#xd; 						&lt;/div&gt;&#xd; 						&lt;div class=&quot;col-xs-9 col-sm-9 col-md-9&quot;&gt;&#xd; 							&lt;textarea id=&quot;recommendationCommentDialog&quot; name=&quot;monitorTemplate.recommendationComment&quot; maxlength=&quot;1000&quot; class=&quot;form-control&quot; rows=&quot;10&quot; cols=&quot;100&quot;&gt;&lt;/textarea&gt;&#xd; 						&lt;/div&gt;&#xd; 					&lt;/div&gt;&#xd; 				  &lt;/div&gt;&#xd; 				&lt;/div&gt;&#xd; 			 &lt;/form&gt;&#xd; 			&lt;/div&gt;&#xd; &#xd; 			&lt;div class=&quot;col-xs-12 col-sm-12 col-md-12 center-align&quot;&gt;&#xd; 				&#xd; 					&lt;button id=&quot;reOpenBtn&quot; class=&quot;btn btn-default&quot;&gt;Re-Open&lt;/button&gt;&#xd; 				&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; 	&lt;/div&gt;&#xd; &lt;/div&gt;&#xd; &#xd; &#xd; 				&lt;br&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;!-- otherwise, show LSP --&gt;&lt;!-- template pages --&gt;&#xd; 		&lt;div id=&quot;statusHistory&quot;&gt;&#xd; 			&lt;!-- Status History --&gt;&#xd; &lt;div class=&quot;row&quot;&gt;&#xd; 	&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 		&lt;table class=&quot;table table-bordered table-condensed&quot;&gt;&#xd; 			&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 				&lt;td class=&quot;table-header table-no-border spc-panel-title&quot;&gt;&lt;h2&gt;Status History&lt;/h2&gt;&lt;/td&gt;&#xd; 				&lt;td class=&quot;table-header table-no-border table-header-collapse&quot;&gt;&#xd; 					&lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 					   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;statusHistory0&quot; id=&quot;statusHistoryArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 				     &lt;/div&gt;&#xd; 				&#xd; 				&lt;/td&gt;&#xd; 			&lt;/tr&gt;&#xd; 			&lt;tr id=&quot;statusHistory0&quot; class=&quot;details collapse in&quot;&gt;&#xd; 				&lt;td colspan=&quot;2&quot; class=&quot;spc-header-box&quot;&gt;&#xd; 					&lt;table class=&quot;table-responsive table-condensed&quot; id=&quot;statusHistory&quot;&gt;&#xd; 						&lt;thead class=&quot;table-header spc_header&quot;&gt;&#xd; 							&lt;tr&gt;&#xd; 								&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 									Date time&#xd; 								&lt;/td&gt;&#xd; 								&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 									Status Change&#xd; 								&lt;/td&gt;												&#xd; 								&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 									Created By&#xd; 								&lt;/td&gt;&#xd; 								&lt;td class=&quot;col-xs-3 col-sm-6 col-md-6 col-title&quot;&gt;&#xd; 									Comments&#xd; 								&lt;/td&gt;&#xd; 							&lt;/tr&gt;&#xd; 						&lt;/thead&gt;&#xd; 						&#xd; 							&lt;tbody&gt;&#xd; 								&#xd; 									&lt;tr class=&quot;  even&quot;&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;13/05/2019 08:25&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Confirmed&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Madiara Coulibaly&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-6 col-sm-6 col-md-6&quot;&gt;Thank you for your timely submission of your QSAR for Q4.  Congratulations on meeting or exceeding targets in all the core measures: Customer Service (target:93%- actual:99%), Effectiveness (target:69%- actual:70%), Suitability (target:32%- actual:36%).  Outstanding dedication and performance has been noted by the Ministry. In addition to this, targets were surpassed regarding the performance commitments in assisted intake service and workshop activities/information sessions.   It is noted that you didn’t meet your client targets for OW but have surpassed your target for PWD as outlined in the business plan. OW strategic priority is at 68% (115 OW clients) and PWD is at 158% (103 PWD clients) for this fiscal year.  &#xd; The Service Quality Standard (SQS) is above target (target:5.63%- actual:5.83%). The ministry acknowledges your efforts and perseverance to assist these challenging client groups.  &#xd; &#xd; Regarding YJL for Q4, the Ministry congratulates you on your dedication and hard w&lt;/td&gt;&#xd; 									&lt;/tr&gt;&#xd; 								&#xd; 									&lt;tr class=&quot;  odd&quot;&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;22/04/2019 14:01&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Submitted&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Kwame Brown&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-6 col-sm-6 col-md-6&quot;&gt;&lt;/td&gt;&#xd; 									&lt;/tr&gt;&#xd; 								&#xd; 									&lt;tr class=&quot;  even&quot;&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;30/03/2019 23:05&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Open&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;SYSTEM&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-6 col-sm-6 col-md-6&quot;&gt;&lt;/td&gt;&#xd; 									&lt;/tr&gt;&#xd; 								&#xd; 							&lt;/tbody&gt;&#xd; 															&#xd; 					&lt;/table&gt;							&#xd; 				&lt;/td&gt;&#xd; 			&lt;/tr&gt;&#xd; 		&lt;/tbody&gt;&lt;/table&gt;&#xd; 	&lt;/div&gt;&#xd; &lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; &#xd; 	  &#xd; &#xd; 	        &lt;div class=&quot;error&quot;&gt;&#xd; 					    &lt;!-- error messages --&gt;&#xd; 						   &lt;div id=&quot;reviewCommentsRequired&quot; style=&quot;display: none;&quot; class=&quot;error&quot;&gt;Mandatory fields &amp;lt;Comments&amp;gt; must be complete.&lt;/div&gt;&#xd; 					       &lt;div id=&quot;reviewDateRequired&quot; style=&quot;display: none;&quot; class=&quot;error&quot;&gt;Mandatory fields &amp;lt;Review Date&amp;gt; must be complete.&lt;/div&gt;&#xd; 			&lt;/div&gt;&#xd; &#xd; 	      &lt;!-- Review Section --&gt;&#xd; 	      &lt;div class=&quot;row&quot;&gt;&#xd; 	        &lt;form id=&quot;submitForm&quot; role=&quot;form&quot; class=&quot;form form-horizontal&quot; action=&quot;/spcp2/protected/monitoring/report/14086&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; autocomplete=&quot;off&quot;&gt;&lt;input id=&quot;monitorReportDetail.id&quot; name=&quot;monitorReportDetail.id&quot; type=&quot;hidden&quot; value=&quot;14086&quot;&gt;&#xd; &#xd; &#xd; 	        &lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;input id=&quot;review.reviewId&quot; name=&quot;review.reviewId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&#xd; 				&lt;table class=&quot;table table-bordered table-condensed table-responsive&quot;&gt;&#xd; 				   &lt;thead&gt;&#xd; 					&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;table-header table-no-border  spc-panel-title&quot;&gt;Review&lt;/td&gt;&#xd; 						&lt;td class=&quot;table-header table-no-border table-header-collapse&quot;&gt;&#xd; 	                       &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;reviewDetail&quot; id=&quot;reviewDetailArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						   &lt;/div&gt;&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 				   &lt;/thead&gt;&#xd; 					&lt;tbody&gt;&lt;tr id=&quot;reviewDetail&quot; class=&quot;details collapse in&quot;&gt;&#xd; &#xd; 						&lt;td colspan=&quot;2&quot;&gt;&#xd; 					     &#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 	    	&lt;/div&gt;&#xd; 	    	&lt;/form&gt;&#xd; 		  &lt;/div&gt;&#xd; 	  &#xd; &#xd; &#xd; &#xd; &#xd; 	&lt;/div&gt;&#xd; &#xd; &lt;/div&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/generatePdf.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Display Pdf" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/displayPdf.do</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;%PDF&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Agreements" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Agreements Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/agreements/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Agreement Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: List Agreements Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/agreements/agreements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Agreements&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Agreement" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value">COJG</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProvider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProvider</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">poNumber</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="poNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">poNumber</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="localOffice" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">localOffice</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="spRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">spRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fiscalYearCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fiscalYearCode</stringProp>
                    <stringProp name="Argument.value">2019-2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="statusCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">statusCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/agreements/agreementSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Ministry Forecast" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Monitoring Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Monitoring Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request:  List Ministry Forecasts Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/ministryForecasts</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Ministry Forecasts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request:  Search Ministry Forecasts" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageCount</stringProp>
                    <stringProp name="Argument.value">32</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value">COJG</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="localOfficeId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">localOfficeId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="monthCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">monthCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="forecastTypeCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">forecastTypeCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProvider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProvider</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="spRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">spRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fiscalYearCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fiscalYearCode</stringProp>
                    <stringProp name="Argument.value">2019-2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="statusCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">statusCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/ministryForecastsSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">spcp2/logout</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="RandomTimer.range">22733.0</stringProp>
            <stringProp name="ConstantTimer.delay">11366.5</stringProp>
            <stringProp name="TestPlan.comments">Recorded time was 22733 milliseconds</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug Group" enabled="false">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="RandomTimer.range">7000</stringProp>
          <stringProp name="ConstantTimer.delay">3000</stringProp>
          <stringProp name="TestPlan.comments">Recorded time was 6493 milliseconds</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="userName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">userName</stringProp>
                <stringProp name="Argument.value">${USER}</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">spcp2/directLogon.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getUrlAsString()
	def pattern = &quot;administration&quot;
	def res = data =~ pattern
	if(res.size() == 0) {
		pattern = &quot;dashboard&quot;
		res = data =~ pattern
		if(res.size() == 0) {
			should_restart = true
			log.info data.toString()
		}
		else {
			log.info &quot;TYPE: dashboard : ${vars.get(&apos;USER&apos;)}&quot;
		}
	}
	else {
		log.info &quot;TYPE: administration : ${vars.get(&apos;USER&apos;)}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;AUTHENTICATION FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Login failed&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.control.WeightedSwitchController guiclass="com.blazemeter.jmeter.control.WeightedSwitchControllerGui" testclass="com.blazemeter.jmeter.control.WeightedSwitchController" testname="Weighted Switch Controller" enabled="true">
          <boolProp name="IsRandomChoice">true</boolProp>
          <collectionProp name="Weights">
            <collectionProp name="-621180660">
              <stringProp name="1153619511">List Templates</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="953624277">
              <stringProp name="-1439637903">List Plan Package</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="607739819">
              <stringProp name="270121620">Search Service Provider</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="1979781836">
              <stringProp name="-368391031">List Monitoring Reports</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="741046461">
              <stringProp name="283065451">List Agreements</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-830089756">
              <stringProp name="31592666">List Ministry Forecast</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
          </collectionProp>
        </com.blazemeter.jmeter.control.WeightedSwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Templates" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Bussiness Planning Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/home</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Business Plans Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: List Published Templates Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/templates</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Published Business Plan Templates&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search: Published Templates" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value">LBS-SD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">id</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="effectiveDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">effectiveDate</stringProp>
                    <stringProp name="Argument.value">01/01/2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/templateSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Published Business Plan Templates&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Plan Package" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Bussiness Planning Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/home</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Business Plans Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: List Business Plan Packages Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/viewBizPlanPackagesList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Business Plan Packages&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Business Plan Packages" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value">COJG</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProvider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProvider</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">id</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="localOffice" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">localOffice</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="spRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">spRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fiscalYearCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fiscalYearCode</stringProp>
                    <stringProp name="Argument.value">2019-2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="statusCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">statusCode</stringProp>
                    <stringProp name="Argument.value">PS04</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/businessplans/bizPlanPkgSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Search Service Provider" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Service Provider Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/serviceProvider/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Service Provider Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Find Service Provider Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/serviceProvider/serviceProviderSearch</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Search Criteria&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Service Provider" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageCount</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="city" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">city</stringProp>
                    <stringProp name="Argument.value">Toronto</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProviderReferenceNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProviderReferenceNumber</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="businessName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">businessName</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sortby" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">sortby</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ifisSupplierNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ifisSupplierNumber</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sortDir" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">sortDir</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/serviceProvider/serviceProviderSearch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Monitoring Reports" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Monitoring Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Monitoring Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request:  List Monitoring Reports Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/monitoringReports</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Monitoring Reports&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Monitoring Reports" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageCount</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="siteRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">siteRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="monthDue" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">monthDue</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="typeCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">typeCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProvider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProvider</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="spRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">spRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fiscalYearCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fiscalYearCode</stringProp>
                    <stringProp name="Argument.value">2019-2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="statusCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">statusCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/monitoringReportsSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Monitoring Report" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/report/14086</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Monitoring Report Details&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Generate Pdf" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fileName</stringProp>
                    <stringProp name="Argument.value">monitorReport.pdf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="contentType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">contentType</stringProp>
                    <stringProp name="Argument.value">monitor</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageHtml" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageHtml</stringProp>
                    <stringProp name="Argument.value">&lt;div id=&quot;monitorReportHome&quot; class=&quot;monitorReportHome&quot;&gt;&#xd; 	&lt;div class=&quot;container-fluid&quot;&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;p id=&quot;submitMessage&quot; class=&quot;mrSubmit&quot;&gt;&lt;/p&gt;&#xd; 		&lt;/div&gt;&#xd; &#xd; 		&lt;!--  tabs --&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 		  	&lt;ul class=&quot;nav nav-pills spc_nav&quot; role=&quot;tablist&quot;&gt;&#xd; 		  		&#xd; 			  					&lt;li class=&quot;active&quot; role=&quot;tab&quot;&gt;&lt;a id=&quot;viewReport&quot; href=&quot;#&quot; data-mydata=&quot;14086&quot;&gt;QSAR-Q4&lt;/a&gt;&lt;/li&gt;&#xd; 						  	&#xd; 								&lt;li role=&quot;tab&quot;&gt;&lt;a id=&quot;viewReport-inactive&quot; href=&quot;#&quot; data-mydata=&quot;8781&quot;&gt;QSAR-Q1&lt;/a&gt;&lt;/li&gt;&#xd; 						  	&#xd; 								&lt;li role=&quot;tab&quot;&gt;&lt;a id=&quot;viewReport-inactive&quot; href=&quot;#&quot; data-mydata=&quot;10994&quot;&gt;QSAR-Q2&lt;/a&gt;&lt;/li&gt;&#xd; 						  	&#xd; 								&lt;li role=&quot;tab&quot;&gt;&lt;a id=&quot;viewReport-inactive&quot; href=&quot;#&quot; data-mydata=&quot;12893&quot;&gt;QSAR-Q3&lt;/a&gt;&lt;/li&gt;&#xd; 						  	&#xd; &#xd; 		  	&lt;/ul&gt;&#xd; 		&lt;/div&gt;&#xd; &#xd; 		&lt;!-- Monitoring Report Details Panel --&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div id=&quot;autoSaveMsg&quot; style=&quot;display: none;&quot; class=&quot;autosave&quot;&gt;AutoSave is completed.&lt;/div&gt;&#xd; 			&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;table class=&quot;table table-bordered table-condensed&quot;&gt;&#xd; 					&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;col-sm-2 col-md-2 table-header table-no-border&quot;&gt;Monitoring Report Details&amp;nbsp;-&amp;nbsp;Quarterly Status and Adjustment Report&lt;/td&gt;&#xd; 						&lt;td class=&quot;col-sm-10 col-md-10 table-header table-no-border table-header-collapse&quot;&gt;&#xd;                            &lt;div class=&quot;arrow-holder&quot;&gt;&#xd;                            	   &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;printPDF&quot; title=&quot;Create PDF&quot; onclick=&quot;javascript:printPdf(&apos;monitorReportHome&apos;, &apos;monitorReport.pdf&apos;, &apos;monitor&apos;);&quot; src=&quot;/spcp2/resources/img/printer.png&quot;&gt;&lt;/a&gt;&#xd;                                &amp;nbsp;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;reprotDetails&quot; id=&quot;spmonitorReportDetailsArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						   &lt;/div&gt;&#xd; &#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 					&lt;tr id=&quot;reprotDetails&quot; class=&quot;details collapse in&quot;&gt;&#xd; 						&lt;td colspan=&quot;2&quot;&gt;&#xd; 							&lt;table class=&quot;table-responsive table-no-border table-condensed&quot;&gt;&#xd; 								&lt;tbody&gt;&lt;tr&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Reporting Period&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&#xd; 										01/01/2019 - 31/03/2019&#xd; 									&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Due Date&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;23/04/2019&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Status&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;Confirmed&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; &#xd; 								&lt;tr&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Site&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&#xd; 										&lt;a class=&quot;spc_link&quot; href=&quot;/spcp2/protected/sds/4691035573580726272&quot;&gt;3000C&lt;/a&gt;&#xd; 									&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Service Provider&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&#xd; 										&lt;a class=&quot;spc_link&quot; href=&quot;/spcp2/protected/serviceProvider/661721281967685632&quot;&gt;VPI INC&lt;/a&gt;&#xd; 									&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;PO Number&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&#xd; 										&lt;a class=&quot;spc_link&quot; href=&quot;/spcp2/protected/agreements/1359601&quot;&gt;32594&lt;/a&gt;&#xd; 									&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; &#xd; 								&lt;tr&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Program&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;Employment Service&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;TP Accountability Office&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;Toronto East Office&lt;/td&gt;&#xd; &#xd; 									&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; &#xd; 								&lt;tr&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Employment Training Consultant&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;Shradha Pathak&lt;/td&gt;&#xd; &#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;&lt;div class=&quot;data-label col-title&quot;&gt;Consultant Email&lt;/div&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;vtop col-sm-2 col-md-2&quot;&gt;1465493_UAT_1_Shradha.Pathak@ontario.ca&lt;/td&gt;&#xd; &#xd; 									&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&lt;/tbody&gt;&lt;/table&gt;&#xd; 							&#xd; &#xd; &#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; &#xd; &#xd; 		&lt;!-- regional risk assessment rating --&gt;&#xd; 			&lt;div id=&quot;riskAssessment&quot;&gt;&#xd; 				&lt;!-- regional risk assessment rating --&gt;&#xd; &lt;div class=&quot;row&quot;&gt;&#xd; 	&lt;div class=&quot;panel panel-default&quot; role=&quot;tablist&quot;&gt;&#xd; 	&lt;table class=&quot;table table-bordered table-condensed&quot; role=&quot;tab&quot;&gt;&#xd; 		&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 			&lt;td class=&quot;table-header tableTitle spc-panel-title&quot;&gt;&lt;h2 title=&quot;Regional Risk Assessment Rating&quot;&gt;Regional Risk Assessment Rating&lt;/h2&gt;&lt;/td&gt;&#xd; 			&lt;td class=&quot;table-header spc-panel-title&quot;&gt;&#xd; 				 &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 				   &lt;label tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;riskAssessmentRating&quot; id=&quot;search-contentArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/label&gt;&#xd; 			     &lt;/div&gt;&#xd; 			&lt;/td&gt;&#xd; 		&lt;/tr&gt;&#xd; 		&lt;tr id=&quot;riskAssessmentRating&quot; class=&quot;details collapse in&quot;&gt;&#xd; 			&lt;td colspan=&quot;2&quot;&gt;&#xd; 				&lt;table class=&quot;table-responsive table-condensed tablesorter&quot;&gt;&#xd; 					&lt;thead class=&quot;table-header spc_header&quot;&gt;&#xd; 						&lt;tr&gt;&#xd; 							&lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Region&lt;/a&gt;&lt;/th&gt;&#xd; 							&lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Rating&lt;/a&gt;&lt;/th&gt;&#xd; 							&lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Status&lt;/a&gt;&lt;/th&gt;&#xd; 							&lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Last Update Date&lt;/a&gt;&lt;/th&gt;&#xd; 							&lt;th class=&quot;col-xs-4 col-sm-4 col-md-4 col-title&quot;&gt;&#xd; 								&lt;a class=&quot;spc_link spc_sortable_header&quot; href=&quot;#&quot;&gt;Reason&lt;/a&gt;&lt;/th&gt;&#xd; 						&lt;/tr&gt;&#xd; 					&lt;/thead&gt;&#xd; 					&#xd; 						&lt;tbody&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  even&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/661721281967685632/102&quot;&gt;Central West Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  odd&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/661721281967685632/99&quot;&gt;Central East Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  even&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/661721281967685632/12&quot;&gt;Eastern Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  odd&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/661721281967685632/19&quot;&gt;Northern Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 								&lt;tr class=&quot;  even&quot;&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;&#xd; 										&#xd; 												&lt;a href=&quot;/spcp2/protected/serviceProvider/riskRatingDetails/308&quot;&gt;Western Region&lt;/a&gt;	&#xd; 											&#xd; 									&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Low&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Approved&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;07/12/2018&lt;/td&gt;&#xd; 									&lt;td class=&quot;col-xs-4 col-sm-4 col-md-4&quot;&gt;Migration&lt;/td&gt;&#xd; 								&lt;/tr&gt;&#xd; 							&#xd; 						&lt;/tbody&gt;&#xd; 						&#xd; 				&lt;/table&gt;							&#xd; 			&lt;/td&gt;&#xd; 		&lt;/tr&gt;&#xd; 	&lt;/tbody&gt;&lt;/table&gt;&#xd; 	&lt;/div&gt;&#xd; &lt;/div&gt;&#xd; 			&lt;/div&gt;&#xd; 			 &lt;!-- Monitoring Level Details --&gt;&lt;!-- template pages --&gt;&#xd; 			&lt;div id=&quot;monitorTemplate&quot;&gt;&#xd; 				&lt;!-- form --&gt;&#xd; &lt;div class=&quot;template&quot;&gt;&#xd; 	&lt;div class=&quot;container-fluid&quot;&gt;&#xd; 		&lt;!-- page content --&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div id=&quot;monitorReportDetails&quot;&gt;&#xd; 			&lt;form id=&quot;templateForm&quot; role=&quot;form&quot; class=&quot;form form-horizontal areyousure&quot; action=&quot;saveBusinessPlan.do&quot; method=&quot;post&quot; autocomplete=&quot;off&quot;&gt;&lt;input id=&quot;monitorReportDetail.id&quot; name=&quot;monitorReportDetail.id&quot; type=&quot;hidden&quot; value=&quot;14086&quot;&gt;&lt;!-- Defect Fix 12783 Start --&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/bootstrap.min.ie.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/spc.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery-ui.min.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.mask.min.js&quot;&gt;&lt;/script&gt;        &#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.blockUI.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.idletimeout.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.idletimer.js&quot;&gt;&lt;/script&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/jquery.are-you-sure.js&quot;&gt;&lt;/script&gt;     &#xd; &lt;script src=&quot;/spcp2/resources/js/Chart.bundle.js&quot;&gt;&lt;/script&gt;&#xd; &lt;!-- Defect Fix 12783 End --&gt;&#xd; &lt;script src=&quot;/spcp2/resources/js/characterCount.js&quot;&gt;&lt;/script&gt;&#xd; &lt;!-- &#xd; .monthYearInput .ui-datepicker-calendar {&#xd;     display: none !important;&#xd;     }&#xd; --&gt;&#xd; &#xd; &lt;style&gt;&#xd; .ui-datepicker select.ui-datepicker-month, .ui-datepicker select.ui-datepicker-year&#xd; 	{&#xd; 	color: gray !important;&#xd; }&#xd; &#xd; p {&#xd; 	padding-right: 30px;&#xd; }&#xd; &#xd; .hideTextArea {&#xd; 	display: none;&#xd; }&#xd; &#xd; .hide {&#xd; 	display: none&#xd; }&#xd; ;&#xd; &lt;/style&gt;&#xd; &#xd; &lt;script&gt;&#xd;     function initMonthYearDatepicker(dateCtrlSelector){&#xd; 		$(dateCtrlSelector).datepicker({&#xd; 		    changeMonth: true,&#xd;     		changeYear: true,&#xd; 			showButtonPanel: true,&#xd; 			dateFormat : &apos;mm/yy&apos;,&#xd; 			showOn : &quot;both&quot;,&#xd; 			buttonImage : &quot;/spcp2/resources/img/calendar.png&quot;,&#xd; 			buttonImageOnly : true,&#xd; 		    onClose: function(dateText, inst) { &#xd; 		        var month = $(&quot;#ui-datepicker-div .ui-datepicker-month :selected&quot;).val();&#xd; 		        var year = $(&quot;#ui-datepicker-div .ui-datepicker-year :selected&quot;).val();&#xd; 		        $(this).datepicker(&apos;setDate&apos;, new Date(year, month, 1));&#xd; 		        //$(&quot;.ui-datepicker-calendar&quot;).show();&#xd; 		    },&#xd; 	        beforeShow : function(input, inst) {&#xd; 	            if ((datestr = $(this).val()).length &gt; 0) {&#xd; 	                actDate = datestr.split(&apos;/&apos;);&#xd; 	                month = actDate[0] - 1;&#xd; 	                year = actDate[1];&#xd; 	                $(this).datepicker(&apos;option&apos;, &apos;defaultDate&apos;, new Date(year, month));&#xd; 	                $(this).datepicker(&apos;setDate&apos;, new Date(year, month));&#xd; 	            }&#xd; 	        }&#xd; 		});&#xd; 		&#xd;     }&#xd; &#xd; 	$(document).ready(function() {	&#xd; 		initMonthYearDatepicker(&quot;.monthYearInput&quot;);&#xd;     	$(&apos;.monthYearInput&apos;).mask(&quot;99/9999&quot;, { placeholder: &quot;mm/yyyy&quot; });&#xd;     	&#xd;     	if(&quot;true&quot; == &quot;true&quot;) {&#xd;     		$(&apos;.datepicker&apos;).datepicker(&apos;disable&apos;);&#xd;     		$(&apos;.monthYearInput&apos;).datepicker(&apos;disable&apos;);&#xd;     	}&#xd;     	&#xd; 	});&#xd; &#xd; &lt;/script&gt;&#xd; &#xd; 	&lt;input id=&quot;id&quot; name=&quot;monitorTemplate.template.id&quot; type=&quot;hidden&quot; value=&quot;190&quot;&gt;&lt;input id=&quot;monitorTemplate.disabled&quot; name=&quot;monitorTemplate.disabled&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.templateId&quot; name=&quot;monitorTemplate.templateRequest.templateId&quot; value=&quot;190&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.templatePageId&quot; name=&quot;monitorTemplate.templateRequest.templatePageId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.visibilityFor&quot; name=&quot;monitorTemplate.templateRequest.visibilityFor&quot; value=&quot;Ministry&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.languageSel&quot; name=&quot;monitorTemplate.templateRequest.languageSel&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.programCode&quot; name=&quot;monitorTemplate.templateRequest.programCode&quot; value=&quot;ES&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.businessPlanId&quot; name=&quot;monitorTemplate.templateRequest.businessPlanId&quot; value=&quot;1316161&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.templateRequest.subAssociatedEntityId&quot; name=&quot;monitorTemplate.templateRequest.subAssociatedEntityId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;monitorTemplate.businessPlan.busPlanId&quot; name=&quot;monitorTemplate.businessPlan.busPlanId&quot; value=&quot;1316161&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;pageType&quot; name=&quot;monitorTemplate.template.currentPage.pageType&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;requestTemplatePageId&quot; name=&quot;monitorTemplate.templateRequest.requestTemplatePageId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;!-- for monitoring report only --&gt;&lt;input id=&quot;firstReportId&quot; name=&quot;monitorTemplate.firstReportId&quot; type=&quot;hidden&quot; value=&quot;14086&quot;&gt;&lt;input id=&quot;associatedEntityId&quot; name=&quot;monitorTemplate.associatedEntityId&quot; type=&quot;hidden&quot; value=&quot;14086&quot;&gt;&lt;input id=&quot;subAssociatedEntityId&quot; name=&quot;monitorTemplate.subAssociatedEntityId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;monitorTemplate.template.pages0.id&quot; name=&quot;monitorTemplate.template.pages[0].id&quot; type=&quot;hidden&quot; value=&quot;1133&quot;&gt;&lt;input id=&quot;monitorTemplate.template.pages0.label&quot; name=&quot;monitorTemplate.template.pages[0].label&quot; type=&quot;hidden&quot; value=&quot;QSAR&quot;&gt;&lt;input id=&quot;monitorTemplate.template.pages0.active&quot; name=&quot;monitorTemplate.template.pages[0].active&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;table class=&quot;table-responsive table table-bordered table-condensed&quot;&gt;&#xd; 					&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;table-header tableTitle spc-panel-title&quot;&gt;&lt;h2 title=&quot;Instruction&quot;&gt;Instruction&lt;/h2&gt;&lt;/td&gt;&#xd; 						&lt;td class=&quot;table-header table-header-collapse arrow&quot;&gt;&#xd; 							 &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;section1134&quot; id=&quot;shortcutsArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						     &lt;/div&gt;&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 					&#xd; 					&lt;tr id=&quot;section1134&quot; class=&quot;details collapse in&quot;&gt;&#xd; 						&lt;td colspan=&quot;2&quot; class=&quot;table-responsive&quot;&gt;&#xd; 							&#xd; 								&lt;table class=&quot;table-no-border table-condensed table-responsive&quot;&gt;&#xd; 								&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].id&quot; type=&quot;hidden&quot; value=&quot;3133&quot;&gt;&lt;input id=&quot;answerId-3133&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Purpose&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;The Quarterly Status and Adjustment Report (QSAR) provides a consistent approach for reporting against performance commitments and general program management for all funded service delivery sites. The intended outcome is to support service providers&amp;amp;amp;rsquo; organizational capacity as well as to ensure the continuous improvement of program delivery.&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;QSAR reporting periods and due dates for 2018-19 are:&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p style=&amp;amp;#034;padding-left: 30px;&amp;amp;#034;&amp;amp;gt;Reporting period: April 1, 2018 to June 30, 2018&amp;amp;lt;br /&amp;amp;gt;Due Date: August 16, 2018&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p style=&amp;amp;#034;padding-left: 30px;&amp;amp;#034;&amp;amp;gt;Reporting period: July 1, 2018 to September 30, 2018&amp;amp;lt;br /&amp;amp;gt;Due Date: October 22, 2018&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p style=&amp;amp;#034;padding-left: 30px;&amp;amp;#034;&amp;amp;gt;Reporting period: October 1, 2018 to December 31, 2018 &amp;amp;lt;br /&amp;amp;gt;Due Date: January 21, 2019&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p style=&amp;amp;#034;padding-left: 30px;&amp;amp;#034;&amp;amp;gt;Reporting period: January 1, 2019 to March 31, 2019&amp;amp;lt;br /&amp;amp;gt;Due Date: April 23, 2019&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections0.elements0.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[0].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tbody&gt;&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Purpose&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;The Quarterly Status and Adjustment Report (QSAR) provides a consistent approach for reporting against performance commitments and general program management for all funded service delivery sites. The intended outcome is to support service providers’ organizational capacity as well as to ensure the continuous improvement of program delivery.&lt;/p&gt;&#xd; &lt;p&gt;QSAR reporting periods and due dates for 2018-19 are:&lt;/p&gt;&#xd; &lt;p style=&quot;padding-left: 30px;&quot;&gt;Reporting period: April 1, 2018 to June 30, 2018&lt;br&gt;Due Date: August 16, 2018&lt;/p&gt;&#xd; &lt;p style=&quot;padding-left: 30px;&quot;&gt;Reporting period: July 1, 2018 to September 30, 2018&lt;br&gt;Due Date: October 22, 2018&lt;/p&gt;&#xd; &lt;p style=&quot;padding-left: 30px;&quot;&gt;Reporting period: October 1, 2018 to December 31, 2018 &lt;br&gt;Due Date: January 21, 2019&lt;/p&gt;&#xd; &lt;p style=&quot;padding-left: 30px;&quot;&gt;Reporting period: January 1, 2019 to March 31, 2019&lt;br&gt;Due Date: April 23, 2019&lt;/p&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].id&quot; type=&quot;hidden&quot; value=&quot;3132&quot;&gt;&lt;input id=&quot;answerId-3132&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Process&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;Each funded site is required to:&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;ul&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;submit the QSAR no later than the due date;&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;complete the QSAR questions by referencing available activity and financial reports, each site&amp;amp;amp;rsquo;s Schedules &amp;amp;amp;ldquo;D&amp;amp;amp;rdquo; and &amp;amp;amp;ldquo;G&amp;amp;amp;rdquo;, and the approved business plan for the current agreement;&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;respond to all mandatory questions, and provide comments, if required; and&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;complete one QSAR for each funded site.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;/ul&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;The Province will:&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;ul&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;provide written feedback no later than &amp;amp;lt;strong&amp;amp;gt;fifteen&amp;amp;lt;/strong&amp;amp;gt; (15) business days after the QSAR is submitted to the ministry; and&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;comment on strategies and/or actions that are reported on by the service provider in each QSAR.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;/ul&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections0.elements1.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[1].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;Each funded site is required to:&lt;/p&gt;&#xd; &lt;ul&gt;&#xd; &lt;li&gt;submit the QSAR no later than the due date;&lt;/li&gt;&#xd; &lt;li&gt;complete the QSAR questions by referencing available activity and financial reports, each site’s Schedules “D” and “G”, and the approved business plan for the current agreement;&lt;/li&gt;&#xd; &lt;li&gt;respond to all mandatory questions, and provide comments, if required; and&lt;/li&gt;&#xd; &lt;li&gt;complete one QSAR for each funded site.&lt;/li&gt;&#xd; &lt;/ul&gt;&#xd; &lt;p&gt;&lt;strong&gt;The Province will:&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;ul&gt;&#xd; &lt;li&gt;provide written feedback no later than &lt;strong&gt;fifteen&lt;/strong&gt; (15) business days after the QSAR is submitted to the ministry; and&lt;/li&gt;&#xd; &lt;li&gt;comment on strategies and/or actions that are reported on by the service provider in each QSAR.&lt;/li&gt;&#xd; &lt;/ul&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].id&quot; type=&quot;hidden&quot; value=&quot;3131&quot;&gt;&lt;input id=&quot;answerId-3131&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Please note&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;ul&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;Day 1 is considered the day that the QSARs are released in EOIS-SP Connect.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;All historically reported information will be available in EOIS-SP Connect during future quarters of the same fiscal year.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;Service providers are expected to submit the requested information for the current reporting period.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;Responses received after the due date will be noted as such in EOIS-SP Connect.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;li&amp;amp;gt;The QSAR is not an audit tool. As indicated in Schedule &amp;amp;amp;ldquo;H&amp;amp;amp;rdquo; of the Agreement, only the Estimate of Expenditure Reports (EERs) will be used to make in-year financial adjustments.&amp;amp;lt;/li&amp;amp;gt;&#xd; &amp;amp;lt;/ul&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections0.elements2.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[0].elements[2].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;ul&gt;&#xd; &lt;li&gt;Day 1 is considered the day that the QSARs are released in EOIS-SP Connect.&lt;/li&gt;&#xd; &lt;li&gt;All historically reported information will be available in EOIS-SP Connect during future quarters of the same fiscal year.&lt;/li&gt;&#xd; &lt;li&gt;Service providers are expected to submit the requested information for the current reporting period.&lt;/li&gt;&#xd; &lt;li&gt;Responses received after the due date will be noted as such in EOIS-SP Connect.&lt;/li&gt;&#xd; &lt;li&gt;The QSAR is not an audit tool. As indicated in Schedule “H” of the Agreement, only the Estimate of Expenditure Reports (EERs) will be used to make in-year financial adjustments.&lt;/li&gt;&#xd; &lt;/ul&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&#xd; 								&lt;/tbody&gt;&lt;/table&gt;&#xd; 							&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;						&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; 	&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;table class=&quot;table-responsive table table-bordered table-condensed&quot;&gt;&#xd; 					&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;table-header tableTitle spc-panel-title&quot;&gt;&lt;h2 title=&quot;Questions&quot;&gt;Questions&lt;/h2&gt;&lt;/td&gt;&#xd; 						&lt;td class=&quot;table-header table-header-collapse arrow&quot;&gt;&#xd; 							 &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;section1135&quot; id=&quot;shortcutsArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						     &lt;/div&gt;&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 					&#xd; 					&lt;tr id=&quot;section1135&quot; class=&quot;details collapse in&quot;&gt;&#xd; 						&lt;td colspan=&quot;2&quot; class=&quot;table-responsive&quot;&gt;&#xd; 							&#xd; 								&lt;table class=&quot;table-no-border table-condensed table-responsive&quot;&gt;&#xd; 								&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].id&quot; type=&quot;hidden&quot; value=&quot;3136&quot;&gt;&lt;input id=&quot;answerId-3136&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384398&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND02&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;1. &amp;amp;lt;/strong&amp;amp;gt;Please share successes and/or challenges that your organization has faced in meeting its Schedule &amp;amp;#034;G&amp;amp;#034; Performance Commitments, and/or any of the strategies committed to in your 2018-19 business plan with the Province. Be sure to include the specific Performance Commitments and/or strategies, and the actions that you will or have already undertaken to achieve and sustain these commitments. *&amp;amp;amp;nbsp;*&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements0.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tbody&gt;&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;1. Performance Commitments&quot;&gt;&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt;Please share successes and/or challenges that your organization has faced in meeting its Schedule &quot;G&quot; Performance Commitments, and/or any of the strategies committed to in your 2018-19 business plan with the Province. Be sure to include the specific Performance Commitments and/or strategies, and the actions that you will or have already undertaken to achieve and sustain these commitments. *&amp;nbsp;*&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3136&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[0].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;This SDS successfully achieved all the Schedule “G” Performance Commitments for both ES and YJL. This SDS has attained 100% of assisted services target by accepting walk-in clients and referrals from community partners such as Toronto Community Housing as well as off-site intake. In this way, providing services to clients that are furthest removed from employment. This SDS continues to actively participate in various local committees such as the Student Leadership and Youth (SLYE), and service provider E-Team and has joined Meaningful Employment and Economic Opportunities Action group this quarter.  This presence allows the SDS to stay current and respond to emerging labour market trends, employment opportunities and problem-solve solutions to shared challenges.  Partnering with Frontier College to provide clients and residents with basic computer classes on-site.  This SDS hosted information sessions for applying to University of Toronto jobs, Access Community Capital Fund and held a company-wide Career in the Trades week to provide emerging trends in the labour market. This SDS has marketed and promoted Employment Ontario services at events such as Seneca College and Pathways to Education information sessions this quarter.  As well, this SDS has joined with East Scarborough Storefront to partner with LIUNA to assist clients to gain the technical and soft skills necessary to access the skilled trades.  This SDS attended Cannexus 2019 with over 1500 attendees to learn and share best practices in the career counselling and employment sector to assist clients in a more meaningful way. This SDS continues to provide monthly itinerant services to Service Canada and Malvern TESS with whom we also share our monthly newsletter outlining workshops and EO services and programs. This SDS continues to outreach and source new community partner opportunities that will assist and support clients with education and employment goals such as opening our facilities so that one our employers can have their new staff trained on First Aid/CPR and Mask fitting monthly. This SDS participated as a member of the SSIP committee for the 2019 Neighborhood Grant review panel, which demonstrates our commitment and ongoing support of the residents in the community.  These activities allow this SDS to continue to achieve its service coordination target.  We continue to maintain a good relationship with all of our successful YJL clients and continue to encourage them to refer their friends who require job search assistance.  The EYTI program is at 35.5% of the YTD target and had a gradual uptake with employers requesting information on program criteria for both employers and clients.&lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3136&quot;&gt;302&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].id&quot; type=&quot;hidden&quot; value=&quot;3135&quot;&gt;&lt;input id=&quot;answerId-3135&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry View Only Note&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;This question is mandatory and must include an update from all service providers. The focus should highlight successes and/or challenges, as applicable to the site in question.&amp;amp;lt;br /&amp;amp;gt;&amp;amp;lt;br /&amp;amp;gt;Ministry staff should further validate the service provider&amp;amp;amp;rsquo;s responses by reviewing business plan and agreement commitments, as well as current activity reports, in order to help surface any potential areas of concern as early as possible.&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;&amp;amp;amp;nbsp;&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements1.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[1].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Ministry View Only Note&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;This question is mandatory and must include an update from all service providers. The focus should highlight successes and/or challenges, as applicable to the site in question.&lt;br&gt;&lt;br&gt;Ministry staff should further validate the service provider’s responses by reviewing business plan and agreement commitments, as well as current activity reports, in order to help surface any potential areas of concern as early as possible.&lt;/p&gt;&#xd; &lt;p&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].inputType&quot; type=&quot;hidden&quot; value=&quot;IT12&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].id&quot; type=&quot;hidden&quot; value=&quot;3140&quot;&gt;&lt;input id=&quot;answerId-3140&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;378038&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;2.&amp;amp;amp;nbsp;&amp;amp;lt;/strong&amp;amp;gt;Innovation takes original, different, out-of-the-box, and/or creative ideas and turns them into new approaches in order to add value, improve &amp;amp;lt;strong&amp;amp;gt;client experience and/or have a positive community impact&amp;amp;lt;/strong&amp;amp;gt;. Has your site taken a new innovative approach to improve client experience and/or community impact, which goes beyond standard program guideline expectations? For example, applied best practices to processes in order to improve service delivery.&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Note:&amp;amp;lt;/strong&amp;amp;gt; this question is &amp;amp;lt;strong&amp;amp;gt;optional&amp;amp;lt;/strong&amp;amp;gt; and will &amp;amp;lt;strong&amp;amp;gt;not&amp;amp;lt;/strong&amp;amp;gt; be used to evaluate performance or determine future funding arrangements. Responses may be shared with the broader EO Network to support continuous improvement and sharing of best practices, please do not include examples which have already been reported on, either during the current or previous QSAR reporting period(s).&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements2.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Innovation&quot;&gt;&lt;p&gt;&lt;strong&gt;2.&amp;nbsp;&lt;/strong&gt;Innovation takes original, different, out-of-the-box, and/or creative ideas and turns them into new approaches in order to add value, improve &lt;strong&gt;client experience and/or have a positive community impact&lt;/strong&gt;. Has your site taken a new innovative approach to improve client experience and/or community impact, which goes beyond standard program guideline expectations? For example, applied best practices to processes in order to improve service delivery.&lt;/p&gt;&#xd; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this question is &lt;strong&gt;optional&lt;/strong&gt; and will &lt;strong&gt;not&lt;/strong&gt; be used to evaluate performance or determine future funding arrangements. Responses may be shared with the broader EO Network to support continuous improvement and sharing of best practices, please do not include examples which have already been reported on, either during the current or previous QSAR reporting period(s).&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements2.elementAnswers0.answer1&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].elementAnswers[0].answer&quot; title=&quot;Yes&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;1&quot; checked=&quot;checked&quot;&gt;&amp;nbsp;&amp;nbsp;Yes&amp;nbsp;&amp;nbsp;&#xd; 													    		&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements2.elementAnswers0.answer2&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[2].elementAnswers[0].answer&quot; title=&quot;No&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;0&quot;&gt;&amp;nbsp;&amp;nbsp;No&amp;nbsp;&amp;nbsp;&#xd; 													    		&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;3140&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].id&quot; type=&quot;hidden&quot; value=&quot;3148&quot;&gt;&lt;input id=&quot;answerId-3148&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384399&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND03&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;If yes, please take the opportunity to highlight the new innovative approaches your organization has undertaken, including why you have chosen to share this particular example.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements3.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;If yes, please take the opportunity to highlight the new innovative approaches your organization has undertaken.&quot;&gt;&lt;p&gt;If yes, please take the opportunity to highlight the new innovative approaches your organization has undertaken, including why you have chosen to share this particular example.&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3148&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[3].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;This SDS fosters community partnerships by providing customized on-site workshops geared to specific audiences as well as online Learning Centre with various resources. This SDS has hosted guest speakers on topics in response to emerging trends in the labour market such as Careers in the Trades and Access Community Capital Fund.&#xd; &#xd; This site&apos;s staff makes touchpoint calls to clients at 1 month and 2 month of exit, to assist with job search resources and opportunities to maintain momentum and encouragement during the job search process.&#xd; &lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3148&quot;&gt;2457&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;3140&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].id&quot; type=&quot;hidden&quot; value=&quot;3144&quot;&gt;&lt;input id=&quot;answerId-3144&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384400&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND03&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;Please identify how successful this new innovative practice has been in improving overall client experience and/or having a positive community impact, and describe some of the benefits that this new practice has had.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements4.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Innovation&quot;&gt;&lt;p&gt;Please identify how successful this new innovative practice has been in improving overall client experience and/or having a positive community impact, and describe some of the benefits that this new practice has had.&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3144&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[4].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;This SDS has had client’s experience increased and heightened awareness and willingness to provide feedback on ongoing job search results and attainment of employment and training provider.  Client participation engagement and retention has increased by 25% and unknown results have decreased by 15% since the end of Q3.&lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3144&quot;&gt;2680&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].id&quot; type=&quot;hidden&quot; value=&quot;3134&quot;&gt;&lt;input id=&quot;answerId-3134&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry View Only Note&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;This question is optional, a roll-up report of best practices and innovations that are shared here will be compiled and distributed both within the Ministry and to service providers at a later date. There is &amp;amp;lt;strong&amp;amp;gt;no need for action at the local office level&amp;amp;lt;/strong&amp;amp;gt; in response to this question.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements5.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[5].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Ministry View Only Note&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;This question is optional, a roll-up report of best practices and innovations that are shared here will be compiled and distributed both within the Ministry and to service providers at a later date. There is &lt;strong&gt;no need for action at the local office level&lt;/strong&gt; in response to this question.&lt;/p&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].inputType&quot; type=&quot;hidden&quot; value=&quot;IT12&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].id&quot; type=&quot;hidden&quot; value=&quot;3143&quot;&gt;&lt;input id=&quot;answerId-3143&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384401&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND02&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;3. &amp;amp;lt;/strong&amp;amp;gt;Has your organization had difficulty in achieving your Strategic Priority targets for OW and PWD client participation as committed to in your Business Plan &amp;amp;lt;strong&amp;amp;gt;(ES only)&amp;amp;lt;/strong&amp;amp;gt;?&amp;amp;amp;nbsp;*&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements6.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;3- Has your organization had difficulty in achieving your Strategic Priority targets for OW and PWD client participation as committed to in your Business Plan?&quot;&gt;&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt;Has your organization had difficulty in achieving your Strategic Priority targets for OW and PWD client participation as committed to in your Business Plan &lt;strong&gt;(ES only)&lt;/strong&gt;?&amp;nbsp;*&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements6.elementAnswers0.answer1&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].elementAnswers[0].answer&quot; title=&quot;Yes&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;1&quot; checked=&quot;checked&quot;&gt;&amp;nbsp;&amp;nbsp;Yes&amp;nbsp;&amp;nbsp;&#xd; 													    		&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements6.elementAnswers0.answer2&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[6].elementAnswers[0].answer&quot; title=&quot;No&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;0&quot;&gt;&amp;nbsp;&amp;nbsp;No&amp;nbsp;&amp;nbsp;&#xd; 													    		&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;3143&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].id&quot; type=&quot;hidden&quot; value=&quot;3151&quot;&gt;&lt;input id=&quot;answerId-3151&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;384402&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND03&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;If yes, what strategies and action(s) do you have in place to achieve your targets by the agreement end date?&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements7.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].editable&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;If yes, what strategies and action(s) do you have in place to achieve your targets by agreement end date?  &quot;&gt;&lt;p&gt;If yes, what strategies and action(s) do you have in place to achieve your targets by the agreement end date?&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3151&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[7].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;This SDS is has achieved 68% OW YTD target and over 100% of PWD Strategic Priority targets.  This SDS provides monthly itinerant services to Malvern TESS, Catholic Crosscultural Services and Agincourt Community Services (ACSA) - Chester Le. As a few TESS offices in Scarborough are merging and realigning, this SDS continues to stay in contact with TESS, demonstrating our willingness to provide itinerant services to additional TESS offices in Scarborough.  Understanding that TESS is currently reviewing services with respect to the most recent Auditor General report, this SDS continues to seek new partnerships and opportunities to assist Ontario Works clients such as Centre for Immigrant and Community Services, Toronto Integrated Service Centre (CICS) and Toronto Community Housing residents.&lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3151&quot;&gt;2201&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].inputType&quot; type=&quot;hidden&quot; value=&quot;IT01&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].id&quot; type=&quot;hidden&quot; value=&quot;3137&quot;&gt;&lt;input id=&quot;answerId-3137&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry View Only Note&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;Ministry staff should validate the service provider&amp;amp;amp;rsquo;s responses by reviewing activity reports for the current reporting period, in order to help surface any potential areas of concern as early as possible.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections1.elements8.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[1].elements[8].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;p&gt;&lt;strong&gt;Ministry View Only Note&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;Ministry staff should validate the service provider’s responses by reviewing activity reports for the current reporting period, in order to help surface any potential areas of concern as early as possible.&lt;/p&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&#xd; 								&lt;/tbody&gt;&lt;/table&gt;&#xd; 							&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;						&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; 	&#xd; 		&lt;div class=&quot;row&quot;&gt;&#xd; 			&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;table class=&quot;table-responsive table table-bordered table-condensed&quot;&gt;&#xd; 					&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;table-header tableTitle spc-panel-title&quot;&gt;&lt;h2 title=&quot;Ministry Feedback&quot;&gt;Ministry Feedback&lt;/h2&gt;&lt;/td&gt;&#xd; 						&lt;td class=&quot;table-header table-header-collapse arrow&quot;&gt;&#xd; 							 &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;section1136&quot; id=&quot;shortcutsArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						     &lt;/div&gt;&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 					&#xd; 					&lt;tr id=&quot;section1136&quot; class=&quot;details collapse in&quot;&gt;&#xd; 						&lt;td colspan=&quot;2&quot; class=&quot;table-responsive&quot;&gt;&#xd; 							&#xd; 								&lt;table class=&quot;table-no-border table-condensed table-responsive&quot;&gt;&#xd; 								&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].id&quot; type=&quot;hidden&quot; value=&quot;3152&quot;&gt;&lt;input id=&quot;answerId-3152&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;387962&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND01&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry Feedback&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;br /&amp;amp;gt;&amp;amp;lt;br /&amp;amp;gt;Please find feedback from your ministry consultant below.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements0.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tbody&gt;&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Ministry Feedback&quot;&gt;&lt;p&gt;&lt;strong&gt;Ministry Feedback&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Please find feedback from your ministry consultant below.&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3152&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[0].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;Thank you for your timely submission of your QSAR for Q4.  Congratulations on meeting or exceeding targets in all the core measures: Customer Service (target:93%- actual:99%), Effectiveness (target:69%- actual:70%), Suitability (target:32%- actual:36%).  Outstanding dedication and performance has been noted by the Ministry. In addition to this, targets were surpassed regarding the performance commitments in assisted intake service and workshop activities/information sessions.   It is noted that you didn’t meet your client targets for OW but have surpassed your target for PWD as outlined in the business plan. OW strategic priority is at 68% (115 OW clients) and PWD is at 158% (103 PWD clients) for this fiscal year.  &#xd; The Service Quality Standard (SQS) is above target (target:5.63%- actual:5.83%). The ministry acknowledges your efforts and perseverance to assist these challenging client groups.  &#xd; &#xd; Regarding YJL for Q4, the Ministry congratulates you on your dedication and hard work regarding Customer Satisfaction which is above target at 102%.  In addition to this, you have surpassed the target for intake in resource and information sessions/workshops at 661%.  Job Matching is above target at 103% for Q4.  &#xd; Thank you for the work you do in the community, and I look forward to a successful incoming fiscal year 2019-20.&#xd; &#xd; &#xd; &lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3152&quot;&gt;1653&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].inputType&quot; type=&quot;hidden&quot; value=&quot;IT12&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].id&quot; type=&quot;hidden&quot; value=&quot;3552&quot;&gt;&lt;input id=&quot;answerId-3552&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;389236&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND02&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;&amp;amp;lt;strong&amp;amp;gt;Ministry View Only Question&amp;amp;lt;/strong&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;A follow-up can be any activity from a call or an email to the service provider, to scheduling an on-site visit, which leads to obtaining more detailed information to address concerns that are raised by any of the responses provided above. If any answers above are incomplete, you have the option to &amp;amp;amp;ldquo;push back&amp;amp;amp;rdquo; this report to the provider, however if you feel that the answers are complete, but additional conversation or oversight of some form is warranted, identify that as a need to follow-up.&amp;amp;lt;/p&amp;amp;gt;&#xd; &amp;amp;lt;p&amp;amp;gt;Having reviewed all of the information provided in this template, is follow-up with this site required?&amp;amp;amp;nbsp;*&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements1.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Follow-up required?&quot;&gt;&lt;p&gt;&lt;strong&gt;Ministry View Only Question&lt;/strong&gt;&lt;/p&gt;&#xd; &lt;p&gt;A follow-up can be any activity from a call or an email to the service provider, to scheduling an on-site visit, which leads to obtaining more detailed information to address concerns that are raised by any of the responses provided above. If any answers above are incomplete, you have the option to “push back” this report to the provider, however if you feel that the answers are complete, but additional conversation or oversight of some form is warranted, identify that as a need to follow-up.&lt;/p&gt;&#xd; &lt;p&gt;Having reviewed all of the information provided in this template, is follow-up with this site required?&amp;nbsp;*&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements1.elementAnswers0.answer1&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].elementAnswers[0].answer&quot; title=&quot;Yes&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;1&quot;&gt;&amp;nbsp;&amp;nbsp;Yes&amp;nbsp;&amp;nbsp;&#xd; 													    		&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements1.elementAnswers0.answer2&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[1].elementAnswers[0].answer&quot; title=&quot;No&quot; style=&quot;vertical-align:bottom&quot; disabled=&quot;disabled&quot; type=&quot;radio&quot; value=&quot;0&quot; checked=&quot;checked&quot;&gt;&amp;nbsp;&amp;nbsp;No&amp;nbsp;&amp;nbsp;&#xd; 													    		&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&lt;input id=&quot;inputType&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].inputType&quot; type=&quot;hidden&quot; value=&quot;IT14&quot;&gt;&lt;input id=&quot;conditionalElementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].conditionalElementId&quot; type=&quot;hidden&quot; value=&quot;3552&quot;&gt;&lt;input id=&quot;conditionalValue&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].conditionalValue&quot; type=&quot;hidden&quot; value=&quot;1&quot;&gt;&lt;input id=&quot;elementId&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].id&quot; type=&quot;hidden&quot; value=&quot;3553&quot;&gt;&lt;input id=&quot;answerId-3553&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].elementAnswers[0].answerId&quot; type=&quot;hidden&quot; value=&quot;&quot;&gt;&lt;input id=&quot;hasValidationError&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].hasValidationError&quot; type=&quot;hidden&quot; value=&quot;false&quot;&gt;&lt;input id=&quot;mandatoryCode&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].mandatoryCode&quot; type=&quot;hidden&quot; value=&quot;MAND03&quot;&gt;&lt;input id=&quot;label&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].label&quot; value=&quot;&amp;amp;lt;p&amp;amp;gt;If yes, please provide (internal) comments in the text box below.&amp;amp;lt;/p&amp;amp;gt;&quot; type=&quot;hidden&quot;&gt;&lt;input id=&quot;monitorTemplate.template.currentPage.sections2.elements2.editable&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].editable&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot;&gt;&#xd; 													&#xd; 														&lt;div title=&quot;Follow-up comments&quot;&gt;&lt;p&gt;If yes, please provide (internal) comments in the text box below.&lt;/p&gt;&lt;/div&gt;&#xd; 													&#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 											&lt;tr&gt;&#xd; 												&lt;td class=&quot;col-sm-12 col-md-12&quot; valign=&quot;top&quot;&gt;&#xd; 													&lt;textarea id=&quot;3553&quot; name=&quot;monitorTemplate.template.currentPage.sections[2].elements[2].elementAnswers[0].answer&quot; maxlength=&quot;3000&quot; class=&quot;form-control&quot; disabled=&quot;disabled&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;&#xd; 															&lt;p&gt;&lt;span id=&quot;chars3553&quot;&gt;3000&lt;/span&gt; characters remaining.&lt;/p&gt;													        &#xd; 													    &#xd; 												&lt;/td&gt;&#xd; 											&lt;/tr&gt;&#xd; 										&#xd; 								&lt;/tbody&gt;&lt;/table&gt;&#xd; 							&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;						&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; 	&lt;!--  submit recommendation dialog --&gt;&lt;!--  re open monitoring report dialog --&gt;&#xd; 				&lt;div id=&quot;dialog-reopen-form&quot; title=&quot;Re-Open Monitoring Report&quot; class=&quot;totally-hidden&quot;&gt;&#xd; 				  &lt;div class=&quot;container-fluid&quot;&gt;&#xd; 					&lt;p&gt;Monitoring Report - Re-Open&lt;/p&gt;&#xd; 					&lt;!-- confirm to re open --&gt;&#xd; 					&lt;div class=&quot;error&quot;&gt;&#xd; 						&lt;div id=&quot;commentsRequired&quot; style=&quot;display: none;&quot; class=&quot;error&quot;&gt;&#xd; 							Comments Required&#xd; 						&lt;/div&gt;&#xd; 					&lt;/div&gt;&#xd; &#xd; 					&lt;br&gt;&#xd; 					&lt;div class=&quot;row&quot;&gt;&#xd; 						&lt;div class=&quot;col-xs-3 col-sm-3 col-md-3&quot;&gt;&#xd; 							&lt;label class=&quot;&quot; for=&quot;recommendationCommentDialog&quot;&gt;Comments&amp;nbsp;&lt;/label&gt;&#xd; 						&lt;/div&gt;&#xd; 						&lt;div class=&quot;col-xs-9 col-sm-9 col-md-9&quot;&gt;&#xd; 							&lt;textarea id=&quot;recommendationCommentDialog&quot; name=&quot;monitorTemplate.recommendationComment&quot; maxlength=&quot;1000&quot; class=&quot;form-control&quot; rows=&quot;10&quot; cols=&quot;100&quot;&gt;&lt;/textarea&gt;&#xd; 						&lt;/div&gt;&#xd; 					&lt;/div&gt;&#xd; 				  &lt;/div&gt;&#xd; 				&lt;/div&gt;&#xd; 			 &lt;/form&gt;&#xd; 			&lt;/div&gt;&#xd; &#xd; 			&lt;div class=&quot;col-xs-12 col-sm-12 col-md-12 center-align&quot;&gt;&#xd; 				&#xd; 					&lt;button id=&quot;reOpenBtn&quot; class=&quot;btn btn-default&quot;&gt;Re-Open&lt;/button&gt;&#xd; 				&#xd; 			&lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; 	&lt;/div&gt;&#xd; &lt;/div&gt;&#xd; &#xd; &#xd; 				&lt;br&gt;&#xd; 			&lt;/div&gt;&#xd; 		&lt;!-- otherwise, show LSP --&gt;&lt;!-- template pages --&gt;&#xd; 		&lt;div id=&quot;statusHistory&quot;&gt;&#xd; 			&lt;!-- Status History --&gt;&#xd; &lt;div class=&quot;row&quot;&gt;&#xd; 	&lt;div class=&quot;table-responsive&quot;&gt;&#xd; 		&lt;table class=&quot;table table-bordered table-condensed&quot;&gt;&#xd; 			&lt;tbody&gt;&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 				&lt;td class=&quot;table-header table-no-border spc-panel-title&quot;&gt;&lt;h2&gt;Status History&lt;/h2&gt;&lt;/td&gt;&#xd; 				&lt;td class=&quot;table-header table-no-border table-header-collapse&quot;&gt;&#xd; 					&lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 					   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;statusHistory0&quot; id=&quot;statusHistoryArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 				     &lt;/div&gt;&#xd; 				&#xd; 				&lt;/td&gt;&#xd; 			&lt;/tr&gt;&#xd; 			&lt;tr id=&quot;statusHistory0&quot; class=&quot;details collapse in&quot;&gt;&#xd; 				&lt;td colspan=&quot;2&quot; class=&quot;spc-header-box&quot;&gt;&#xd; 					&lt;table class=&quot;table-responsive table-condensed&quot; id=&quot;statusHistory&quot;&gt;&#xd; 						&lt;thead class=&quot;table-header spc_header&quot;&gt;&#xd; 							&lt;tr&gt;&#xd; 								&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 									Date time&#xd; 								&lt;/td&gt;&#xd; 								&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 									Status Change&#xd; 								&lt;/td&gt;												&#xd; 								&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2 col-title&quot;&gt;&#xd; 									Created By&#xd; 								&lt;/td&gt;&#xd; 								&lt;td class=&quot;col-xs-3 col-sm-6 col-md-6 col-title&quot;&gt;&#xd; 									Comments&#xd; 								&lt;/td&gt;&#xd; 							&lt;/tr&gt;&#xd; 						&lt;/thead&gt;&#xd; 						&#xd; 							&lt;tbody&gt;&#xd; 								&#xd; 									&lt;tr class=&quot;  even&quot;&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;13/05/2019 08:25&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Confirmed&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Madiara Coulibaly&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-6 col-sm-6 col-md-6&quot;&gt;Thank you for your timely submission of your QSAR for Q4.  Congratulations on meeting or exceeding targets in all the core measures: Customer Service (target:93%- actual:99%), Effectiveness (target:69%- actual:70%), Suitability (target:32%- actual:36%).  Outstanding dedication and performance has been noted by the Ministry. In addition to this, targets were surpassed regarding the performance commitments in assisted intake service and workshop activities/information sessions.   It is noted that you didn’t meet your client targets for OW but have surpassed your target for PWD as outlined in the business plan. OW strategic priority is at 68% (115 OW clients) and PWD is at 158% (103 PWD clients) for this fiscal year.  &#xd; The Service Quality Standard (SQS) is above target (target:5.63%- actual:5.83%). The ministry acknowledges your efforts and perseverance to assist these challenging client groups.  &#xd; &#xd; Regarding YJL for Q4, the Ministry congratulates you on your dedication and hard w&lt;/td&gt;&#xd; 									&lt;/tr&gt;&#xd; 								&#xd; 									&lt;tr class=&quot;  odd&quot;&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;22/04/2019 14:01&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Submitted&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Kwame Brown&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-6 col-sm-6 col-md-6&quot;&gt;&lt;/td&gt;&#xd; 									&lt;/tr&gt;&#xd; 								&#xd; 									&lt;tr class=&quot;  even&quot;&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;30/03/2019 23:05&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;Open&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-2 col-sm-2 col-md-2&quot;&gt;SYSTEM&lt;/td&gt;&#xd; 										&lt;td class=&quot;col-xs-6 col-sm-6 col-md-6&quot;&gt;&lt;/td&gt;&#xd; 									&lt;/tr&gt;&#xd; 								&#xd; 							&lt;/tbody&gt;&#xd; 															&#xd; 					&lt;/table&gt;							&#xd; 				&lt;/td&gt;&#xd; 			&lt;/tr&gt;&#xd; 		&lt;/tbody&gt;&lt;/table&gt;&#xd; 	&lt;/div&gt;&#xd; &lt;/div&gt;&#xd; 		&lt;/div&gt;&#xd; &#xd; 	  &#xd; &#xd; 	        &lt;div class=&quot;error&quot;&gt;&#xd; 					    &lt;!-- error messages --&gt;&#xd; 						   &lt;div id=&quot;reviewCommentsRequired&quot; style=&quot;display: none;&quot; class=&quot;error&quot;&gt;Mandatory fields &amp;lt;Comments&amp;gt; must be complete.&lt;/div&gt;&#xd; 					       &lt;div id=&quot;reviewDateRequired&quot; style=&quot;display: none;&quot; class=&quot;error&quot;&gt;Mandatory fields &amp;lt;Review Date&amp;gt; must be complete.&lt;/div&gt;&#xd; 			&lt;/div&gt;&#xd; &#xd; 	      &lt;!-- Review Section --&gt;&#xd; 	      &lt;div class=&quot;row&quot;&gt;&#xd; 	        &lt;form id=&quot;submitForm&quot; role=&quot;form&quot; class=&quot;form form-horizontal&quot; action=&quot;/spcp2/protected/monitoring/report/14086&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; autocomplete=&quot;off&quot;&gt;&lt;input id=&quot;monitorReportDetail.id&quot; name=&quot;monitorReportDetail.id&quot; type=&quot;hidden&quot; value=&quot;14086&quot;&gt;&#xd; &#xd; &#xd; 	        &lt;div class=&quot;table-responsive&quot;&gt;&#xd; 				&lt;input id=&quot;review.reviewId&quot; name=&quot;review.reviewId&quot; type=&quot;hidden&quot; value=&quot;0&quot;&gt;&#xd; 				&lt;table class=&quot;table table-bordered table-condensed table-responsive&quot;&gt;&#xd; 				   &lt;thead&gt;&#xd; 					&lt;tr class=&quot;panel-heading&quot;&gt;&#xd; 						&lt;td class=&quot;table-header table-no-border  spc-panel-title&quot;&gt;Review&lt;/td&gt;&#xd; 						&lt;td class=&quot;table-header table-no-border table-header-collapse&quot;&gt;&#xd; 	                       &lt;div class=&quot;arrow-holder&quot;&gt;&#xd; 							   &lt;span tabindex=&quot;0&quot; role=&quot;button&quot; data-target=&quot;reviewDetail&quot; id=&quot;reviewDetailArrow&quot; title=&quot;Select button to hide content below&quot; class=&quot;spc-arrows spc-expanded&quot;&gt;&lt;/span&gt;&#xd; 						   &lt;/div&gt;&#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 				   &lt;/thead&gt;&#xd; 					&lt;tbody&gt;&lt;tr id=&quot;reviewDetail&quot; class=&quot;details collapse in&quot;&gt;&#xd; &#xd; 						&lt;td colspan=&quot;2&quot;&gt;&#xd; 					     &#xd; 						&lt;/td&gt;&#xd; 					&lt;/tr&gt;&#xd; 				&lt;/tbody&gt;&lt;/table&gt;&#xd; 	    	&lt;/div&gt;&#xd; 	    	&lt;/form&gt;&#xd; 		  &lt;/div&gt;&#xd; 	  &#xd; &#xd; &#xd; &#xd; &#xd; 	&lt;/div&gt;&#xd; &#xd; &lt;/div&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/generatePdf.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Display Pdf" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/displayPdf.do</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;%PDF&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Agreements" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Agreements Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/agreements/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Agreement Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: List Agreements Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/agreements/agreements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Agreements&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Agreement" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value">COJG</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProvider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProvider</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">poNumber</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="poNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">poNumber</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="localOffice" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">localOffice</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="spRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">spRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fiscalYearCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fiscalYearCode</stringProp>
                    <stringProp name="Argument.value">2019-2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="statusCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">statusCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/agreements/agreementSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="List Ministry Forecast" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Monitoring Tab" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Monitoring Shortcuts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request:  List Ministry Forecasts Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/ministryForecasts</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;List Ministry Forecasts&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request:  Search Ministry Forecasts" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pageCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageCount</stringProp>
                    <stringProp name="Argument.value">32</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="programCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">programCode</stringProp>
                    <stringProp name="Argument.value">COJG</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="localOfficeId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">localOfficeId</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="monthCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">monthCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="regionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">regionId</stringProp>
                    <stringProp name="Argument.value">19</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="forecastTypeCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">forecastTypeCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">pageNo</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="serviceProvider" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">serviceProvider</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="spRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">spRef</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="direction" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">direction</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="fiscalYearCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fiscalYearCode</stringProp>
                    <stringProp name="Argument.value">2019-2020</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="statusCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">statusCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">spcp2/protected/monitoring/ministryForecastsSearch.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def pattern = &quot;Number of Items&quot;
	def data = prev.getResponseDataAsString()
	if(!data.contains(pattern)) {
		should_restart = true
		//log.info data.toString()
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Error: ${ex.message}&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;REQUEST FAILED&quot;
	AssertionResult.setFailureMessage(&quot;Request Failed - Not expected response&quot;);
     AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">spcp2/logout</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="RandomTimer.range">22733.0</stringProp>
            <stringProp name="ConstantTimer.delay">11366.5</stringProp>
            <stringProp name="TestPlan.comments">Recorded time was 22733 milliseconds</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="true">
        <collectionProp name="ultimatethreadgroupdata"/>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="scenario_01" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="scenario_02" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
