<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CAMS">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.3.1.23. Please contact support@blazemeter.com for further support.</stringProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;113&quot;, &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
          <elementProp name="X-Requested-With" elementType="Header">
            <stringProp name="Header.name">X-Requested-With</stringProp>
            <stringProp name="Header.value">XMLHttpRequest</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.value">intra.qa.ops.eois.labour.gov.on.ca</stringProp>
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Create Service Plan" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1049888847">
            <stringProp name="-975060588">${__P(users_csp,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_csp_rp1.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;USER: ${USER}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Case Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Case_searchPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Criteria/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO CASE SEARCH PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input[^&gt;]*name=\&quot;${key}\&quot;[^&gt;]*?value=\&quot;(.*?)\&quot;[^&gt;]*&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Case" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Case_searchAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">Case_searchPage.do?o3ctx=4096</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$concernRoleID</stringProp>
                  <stringProp name="Argument.value">Client Name</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$concernRoleID_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$concernRoleID_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$concernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                  <stringProp name="Argument.value">CT5</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$type</stringProp>
                  <stringProp name="Argument.value">Category &amp; Program</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$type_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$type_desc</stringProp>
                  <stringProp name="Argument.value">Employment Ontario</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$type</stringProp>
                  <stringProp name="Argument.value">PC1000</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                  <stringProp name="Argument.value">01/01/2022</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                  <stringProp name="Argument.value">CS4</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$caseOwnerUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$caseOwnerUserName</stringProp>
                  <stringProp name="Argument.value">Owner</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$caseOwnerUserName_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$caseOwnerUserName_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$caseOwnerUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$caseOwnerUserName</stringProp>
                </elementProp>
                <elementProp name="__o3id7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id7</stringProp>
                  <stringProp name="Argument.value">01/01/2023</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$employerConcernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$employerConcernRoleID</stringProp>
                  <stringProp name="Argument.value">Employer</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$employerConcernRoleID_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$employerConcernRoleID_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$employerConcernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$employerConcernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Service Delivery Site</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$providerConcernRoleIDSearch_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$providerConcernRoleIDSearch_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$caseReference&quot;,&quot;Case Reference&quot;,&quot;CASE_REFERENCE&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$samsMemberIDInd&quot;,&quot;Display cases with SAMS Member ID&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$searchWithServicePlans&quot;,&quot;Display cases with Service Plans&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$primaryAlternateID&quot;,&quot;Client Reference&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$category&quot;,&quot;Category &amp; Program&quot;,&quot;CASE_CATEGORY&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$status&quot;,&quot;Status&quot;,&quot;CASE_STATUS_CODE&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$startDate&quot;,&quot;Start Date&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$endDate&quot;,&quot;End Date&quot;,&quot;CURAM_DATE&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">Case_search</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern1 = /Search Results \(Number of Items: 50 out .*/
		def match = data =~ pattern1
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
		    def pattern2 = /&lt;a href=&quot;(Case_resolveCaseHomePage\.do\?[^&quot;]+)&quot; class=&quot;field-link&quot;&gt;/
		    def matcher = data =~ pattern2
		    def user_urls = []
		
		    if (matcher) {
		        matcher.each { item -&gt;
		            user_urls.add(item[1])
		        }
		    }
		
		    if (!user_urls.isEmpty()) {
				String user_urls_string = user_urls.join(&quot;#&quot;)
				//log.info(&quot;Stored user URLs: ${user_urls_string}&quot;)
				vars.put(&quot;user_urls&quot;, user_urls_string)
			} else {
			    log.info(&quot;NO USER URLS FOUND&quot;)
			    should_restart = true
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get User Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/${url_command}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get url_command" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def user_urls_string = vars.get(&quot;user_urls&quot;)

if (user_urls_string) {
    def user_urls = user_urls_string.split(&apos;#&apos;)
    //log.info(&quot;LIST of USER URLs: ${user_urls}&quot;)
    def randomUrl = user_urls[new Random().nextInt(user_urls.size())]

    vars.put(&quot;url_command&quot;, randomUrl)
    //log.info(&quot;USER URL: ${randomUrl}&quot;)
} else {
    log.warn(&quot;user_urls is not set or empty&quot;)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /href:&apos;(ServicePlanDelivery_ICCreatePage\.do.*?)&apos;/
		def match = data =~ pattern
		if(!match || match.size() == 0 || match[0].size &lt; 2) {
			log.info &quot;NO CREATE SERVICE PLAN PAGE FOIND&quot;
			should_restart = true
		}
		else {
			//log.info(&quot;NEW USER URL: ${match[0][1]}&quot;)
			vars.put(&apos;url_command&apos;, match[0][1])
		}
		pattern = /caseParticipantRoleID=(-{0,1}\w+)/
		match = data =~ pattern
		if(!match || match.size() == 0 || match[0].size &lt; 2) {
			log.info &quot;NO PARTICIPANT ROLE ID FOIND&quot;
			should_restart = true
		}
		else {
			//log.info &quot;Role ID: ${match[0][1]}&quot;
			vars.put(&quot;case_part_role_id&quot;, match[0][1])
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;GET USER PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Create Service Plan Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/${__unescapeHtml(${url_command})}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="dojo.preventCache" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${pst_epoch}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dojo.preventCache</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_1}:9443/CuramQA/</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get current time" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def currentTime = System.currentTimeMillis()
//log.info(&quot;Current time: ${currentTime}&quot;)
vars.put(&quot;pst_epoch&quot;, currentTime.toString() + &quot;_1&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3rpu&quot;: &quot;&quot;,
	&quot;__o3cpu&quot;: &quot;&quot;,
	&quot;o3ctx&quot;: &quot;&quot;,
	&quot;__o3synch&quot;: &quot;&quot;,
	&quot;caseID&quot;: &quot;&quot;,
	//&quot;description&quot;: &quot;&quot;,
	&quot;caseParticipantRoleID&quot;: &quot;&quot;,
	//&quot;__o3fwph.ACTION.key.plannedSubGoalKey.key.plannedSubGoalID&quot;: &quot;&quot;,
	//&quot;__o3btn.CTL1&quot;: &quot;&quot;,
	&quot;serviceID&quot;: &quot;0&quot;,
	&quot;applicationNumber&quot;: &quot;0&quot;,
	&quot;__o3fmeta&quot;: &quot;&quot;,
	&quot;__o3fwph.ACTION.details.servicePlanDeliveryDetails.concernRoleID&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /action=&quot;(ServicePlanDelivery_ICCreateAction\.do)&quot;/
		def match = data =~ pattern
		if(!match || match.size() == 0 || match[0].size &lt; 2) {
			log.info &quot;NO OPTION PROVIDED FOR CREATING SERVICE PLAN&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input[^&gt;]*name=\&quot;${key}\&quot;[^&gt;]*?value=\&quot;(.*?)\&quot;[^&gt;]*&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;DELETE SUBGOAL PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Create Service Plan" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/ServicePlanDelivery_ICCreateAction.do?o3modalprev=ServicePlanDelivery_ICCreate</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${o3ctx}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                </elementProp>
                <elementProp name="caseID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${caseID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">caseID</stringProp>
                </elementProp>
                <elementProp name="description" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">description</stringProp>
                </elementProp>
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3rpu}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3cpu}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                </elementProp>
                <elementProp name="caseParticipantRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${caseParticipantRoleID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">caseParticipantRoleID</stringProp>
                </elementProp>
                <elementProp name="serviceID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${serviceID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">serviceID</stringProp>
                </elementProp>
                <elementProp name="applicationNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${applicationNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applicationNumber</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.details$servicePlanDeliveryDetails$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3fwph.ACTION.details.servicePlanDeliveryDetails.concernRoleID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.details$servicePlanDeliveryDetails$concernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.key$servicePlanIntegratedCaseKey$servicePlanIntegratedCaseKey$caseID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${caseID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.key$servicePlanIntegratedCaseKey$servicePlanIntegratedCaseKey$caseID</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">RI30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                </elementProp>
                <elementProp name="__o3id2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                  <stringProp name="Argument.value">2479768156541812736</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                  <stringProp name="Argument.value">SSI2</stringProp>
                </elementProp>
                <elementProp name="__o3id9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id9</stringProp>
                </elementProp>
                <elementProp name="__o3ida" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3ida</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Save</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$servicePlanID&quot;,&quot;Program&quot;,&quot;SERVICE_PLAN_ID&quot;,true],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$transitionalClientTypeCD&quot;,&quot;Transitional Client *&quot;,&quot;TRANSITIONAL_CLIENT_TYPE&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$referIn&quot;,&quot;Referred In&quot;,&quot;MTCU_SP_REFER_IN_CODE&quot;,true],&quot;__o3ida&quot;:[&quot;\/data\/si\/ACTION\/details$dtls$planTemplateID&quot;,&quot;Template&quot;,&quot;PLAN_TEMPLATE_ID&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$providerConcernRoleID&quot;,&quot;Service Delivery Site&quot;,&quot;CONCERN_ROLE_ID&quot;,true],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$userName&quot;,&quot;Owner&quot;,&quot;USER_NAME&quot;,true],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$eChannellIND&quot;,&quot;LBS eChannel Indicator&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$selfServiceInitiated&quot;,&quot;Self Service Initiated *&quot;,&quot;MTCU_SP_SELFSERVICE_INIT_CODE&quot;,false],&quot;__o3id8&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$sfsParticipantInd&quot;,&quot;SFS Participant&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$cliParticipantInd&quot;,&quot;CLI Participant&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id9&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$sfsInitiativeCD&quot;,&quot;SFS Initiative *&quot;,&quot;MTCU_SFS_INITIATIVE_CODE&quot;,false]} </stringProp>
                </elementProp>
                <elementProp name="o3frame" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3frame</stringProp>
                  <stringProp name="Argument.value">modal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
    def data = prev.getResponseDataAsString()
    if (!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
        should_restart = true
    }
    else {
        def pattern = /Service Plan Home/
        def match = data =~ pattern
        if (!match || match.size() == 0) {
            log.info &quot;NO SERVICE PLAN CREATED&quot;
            should_restart = true
        } else {
            pattern = /Plan Reference Number.*?class=&quot;field.*?&gt;([0-9]+)&lt;\/td&gt;/
            match = data =~ pattern
            if (!match || match.size() == 0 || match[0].size() &lt; 2) {
                log.info &quot;NO SERVICE PLAN REFERENCE NUMBER FOUND&quot;
                should_restart = true
            } else {
                log.info &quot;PLAN REFERENCE NUMBER: ${match[0][1]}&quot;
            }
        }
    }
} catch (Exception ex) {
    should_restart = true
    log.info ex.message
}

if (should_restart) {
    ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
    log.info &quot;CONTENT PAGE: UNEXPECTED RESPONSE - RESTARTING THREAD&quot;
    def failure_message = prev.getResponseDataAsString()
    AssertionResult.setFailureMessage(failure_message)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Register Person" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-532963637">
            <stringProp name="808834910">${__P(users_rp,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_csp_rp2.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RS

//vars.put(&apos;PASSWORD&apos;, &apos;password&apos;)
//vars.put(&apos;USER&apos;, &apos;IAAP1549&apos;)
log.info(&quot;USER: ${USER}&quot;)

def uniq_key = RS.random(5, true, true)
vars.put(&apos;T_USER_L_NAME&apos;, &apos;PerfTesteroff_&apos; + uniq_key)
vars.put(&apos;T_USER_F_NAME&apos;, &apos;PerfTester_&apos; + uniq_key)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Person Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/MTCU_searchPersonPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="relatedConcernID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">relatedConcernID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IsCreateCasePageSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IsCreateCasePageSource</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IsEOSSApplicationPageSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IsEOSSApplicationPageSource</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applicationNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applicationNumber</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Confirm Person Not Already Registered/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO USER SEARCh PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Person" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/MTCU_searchPersonAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">MTCU_searchPersonPage.do?relatedConcernID=null&amp;applicationNumber=0&amp;IsCreateCasePageSource=true&amp;o3ctx=4096&amp;IsEOSSApplicationPageSource=false</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                  <stringProp name="Argument.value">${T_USER_L_NAME}</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                  <stringProp name="Argument.value">${T_USER_F_NAME}</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$referenceNumber&quot;,&quot;Reference Number&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$nicknameInd&quot;,&quot;Search using nicknames&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$forename&quot;,&quot;First Name&quot;,&quot;FIRST_FORENAME&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$apprPartyID&quot;,&quot;APPR Client Party ID&quot;,&quot;REGISTRATION_NUMBER&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$surname&quot;,&quot;Last Name&quot;,&quot;SURNAME&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$sex&quot;,&quot;I Identify As&quot;,&quot;GENDER_CODE&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$dateOfBirth&quot;,&quot;Date of Birth&quot;,&quot;CURAM_DATE&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">MTCU_searchPerson</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Search Results \(Number of Items: 0 out of 0\)/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Register Person Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Person_registerPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="forename" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${T_USER_F_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">forename</stringProp>
                </elementProp>
                <elementProp name="surname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">surname</stringProp>
                  <stringProp name="Argument.value">${T_USER_L_NAME}</stringProp>
                </elementProp>
                <elementProp name="sex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sex</stringProp>
                </elementProp>
                <elementProp name="dateOfBirth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dateOfBirth</stringProp>
                </elementProp>
                <elementProp name="apprPartyID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">apprPartyID</stringProp>
                </elementProp>
                <elementProp name="applicationNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applicationNumber</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                </elementProp>
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                  <stringProp name="Argument.value">MTCU_searchPersonPage.do?o3prv=MTCU_searchPerson&amp;o3ctx=4099</stringProp>
                </elementProp>
                <elementProp name="o3nocache" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3nocache</stringProp>
                  <stringProp name="Argument.value">${pst_epoch}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_1}:9443/CuramQA/</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get current time" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def currentTime = System.currentTimeMillis()
//log.info(&quot;Current time: ${currentTime}&quot;)
vars.put(&quot;pst_epoch&quot;, currentTime.toString() + &quot;_0&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;,
	&quot;__o3rpu&quot;: &quot;&quot;,
	&quot;__o3cpu&quot;: &quot;&quot;,
	&quot;__o3fwph.ACTION.personDetails.personRegistrationDetails.basicFederalTax&quot;: &quot;&quot;,
	&quot;__o3fwph.ACTION.personDetails.personRegistrationDetails.basicProvincialTax&quot; : &quot;&quot;,
	&quot;o3ctx&quot; : &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Client Self Identification/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO REGISTER USER PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;REGISTER USER PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Register Person" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Person_registerAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${o3ctx}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                </elementProp>
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${__o3rpu}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${__o3cpu}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                </elementProp>
                <elementProp name="relatedConcernID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">relatedConcernID</stringProp>
                </elementProp>
                <elementProp name="forename" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${T_USER_F_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">forename</stringProp>
                </elementProp>
                <elementProp name="sex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sex</stringProp>
                </elementProp>
                <elementProp name="dateOfBirth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dateOfBirth</stringProp>
                </elementProp>
                <elementProp name="apprPartyID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">apprPartyID</stringProp>
                </elementProp>
                <elementProp name="surname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">surname</stringProp>
                  <stringProp name="Argument.value">${T_USER_L_NAME}</stringProp>
                </elementProp>
                <elementProp name="addressTextboxIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">addressTextboxIds</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.personDetails$personRegistrationDetails$samsReference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.personDetails$personRegistrationDetails$samsReference</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.personDetails$personRegistrationDetails$basicFederalTax" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.personDetails$personRegistrationDetails$basicFederalTax</stringProp>
                  <stringProp name="Argument.value">${__o3fwph.ACTION.personDetails.personRegistrationDetails.basicFederalTax}</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.personDetails$personRegistrationDetails$basicProvincialTax" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.personDetails$personRegistrationDetails$basicProvincialTax</stringProp>
                  <stringProp name="Argument.value">${__o3fwph.ACTION.personDetails.personRegistrationDetails.basicProvincialTax}</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Register</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${T_USER_F_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                </elementProp>
                <elementProp name="__o3id2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2</stringProp>
                  <stringProp name="Argument.value">${T_USER_L_NAME}</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                </elementProp>
                <elementProp name="__o3id7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id7</stringProp>
                </elementProp>
                <elementProp name="__o3id8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id8</stringProp>
                  <stringProp name="Argument.value">SX1</stringProp>
                </elementProp>
                <elementProp name="__o3id9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id9</stringProp>
                  <stringProp name="Argument.value">01/01/1990</stringProp>
                </elementProp>
                <elementProp name="__o3idb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3idb</stringProp>
                </elementProp>
                <elementProp name="__o3idc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3idc</stringProp>
                  <stringProp name="Argument.value">18/10/2023</stringProp>
                </elementProp>
                <elementProp name="__o3idd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3idd</stringProp>
                </elementProp>
                <elementProp name="__o3ide" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3ide</stringProp>
                  <stringProp name="Argument.value">CITIZEN</stringProp>
                </elementProp>
                <elementProp name="__o3idf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3idf</stringProp>
                </elementProp>
                <elementProp name="__o3id10" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id10</stringProp>
                  <stringProp name="Argument.value">MTCUIS03</stringProp>
                </elementProp>
                <elementProp name="__o3id11" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id11</stringProp>
                </elementProp>
                <elementProp name="__o3id12" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id12</stringProp>
                  <stringProp name="Argument.value">LN1</stringProp>
                </elementProp>
                <elementProp name="__o3id13" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id13</stringProp>
                  <stringProp name="Argument.value">MS4</stringProp>
                </elementProp>
                <elementProp name="__o3id1d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1d</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                </elementProp>
                <elementProp name="__o3id1e" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1e</stringProp>
                  <stringProp name="Argument.value">M5N2M4</stringProp>
                </elementProp>
                <elementProp name="__o3id1f" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1f</stringProp>
                  <stringProp name="Argument.value">1|0|CANADIAN|US|1|0| </stringProp>
                </elementProp>
                <elementProp name="__o3id20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id20</stringProp>
                </elementProp>
                <elementProp name="__o3id21" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id21</stringProp>
                  <stringProp name="Argument.value">35 GILGORM RD</stringProp>
                </elementProp>
                <elementProp name="__o3id22" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id22</stringProp>
                </elementProp>
                <elementProp name="__o3id23" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id23</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                </elementProp>
                <elementProp name="__o3id24" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id24</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                </elementProp>
                <elementProp name="__o3id25" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id25</stringProp>
                  <stringProp name="Argument.value">M5N2M4</stringProp>
                </elementProp>
                <elementProp name="__o3id27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id27</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                </elementProp>
                <elementProp name="__o3id28" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id28</stringProp>
                </elementProp>
                <elementProp name="__o3id29" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id29</stringProp>
                  <stringProp name="Argument.value">1|0|CANADIAN|US|1|0|</stringProp>
                </elementProp>
                <elementProp name="__o3id2a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2a</stringProp>
                </elementProp>
                <elementProp name="__o3id2b" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2b</stringProp>
                </elementProp>
                <elementProp name="__o3id2c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2c</stringProp>
                </elementProp>
                <elementProp name="__o3id2d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2d</stringProp>
                </elementProp>
                <elementProp name="__o3id2e" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2e</stringProp>
                  <stringProp name="Argument.value">EMPTY</stringProp>
                </elementProp>
                <elementProp name="__o3id2f" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2f</stringProp>
                </elementProp>
                <elementProp name="__o3id30" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id30</stringProp>
                </elementProp>
                <elementProp name="__o3id32" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id32</stringProp>
                </elementProp>
                <elementProp name="__o3id34" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id34</stringProp>
                </elementProp>
                <elementProp name="__o3id36" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id36</stringProp>
                </elementProp>
                <elementProp name="__o3id37" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id37</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id11&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$socialSecurityNumber&quot;,&quot;Social Insurance Number&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id10&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$immigratedToCanada&quot;,&quot;Immigrated to Canada?&quot;,&quot;MTCU_IMMIGRANT_STATUS&quot;,true],&quot;__o3id2b&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[ADD2]&quot;,&quot;Street 1&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id2a&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[ADD1]&quot;,&quot;Apt\/Suite&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id35&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$tty3&quot;,&quot;Fax TTY&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id34&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$fullPhoneNumber3&quot;,&quot;Fax Number&quot;,&quot;MTCU_PHONE_NUMBER&quot;,false],&quot;__o3id37&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$servicePlanTypeCd&quot;,&quot;Interested in Program&quot;,&quot;SERVICE_PLAN_TYPE_CODE&quot;,false],&quot;__o3id36&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$emailAddressDtls$emailAddress&quot;,&quot;Email Address&quot;,&quot;EMAIL_ADDRESS&quot;,false],&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$firstForename&quot;,&quot;First Name&quot;,&quot;FIRST_FORENAME&quot;,true],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$surname&quot;,&quot;Last Name&quot;,&quot;SURNAME&quot;,true],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$otherForename&quot;,&quot;Middle Name&quot;,&quot;OTHER_FORENAME&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$initials&quot;,&quot;Initials &quot;,&quot;PERSON_INITIALS&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$nameSuffix&quot;,&quot;Suffix&quot;,&quot;PERSON_SUFFIX_CODE&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$motherBirthSurname&quot;,&quot;Mother\u2019s Birth Last Name&quot;,&quot;MOTHER_BIRTH_SURNAME&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$birthName&quot;,&quot;Birth Last Name&quot;,&quot;PERSON_BIRTH_NAME&quot;,false],&quot;__o3id8&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$sex&quot;,&quot;I Identify As&quot;,&quot;GENDER_CODE&quot;,true],&quot;__o3id2d&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[CITY]&quot;,&quot;City&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$title&quot;,&quot;Title&quot;,&quot;PERSON_TITLE_CODE&quot;,false],&quot;__o3id2c&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[ADD3]&quot;,&quot;Street 2&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id2f&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[POSTCODE]&quot;,&quot;Postal\/Zip Code&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id9&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$dateOfBirth&quot;,&quot;Date of Birth&quot;,&quot;CURAM_DATE&quot;,true],&quot;__o3id2e&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[PROV]&quot;,&quot;Province\/State&quot;,&quot;_o3_AddressProvinceStateType&quot;,false],&quot;__o3id1a&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$visibleMinorityInd&quot;,&quot;Racialized Person&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id24&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[PROV]&quot;,&quot;Province\/State&quot;,&quot;_o3_AddressProvinceStateType&quot;,true],&quot;__o3id23&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[CITY]&quot;,&quot;City&quot;,&quot;SVR_STRING&quot;,true],&quot;__o3id26&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressIndicator&quot;,&quot;Same as primary &quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id25&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[POSTCODE]&quot;,&quot;Postal\/Zip Code&quot;,&quot;SVR_STRING&quot;,true],&quot;__o3id28&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$tempSecondaryPostcode&quot;,&quot;Postal Code Lookup&quot;,&quot;TEMP_STRING&quot;,false],&quot;__o3id27&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$secondaryPostcodeCountry&quot;,&quot;Country&quot;,&quot;POSTCODE_COUNTRYCODE&quot;,false],&quot;__o3id29&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/header&quot;,&quot;&quot;,&quot;ADDRESS_DATA&quot;,false],&quot;__o3id31&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$tty1&quot;,&quot;Primary TTY&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id30&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$fullPhoneNumber1&quot;,&quot;Primary Phone Number&quot;,&quot;MTCU_PHONE_NUMBER&quot;,false],&quot;__o3id33&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$tty2&quot;,&quot;Alternate TTY&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id32&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$fullPhoneNumber2&quot;,&quot;Alternate Phone Number&quot;,&quot;MTCU_PHONE_NUMBER&quot;,false],&quot;__o3id1c&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$disabilityInd&quot;,&quot;Person with Disability&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1b&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$aborigMetis&quot;,&quot;M\u00e9tis&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1e&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$tempPrimaryPostcode&quot;,&quot;Postal Code Lookup&quot;,&quot;TEMP_STRING&quot;,false],&quot;__o3id1d&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$primaryPostcodeCountry&quot;,&quot;Country&quot;,&quot;POSTCODE_COUNTRYCODE&quot;,true],&quot;__o3id1f&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/header&quot;,&quot;&quot;,&quot;ADDRESS_DATA&quot;,false],&quot;__o3idb&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$birthCountry&quot;,&quot;Country of Birth&quot;,&quot;COUNTRY_CODE&quot;,false],&quot;__o3ida&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$genderOtherDesc&quot;,&quot;Other Description&quot;,&quot;BATCH_GROUP_NAME&quot;,false],&quot;__o3idd&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$dateArrivedInCanada&quot;,&quot;Date Arrived in Canada&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3idc&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$registrationDate&quot;,&quot;Registration Date&quot;,&quot;CURAM_DATE&quot;,true],&quot;__o3idf&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$prefCommMethod&quot;,&quot;Preferred Communication&quot;,&quot;COMMUNICATION_METHOD_CODE&quot;,false],&quot;__o3ide&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$statusInCanadaCode&quot;,&quot;Status in Canada&quot;,&quot;MTCU_STATUS_IN_CANADA_CODE&quot;,true],&quot;__o3id13&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$currentMaritalStatus&quot;,&quot;Marital Status&quot;,&quot;MARITAL_STATUS_CODE&quot;,true],&quot;__o3id12&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$preferredLanguage&quot;,&quot;Preferred Language&quot;,&quot;LANGUAGE_CODE&quot;,true],&quot;__o3id15&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$deafblind&quot;,&quot;Deafblind&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id14&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$newComerInd&quot;,&quot;Newcomer&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id17&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$aborigInuit&quot;,&quot;Inuit&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id16&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$francophoneInd&quot;,&quot;Francophone&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id19&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$aborigFirstNations&quot;,&quot;First Nations&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id18&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$deafHearingImpairedInd&quot;,&quot;Deaf&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id20&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[ADD1]&quot;,&quot;Apt\/Suite&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id22&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[ADD3]&quot;,&quot;Street 2&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id21&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[ADD2]&quot;,&quot;Street 1&quot;,&quot;SVR_STRING&quot;,true]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">Person_register</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
    def data = prev.getResponseDataAsString()
    if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
        should_restart = true
    }
    else {
        def pattern = /Person Registration Completed/
        def match = data =~ pattern
        if(!match || match.size() == 0) {
            log.info &quot;NO PERSON REGISTERED&quot;
            should_restart = true
        } else {
            pattern = /The person reference number is &lt;span class=&quot;separator&quot;&gt; &lt;\/span&gt;(\d+)/
            match = data =~ pattern
            if(match &amp;&amp; match.size() &gt; 0) {
                def referenceNumber = match[0][1]
                log.info &quot;PERSON REFERENCE NUMBER: ${referenceNumber}&quot;
                vars.put(&quot;person_ref_num&quot;, referenceNumber)
            } else {
                log.info &quot;REFERENCE NUMBER NOT FOUND&quot;
                should_restart = true
            }
        }
    }
} catch (Exception ex) {
    should_restart = true
    log.info ex.message
}

if(should_restart) {
    ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
    log.info &quot;PERSON REGISTRATION PAGE: UNEXPECTED RESPONSE - RESTARTING THREAD&quot;
    def failure_message = prev.getResponseDataAsString()
    AssertionResult.setFailureMessage(failure_message)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Search Person" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="586385080">
            <stringProp name="837464061">${__P(users_sp,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_sc_sp_spy1.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;USER: ${USER}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Person Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Person_searchPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Search Criteria/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO USER SEARCh PAGE LOADED&quot;
			should_restart = true
		}
		else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				}
				else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Person" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Person_searchAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">Person_searchPage.do?o3ctx=4096</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                  <stringProp name="Argument.value">Khan</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$referenceNumber&quot;,&quot;Reference Number&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$forename&quot;,&quot;First Name&quot;,&quot;FIRST_FORENAME&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$surname&quot;,&quot;Last Name&quot;,&quot;SURNAME&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$dateOfBirth&quot;,&quot;Date of Birth&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$nicknameInd&quot;,&quot;Search using nicknames&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$apprPartyID&quot;,&quot;APPR Client Party ID&quot;,&quot;REGISTRATION_NUMBER&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$sex&quot;,&quot;I Identify As&quot;,&quot;GENDER_CODE&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$samsMemberIDInd&quot;,&quot;Display cases with SAMS Member ID&quot;,&quot;CURAM_INDICATOR&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">Person_search</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Results \(Number of Items: 50 out of ([0-9]+)\)/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
			log.info &quot;FOUND: ${match[0][1]} persons&quot;
		  }
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Search Case" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-334447312">
            <stringProp name="825458288">${__P(users_sc,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_sc_sp_spy2.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;USER: ${USER}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Case Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Case_searchPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Search Criteria/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO CASE SEARCH PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input[^&gt;]*name=\&quot;${key}\&quot;[^&gt;]*?value=\&quot;(.*?)\&quot;[^&gt;]*&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Case" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Case_searchAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">Case_searchPage.do?o3ctx=4096</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$concernRoleID</stringProp>
                  <stringProp name="Argument.value">Client Name</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$concernRoleID_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$concernRoleID_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$concernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                  <stringProp name="Argument.value">CT5</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$type</stringProp>
                  <stringProp name="Argument.value">Category &amp; Program</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$type_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$type_desc</stringProp>
                  <stringProp name="Argument.value">Employment Ontario</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$type</stringProp>
                  <stringProp name="Argument.value">PC1000</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                  <stringProp name="Argument.value">01/01/2022</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                  <stringProp name="Argument.value">CS4</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$caseOwnerUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$caseOwnerUserName</stringProp>
                  <stringProp name="Argument.value">Owner</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$caseOwnerUserName_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$caseOwnerUserName_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$caseOwnerUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$caseOwnerUserName</stringProp>
                </elementProp>
                <elementProp name="__o3id7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id7</stringProp>
                  <stringProp name="Argument.value">01/01/2023</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$employerConcernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$employerConcernRoleID</stringProp>
                  <stringProp name="Argument.value">Employer</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$employerConcernRoleID_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$employerConcernRoleID_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$employerConcernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$employerConcernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Service Delivery Site</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$providerConcernRoleIDSearch_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$providerConcernRoleIDSearch_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$caseReference&quot;,&quot;Case Reference&quot;,&quot;CASE_REFERENCE&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$samsMemberIDInd&quot;,&quot;Display cases with SAMS Member ID&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$searchWithServicePlans&quot;,&quot;Display cases with Service Plans&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$primaryAlternateID&quot;,&quot;Client Reference&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$category&quot;,&quot;Category &amp; Program&quot;,&quot;CASE_CATEGORY&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$status&quot;,&quot;Status&quot;,&quot;CASE_STATUS_CODE&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$startDate&quot;,&quot;Start Date&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$endDate&quot;,&quot;End Date&quot;,&quot;CURAM_DATE&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">Case_search</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Results \(Number of Items: 50 out of ([0-9]+)\)/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
			log.info &quot;FOUND: ${match[0][1]} cases&quot;
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Search Payment" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1646992644">
            <stringProp name="262520656">${__P(users_spy,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_sc_sp_spy3.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;USER: ${USER}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Payment Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/MTCUPayment_searchPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Criteria/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO PAYMENT SEARCh PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;PAYMENT SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Payment" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/MTCUPayment_searchAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">MTCUPayment_searchPage.do?o3ctx=4096</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                </elementProp>
                <elementProp name="__o3id2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                  <stringProp name="Argument.value">29/06/2018</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                  <stringProp name="Argument.value">02/04/2018</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                </elementProp>
                <elementProp name="__o3id7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id7</stringProp>
                </elementProp>
                <elementProp name="__o3id8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id8</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$chequeNumber&quot;,&quot;Cheque \/ EFT Number&quot;,&quot;REFERENCE_NUMBER&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$processedDateFrom&quot;,&quot;Processed Date From&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$processedDateTo&quot;,&quot;Processed Date To&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$issueDateFrom&quot;,&quot;Issue Date From&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$issueDateTo&quot;,&quot;Issue Date To&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$status&quot;,&quot;Status&quot;,&quot;PMT_RECONCILIATION_STATUS_CODE&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$accountNumber&quot;,&quot;Bank Account Number&quot;,&quot;BANK_ACCOUNT_NUMBER&quot;,false],&quot;__o3id8&quot;:[&quot;\/data\/si\/ACTION\/key$dtlRecordNum&quot;,&quot;Ministry Reference Number&quot;,&quot;INTERNAL_ID&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/key$invoiceNumber&quot;,&quot;Invoice Number&quot;,&quot;BANK_ACCOUNT_NAME&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">MTCUPayment_search</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Results \(Number of Items: 50 out of ([0-9]+)\)/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
			log.info &quot;FOUND: ${match[0][1]} payments&quot;
		  }
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug - Create Service Plan" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_1.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;USER: ${USER}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Case Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Case_searchPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Criteria/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO CASE SEARCH PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input[^&gt;]*name=\&quot;${key}\&quot;[^&gt;]*?value=\&quot;(.*?)\&quot;[^&gt;]*&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Case" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Case_searchAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">Case_searchPage.do?o3ctx=4096</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$concernRoleID</stringProp>
                  <stringProp name="Argument.value">Client Name</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$concernRoleID_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$concernRoleID_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$concernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                  <stringProp name="Argument.value">CT5</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$type</stringProp>
                  <stringProp name="Argument.value">Category &amp; Program</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$type_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$type_desc</stringProp>
                  <stringProp name="Argument.value">Employment Ontario</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$type</stringProp>
                  <stringProp name="Argument.value">PC1000</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                  <stringProp name="Argument.value">01/01/2022</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                  <stringProp name="Argument.value">CS4</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$caseOwnerUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$caseOwnerUserName</stringProp>
                  <stringProp name="Argument.value">Owner</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$caseOwnerUserName_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$caseOwnerUserName_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$caseOwnerUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$caseOwnerUserName</stringProp>
                </elementProp>
                <elementProp name="__o3id7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id7</stringProp>
                  <stringProp name="Argument.value">01/01/2023</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$employerConcernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$employerConcernRoleID</stringProp>
                  <stringProp name="Argument.value">Employer</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$employerConcernRoleID_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$employerConcernRoleID_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$employerConcernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$employerConcernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Service Delivery Site</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$providerConcernRoleIDSearch_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$providerConcernRoleIDSearch_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$caseReference&quot;,&quot;Case Reference&quot;,&quot;CASE_REFERENCE&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$samsMemberIDInd&quot;,&quot;Display cases with SAMS Member ID&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$searchWithServicePlans&quot;,&quot;Display cases with Service Plans&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$primaryAlternateID&quot;,&quot;Client Reference&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$category&quot;,&quot;Category &amp; Program&quot;,&quot;CASE_CATEGORY&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$status&quot;,&quot;Status&quot;,&quot;CASE_STATUS_CODE&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$startDate&quot;,&quot;Start Date&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$endDate&quot;,&quot;End Date&quot;,&quot;CURAM_DATE&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">Case_search</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern1 = /Search Results \(Number of Items: 50 out .*/
		def match = data =~ pattern1
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
		    def pattern2 = /&lt;a href=&quot;(Case_resolveCaseHomePage\.do\?[^&quot;]+)&quot; class=&quot;field-link&quot;&gt;/
		    def matcher = data =~ pattern2
		    def user_urls = []
		
		    if (matcher) {
		        matcher.each { item -&gt;
		            user_urls.add(item[1])
		        }
		    }
		
		    if (!user_urls.isEmpty()) {
				String user_urls_string = user_urls.join(&quot;#&quot;)
				//log.info(&quot;Stored user URLs: ${user_urls_string}&quot;)
				vars.put(&quot;user_urls&quot;, user_urls_string)
			} else {
			    log.info(&quot;NO USER URLS FOUND&quot;)
			    should_restart = true
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get User Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/${url_command}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get url_command" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def user_urls_string = vars.get(&quot;user_urls&quot;)

if (user_urls_string) {
    def user_urls = user_urls_string.split(&apos;#&apos;)
    //log.info(&quot;LIST of USER URLs: ${user_urls}&quot;)
    def randomUrl = user_urls[new Random().nextInt(user_urls.size())]

    vars.put(&quot;url_command&quot;, randomUrl)
    //log.info(&quot;USER URL: ${randomUrl}&quot;)
} else {
    log.warn(&quot;user_urls is not set or empty&quot;)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /href:&apos;(ServicePlanDelivery_ICCreatePage\.do.*?)&apos;/
		def match = data =~ pattern
		if(!match || match.size() == 0 || match[0].size &lt; 2) {
			log.info &quot;NO CREATE SERVICE PLAN PAGE FOIND&quot;
			should_restart = true
		}
		else {
			//log.info(&quot;NEW USER URL: ${match[0][1]}&quot;)
			vars.put(&apos;url_command&apos;, match[0][1])
		}
		pattern = /caseParticipantRoleID=(-{0,1}\w+)/
		match = data =~ pattern
		if(!match || match.size() == 0 || match[0].size &lt; 2) {
			log.info &quot;NO PARTICIPANT ROLE ID FOIND&quot;
			should_restart = true
		}
		else {
			//log.info &quot;Role ID: ${match[0][1]}&quot;
			vars.put(&quot;case_part_role_id&quot;, match[0][1])
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;GET USER PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Create Service Plan Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/${__unescapeHtml(${url_command})}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="dojo.preventCache" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${pst_epoch}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dojo.preventCache</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_1}:9443/CuramQA/</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get current time" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def currentTime = System.currentTimeMillis()
//log.info(&quot;Current time: ${currentTime}&quot;)
vars.put(&quot;pst_epoch&quot;, currentTime.toString() + &quot;_1&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3rpu&quot;: &quot;&quot;,
	&quot;__o3cpu&quot;: &quot;&quot;,
	&quot;o3ctx&quot;: &quot;&quot;,
	&quot;__o3synch&quot;: &quot;&quot;,
	&quot;caseID&quot;: &quot;&quot;,
	//&quot;description&quot;: &quot;&quot;,
	&quot;caseParticipantRoleID&quot;: &quot;&quot;,
	//&quot;__o3fwph.ACTION.key.plannedSubGoalKey.key.plannedSubGoalID&quot;: &quot;&quot;,
	//&quot;__o3btn.CTL1&quot;: &quot;&quot;,
	&quot;serviceID&quot;: &quot;0&quot;,
	&quot;applicationNumber&quot;: &quot;0&quot;,
	&quot;__o3fmeta&quot;: &quot;&quot;,
	&quot;__o3fwph.ACTION.details.servicePlanDeliveryDetails.concernRoleID&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /action=&quot;(ServicePlanDelivery_ICCreateAction\.do)&quot;/
		def match = data =~ pattern
		if(!match || match.size() == 0 || match[0].size &lt; 2) {
			log.info &quot;NO OPTION PROVIDED FOR CREATING SERVICE PLAN&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input[^&gt;]*name=\&quot;${key}\&quot;[^&gt;]*?value=\&quot;(.*?)\&quot;[^&gt;]*&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;DELETE SUBGOAL PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Create Service Plan" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/ServicePlanDelivery_ICCreateAction.do?o3modalprev=ServicePlanDelivery_ICCreate</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${o3ctx}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                </elementProp>
                <elementProp name="caseID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${caseID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">caseID</stringProp>
                </elementProp>
                <elementProp name="description" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">description</stringProp>
                </elementProp>
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3rpu}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3cpu}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                </elementProp>
                <elementProp name="caseParticipantRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${caseParticipantRoleID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">caseParticipantRoleID</stringProp>
                </elementProp>
                <elementProp name="serviceID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${serviceID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">serviceID</stringProp>
                </elementProp>
                <elementProp name="applicationNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${applicationNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applicationNumber</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.details$servicePlanDeliveryDetails$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3fwph.ACTION.details.servicePlanDeliveryDetails.concernRoleID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.details$servicePlanDeliveryDetails$concernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.key$servicePlanIntegratedCaseKey$servicePlanIntegratedCaseKey$caseID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${caseID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.key$servicePlanIntegratedCaseKey$servicePlanIntegratedCaseKey$caseID</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">RI30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                </elementProp>
                <elementProp name="__o3id2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                  <stringProp name="Argument.value">2479768156541812736</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                  <stringProp name="Argument.value">SSI2</stringProp>
                </elementProp>
                <elementProp name="__o3id9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id9</stringProp>
                </elementProp>
                <elementProp name="__o3ida" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3ida</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Save</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$servicePlanID&quot;,&quot;Program&quot;,&quot;SERVICE_PLAN_ID&quot;,true],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$transitionalClientTypeCD&quot;,&quot;Transitional Client *&quot;,&quot;TRANSITIONAL_CLIENT_TYPE&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$referIn&quot;,&quot;Referred In&quot;,&quot;MTCU_SP_REFER_IN_CODE&quot;,true],&quot;__o3ida&quot;:[&quot;\/data\/si\/ACTION\/details$dtls$planTemplateID&quot;,&quot;Template&quot;,&quot;PLAN_TEMPLATE_ID&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$providerConcernRoleID&quot;,&quot;Service Delivery Site&quot;,&quot;CONCERN_ROLE_ID&quot;,true],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$userName&quot;,&quot;Owner&quot;,&quot;USER_NAME&quot;,true],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$eChannellIND&quot;,&quot;LBS eChannel Indicator&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$selfServiceInitiated&quot;,&quot;Self Service Initiated *&quot;,&quot;MTCU_SP_SELFSERVICE_INIT_CODE&quot;,false],&quot;__o3id8&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$sfsParticipantInd&quot;,&quot;SFS Participant&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$cliParticipantInd&quot;,&quot;CLI Participant&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id9&quot;:[&quot;\/data\/si\/ACTION\/details$servicePlanDeliveryDetails$sfsInitiativeCD&quot;,&quot;SFS Initiative *&quot;,&quot;MTCU_SFS_INITIATIVE_CODE&quot;,false]} </stringProp>
                </elementProp>
                <elementProp name="o3frame" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3frame</stringProp>
                  <stringProp name="Argument.value">modal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
    def data = prev.getResponseDataAsString()
    if (!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
        should_restart = true
    }
    else {
        def pattern = /Service Plan Home/
        def match = data =~ pattern
        if (!match || match.size() == 0) {
            log.info &quot;NO SERVICE PLAN CREATED&quot;
            should_restart = true
        } else {
            pattern = /Plan Reference Number.*?class=&quot;field.*?&gt;([0-9]+)&lt;\/td&gt;/
            match = data =~ pattern
            if (!match || match.size() == 0 || match[0].size() &lt; 2) {
                log.info &quot;NO SERVICE PLAN REFERENCE NUMBER FOUND&quot;
                should_restart = true
            } else {
                log.info &quot;PLAN REFERENCE NUMBER: ${match[0][1]}&quot;
            }
        }
    }
} catch (Exception ex) {
    should_restart = true
    log.info ex.message
}

if (should_restart) {
    ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
    log.info &quot;CONTENT PAGE: UNEXPECTED RESPONSE - RESTARTING THREAD&quot;
    def failure_message = prev.getResponseDataAsString()
    AssertionResult.setFailureMessage(failure_message)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug - Register Person" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_1.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RS

//vars.put(&apos;PASSWORD&apos;, &apos;password&apos;)
//vars.put(&apos;USER&apos;, &apos;IAAP1549&apos;)
log.info(&quot;USER: ${USER}&quot;)

def uniq_key = RS.random(5, true, true)
vars.put(&apos;T_USER_L_NAME&apos;, &apos;PerfTesteroff_&apos; + uniq_key)
vars.put(&apos;T_USER_F_NAME&apos;, &apos;PerfTester_&apos; + uniq_key)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Person Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/MTCU_searchPersonPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="relatedConcernID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">relatedConcernID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IsCreateCasePageSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IsCreateCasePageSource</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="IsEOSSApplicationPageSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">IsEOSSApplicationPageSource</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="applicationNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">applicationNumber</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Confirm Person Not Already Registered/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO USER SEARCh PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Person" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/MTCU_searchPersonAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">MTCU_searchPersonPage.do?relatedConcernID=null&amp;applicationNumber=0&amp;IsCreateCasePageSource=true&amp;o3ctx=4096&amp;IsEOSSApplicationPageSource=false</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                  <stringProp name="Argument.value">${T_USER_L_NAME}</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                  <stringProp name="Argument.value">${T_USER_F_NAME}</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$referenceNumber&quot;,&quot;Reference Number&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$nicknameInd&quot;,&quot;Search using nicknames&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$forename&quot;,&quot;First Name&quot;,&quot;FIRST_FORENAME&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$apprPartyID&quot;,&quot;APPR Client Party ID&quot;,&quot;REGISTRATION_NUMBER&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$surname&quot;,&quot;Last Name&quot;,&quot;SURNAME&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$sex&quot;,&quot;I Identify As&quot;,&quot;GENDER_CODE&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$dateOfBirth&quot;,&quot;Date of Birth&quot;,&quot;CURAM_DATE&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">MTCU_searchPerson</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Search Results \(Number of Items: 0 out of 0\)/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Register Person Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Person_registerPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="forename" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${T_USER_F_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">forename</stringProp>
                </elementProp>
                <elementProp name="surname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">surname</stringProp>
                  <stringProp name="Argument.value">${T_USER_L_NAME}</stringProp>
                </elementProp>
                <elementProp name="sex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sex</stringProp>
                </elementProp>
                <elementProp name="dateOfBirth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dateOfBirth</stringProp>
                </elementProp>
                <elementProp name="apprPartyID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">apprPartyID</stringProp>
                </elementProp>
                <elementProp name="applicationNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applicationNumber</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                </elementProp>
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                  <stringProp name="Argument.value">MTCU_searchPersonPage.do?o3prv=MTCU_searchPerson&amp;o3ctx=4099</stringProp>
                </elementProp>
                <elementProp name="o3nocache" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3nocache</stringProp>
                  <stringProp name="Argument.value">${pst_epoch}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_1}:9443/CuramQA/</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get current time" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def currentTime = System.currentTimeMillis()
//log.info(&quot;Current time: ${currentTime}&quot;)
vars.put(&quot;pst_epoch&quot;, currentTime.toString() + &quot;_0&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;,
	&quot;__o3rpu&quot;: &quot;&quot;,
	&quot;__o3cpu&quot;: &quot;&quot;,
	&quot;__o3fwph.ACTION.personDetails.personRegistrationDetails.basicFederalTax&quot;: &quot;&quot;,
	&quot;__o3fwph.ACTION.personDetails.personRegistrationDetails.basicProvincialTax&quot; : &quot;&quot;,
	&quot;o3ctx&quot; : &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Client Self Identification/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO REGISTER USER PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;REGISTER USER PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Register Person" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Person_registerAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${o3ctx}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                </elementProp>
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${__o3rpu}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${__o3cpu}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                </elementProp>
                <elementProp name="relatedConcernID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">relatedConcernID</stringProp>
                </elementProp>
                <elementProp name="forename" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${T_USER_F_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">forename</stringProp>
                </elementProp>
                <elementProp name="sex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sex</stringProp>
                </elementProp>
                <elementProp name="dateOfBirth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dateOfBirth</stringProp>
                </elementProp>
                <elementProp name="apprPartyID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">apprPartyID</stringProp>
                </elementProp>
                <elementProp name="surname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">surname</stringProp>
                  <stringProp name="Argument.value">${T_USER_L_NAME}</stringProp>
                </elementProp>
                <elementProp name="addressTextboxIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">addressTextboxIds</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.personDetails$personRegistrationDetails$samsReference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.personDetails$personRegistrationDetails$samsReference</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.personDetails$personRegistrationDetails$basicFederalTax" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.personDetails$personRegistrationDetails$basicFederalTax</stringProp>
                  <stringProp name="Argument.value">${__o3fwph.ACTION.personDetails.personRegistrationDetails.basicFederalTax}</stringProp>
                </elementProp>
                <elementProp name="__o3fwph.ACTION.personDetails$personRegistrationDetails$basicProvincialTax" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwph.ACTION.personDetails$personRegistrationDetails$basicProvincialTax</stringProp>
                  <stringProp name="Argument.value">${__o3fwph.ACTION.personDetails.personRegistrationDetails.basicProvincialTax}</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Register</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${T_USER_F_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                </elementProp>
                <elementProp name="__o3id2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2</stringProp>
                  <stringProp name="Argument.value">${T_USER_L_NAME}</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                </elementProp>
                <elementProp name="__o3id7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id7</stringProp>
                </elementProp>
                <elementProp name="__o3id8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id8</stringProp>
                  <stringProp name="Argument.value">SX1</stringProp>
                </elementProp>
                <elementProp name="__o3id9" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id9</stringProp>
                  <stringProp name="Argument.value">01/01/1990</stringProp>
                </elementProp>
                <elementProp name="__o3idb" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3idb</stringProp>
                </elementProp>
                <elementProp name="__o3idc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3idc</stringProp>
                  <stringProp name="Argument.value">18/10/2023</stringProp>
                </elementProp>
                <elementProp name="__o3idd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3idd</stringProp>
                </elementProp>
                <elementProp name="__o3ide" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3ide</stringProp>
                  <stringProp name="Argument.value">CITIZEN</stringProp>
                </elementProp>
                <elementProp name="__o3idf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3idf</stringProp>
                </elementProp>
                <elementProp name="__o3id10" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id10</stringProp>
                  <stringProp name="Argument.value">MTCUIS03</stringProp>
                </elementProp>
                <elementProp name="__o3id11" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id11</stringProp>
                </elementProp>
                <elementProp name="__o3id12" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id12</stringProp>
                  <stringProp name="Argument.value">LN1</stringProp>
                </elementProp>
                <elementProp name="__o3id13" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id13</stringProp>
                  <stringProp name="Argument.value">MS4</stringProp>
                </elementProp>
                <elementProp name="__o3id1d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1d</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                </elementProp>
                <elementProp name="__o3id1e" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1e</stringProp>
                  <stringProp name="Argument.value">M5N2M4</stringProp>
                </elementProp>
                <elementProp name="__o3id1f" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1f</stringProp>
                  <stringProp name="Argument.value">1|0|CANADIAN|US|1|0| </stringProp>
                </elementProp>
                <elementProp name="__o3id20" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id20</stringProp>
                </elementProp>
                <elementProp name="__o3id21" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id21</stringProp>
                  <stringProp name="Argument.value">35 GILGORM RD</stringProp>
                </elementProp>
                <elementProp name="__o3id22" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id22</stringProp>
                </elementProp>
                <elementProp name="__o3id23" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id23</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                </elementProp>
                <elementProp name="__o3id24" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id24</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                </elementProp>
                <elementProp name="__o3id25" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id25</stringProp>
                  <stringProp name="Argument.value">M5N2M4</stringProp>
                </elementProp>
                <elementProp name="__o3id27" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id27</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                </elementProp>
                <elementProp name="__o3id28" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id28</stringProp>
                </elementProp>
                <elementProp name="__o3id29" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id29</stringProp>
                  <stringProp name="Argument.value">1|0|CANADIAN|US|1|0|</stringProp>
                </elementProp>
                <elementProp name="__o3id2a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2a</stringProp>
                </elementProp>
                <elementProp name="__o3id2b" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2b</stringProp>
                </elementProp>
                <elementProp name="__o3id2c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2c</stringProp>
                </elementProp>
                <elementProp name="__o3id2d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2d</stringProp>
                </elementProp>
                <elementProp name="__o3id2e" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2e</stringProp>
                  <stringProp name="Argument.value">EMPTY</stringProp>
                </elementProp>
                <elementProp name="__o3id2f" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2f</stringProp>
                </elementProp>
                <elementProp name="__o3id30" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id30</stringProp>
                </elementProp>
                <elementProp name="__o3id32" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id32</stringProp>
                </elementProp>
                <elementProp name="__o3id34" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id34</stringProp>
                </elementProp>
                <elementProp name="__o3id36" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id36</stringProp>
                </elementProp>
                <elementProp name="__o3id37" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id37</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id11&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$socialSecurityNumber&quot;,&quot;Social Insurance Number&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id10&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$immigratedToCanada&quot;,&quot;Immigrated to Canada?&quot;,&quot;MTCU_IMMIGRANT_STATUS&quot;,true],&quot;__o3id2b&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[ADD2]&quot;,&quot;Street 1&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id2a&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[ADD1]&quot;,&quot;Apt\/Suite&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id35&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$tty3&quot;,&quot;Fax TTY&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id34&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$fullPhoneNumber3&quot;,&quot;Fax Number&quot;,&quot;MTCU_PHONE_NUMBER&quot;,false],&quot;__o3id37&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$servicePlanTypeCd&quot;,&quot;Interested in Program&quot;,&quot;SERVICE_PLAN_TYPE_CODE&quot;,false],&quot;__o3id36&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$emailAddressDtls$emailAddress&quot;,&quot;Email Address&quot;,&quot;EMAIL_ADDRESS&quot;,false],&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$firstForename&quot;,&quot;First Name&quot;,&quot;FIRST_FORENAME&quot;,true],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$surname&quot;,&quot;Last Name&quot;,&quot;SURNAME&quot;,true],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$otherForename&quot;,&quot;Middle Name&quot;,&quot;OTHER_FORENAME&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$initials&quot;,&quot;Initials &quot;,&quot;PERSON_INITIALS&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$nameSuffix&quot;,&quot;Suffix&quot;,&quot;PERSON_SUFFIX_CODE&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$motherBirthSurname&quot;,&quot;Mother\u2019s Birth Last Name&quot;,&quot;MOTHER_BIRTH_SURNAME&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$birthName&quot;,&quot;Birth Last Name&quot;,&quot;PERSON_BIRTH_NAME&quot;,false],&quot;__o3id8&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$sex&quot;,&quot;I Identify As&quot;,&quot;GENDER_CODE&quot;,true],&quot;__o3id2d&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[CITY]&quot;,&quot;City&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$title&quot;,&quot;Title&quot;,&quot;PERSON_TITLE_CODE&quot;,false],&quot;__o3id2c&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[ADD3]&quot;,&quot;Street 2&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id2f&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[POSTCODE]&quot;,&quot;Postal\/Zip Code&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id9&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$dateOfBirth&quot;,&quot;Date of Birth&quot;,&quot;CURAM_DATE&quot;,true],&quot;__o3id2e&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/element[PROV]&quot;,&quot;Province\/State&quot;,&quot;_o3_AddressProvinceStateType&quot;,false],&quot;__o3id1a&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$visibleMinorityInd&quot;,&quot;Racialized Person&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id24&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[PROV]&quot;,&quot;Province\/State&quot;,&quot;_o3_AddressProvinceStateType&quot;,true],&quot;__o3id23&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[CITY]&quot;,&quot;City&quot;,&quot;SVR_STRING&quot;,true],&quot;__o3id26&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressIndicator&quot;,&quot;Same as primary &quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id25&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[POSTCODE]&quot;,&quot;Postal\/Zip Code&quot;,&quot;SVR_STRING&quot;,true],&quot;__o3id28&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$tempSecondaryPostcode&quot;,&quot;Postal Code Lookup&quot;,&quot;TEMP_STRING&quot;,false],&quot;__o3id27&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$secondaryPostcodeCountry&quot;,&quot;Country&quot;,&quot;POSTCODE_COUNTRYCODE&quot;,false],&quot;__o3id29&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$mailingAddressData\/header&quot;,&quot;&quot;,&quot;ADDRESS_DATA&quot;,false],&quot;__o3id31&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$tty1&quot;,&quot;Primary TTY&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id30&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$fullPhoneNumber1&quot;,&quot;Primary Phone Number&quot;,&quot;MTCU_PHONE_NUMBER&quot;,false],&quot;__o3id33&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$tty2&quot;,&quot;Alternate TTY&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id32&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$phoneFields$fullPhoneNumber2&quot;,&quot;Alternate Phone Number&quot;,&quot;MTCU_PHONE_NUMBER&quot;,false],&quot;__o3id1c&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$disabilityInd&quot;,&quot;Person with Disability&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1b&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$aborigMetis&quot;,&quot;M\u00e9tis&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1e&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$tempPrimaryPostcode&quot;,&quot;Postal Code Lookup&quot;,&quot;TEMP_STRING&quot;,false],&quot;__o3id1d&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$primaryPostcodeCountry&quot;,&quot;Country&quot;,&quot;POSTCODE_COUNTRYCODE&quot;,true],&quot;__o3id1f&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/header&quot;,&quot;&quot;,&quot;ADDRESS_DATA&quot;,false],&quot;__o3idb&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$birthCountry&quot;,&quot;Country of Birth&quot;,&quot;COUNTRY_CODE&quot;,false],&quot;__o3ida&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$genderOtherDesc&quot;,&quot;Other Description&quot;,&quot;BATCH_GROUP_NAME&quot;,false],&quot;__o3idd&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$dateArrivedInCanada&quot;,&quot;Date Arrived in Canada&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3idc&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$registrationDate&quot;,&quot;Registration Date&quot;,&quot;CURAM_DATE&quot;,true],&quot;__o3idf&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$prefCommMethod&quot;,&quot;Preferred Communication&quot;,&quot;COMMUNICATION_METHOD_CODE&quot;,false],&quot;__o3ide&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$statusInCanadaCode&quot;,&quot;Status in Canada&quot;,&quot;MTCU_STATUS_IN_CANADA_CODE&quot;,true],&quot;__o3id13&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$currentMaritalStatus&quot;,&quot;Marital Status&quot;,&quot;MARITAL_STATUS_CODE&quot;,true],&quot;__o3id12&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$preferredLanguage&quot;,&quot;Preferred Language&quot;,&quot;LANGUAGE_CODE&quot;,true],&quot;__o3id15&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$deafblind&quot;,&quot;Deafblind&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id14&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$newComerInd&quot;,&quot;Newcomer&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id17&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$aborigInuit&quot;,&quot;Inuit&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id16&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$francophoneInd&quot;,&quot;Francophone&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id19&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$aborigFirstNations&quot;,&quot;First Nations&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id18&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$deafHearingImpairedInd&quot;,&quot;Deaf&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id20&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[ADD1]&quot;,&quot;Apt\/Suite&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id22&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[ADD3]&quot;,&quot;Street 2&quot;,&quot;SVR_STRING&quot;,false],&quot;__o3id21&quot;:[&quot;\/data\/si\/ACTION\/personDetails$personRegistrationDetails$addressData\/element[ADD2]&quot;,&quot;Street 1&quot;,&quot;SVR_STRING&quot;,true]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">Person_register</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
    def data = prev.getResponseDataAsString()
    if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
        should_restart = true
    }
    else {
        def pattern = /Person Registration Completed/
        def match = data =~ pattern
        if(!match || match.size() == 0) {
            log.info &quot;NO PERSON REGISTERED&quot;
            should_restart = true
        } else {
            pattern = /The person reference number is &lt;span class=&quot;separator&quot;&gt; &lt;\/span&gt;(\d+)/
            match = data =~ pattern
            if(match &amp;&amp; match.size() &gt; 0) {
                def referenceNumber = match[0][1]
                log.info &quot;PERSON REFERENCE NUMBER: ${referenceNumber}&quot;
                vars.put(&quot;person_ref_num&quot;, referenceNumber)
            } else {
                log.info &quot;REFERENCE NUMBER NOT FOUND&quot;
                should_restart = true
            }
        }
    }
} catch (Exception ex) {
    should_restart = true
    log.info ex.message
}

if(should_restart) {
    ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
    log.info &quot;PERSON REGISTRATION PAGE: UNEXPECTED RESPONSE - RESTARTING THREAD&quot;
    def failure_message = prev.getResponseDataAsString()
    AssertionResult.setFailureMessage(failure_message)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug - Search Person" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_2.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;USER: ${USER}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Person Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Person_searchPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Search Criteria/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO USER SEARCh PAGE LOADED&quot;
			should_restart = true
		}
		else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				}
				else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Person" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Person_searchAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">Person_searchPage.do?o3ctx=4096</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                  <stringProp name="Argument.value">Khan</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$referenceNumber&quot;,&quot;Reference Number&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$forename&quot;,&quot;First Name&quot;,&quot;FIRST_FORENAME&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$surname&quot;,&quot;Last Name&quot;,&quot;SURNAME&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$dateOfBirth&quot;,&quot;Date of Birth&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$nicknameInd&quot;,&quot;Search using nicknames&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$apprPartyID&quot;,&quot;APPR Client Party ID&quot;,&quot;REGISTRATION_NUMBER&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$sex&quot;,&quot;I Identify As&quot;,&quot;GENDER_CODE&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/key$personSearchKey$samsMemberIDInd&quot;,&quot;Display cases with SAMS Member ID&quot;,&quot;CURAM_INDICATOR&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">Person_search</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Results \(Number of Items: 50 out of ([0-9]+)\)/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
			log.info &quot;FOUND: ${match[0][1]} persons&quot;
		  }
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug - Search Case" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_2.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;USER: ${USER}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Case Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Case_searchPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Search Criteria/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO CASE SEARCH PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input[^&gt;]*name=\&quot;${key}\&quot;[^&gt;]*?value=\&quot;(.*?)\&quot;[^&gt;]*&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Case" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/Case_searchAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">Case_searchPage.do?o3ctx=4096</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$concernRoleID</stringProp>
                  <stringProp name="Argument.value">Client Name</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$concernRoleID_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$concernRoleID_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$concernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$concernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                  <stringProp name="Argument.value">CT5</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$type</stringProp>
                  <stringProp name="Argument.value">Category &amp; Program</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$type_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$type_desc</stringProp>
                  <stringProp name="Argument.value">Employment Ontario</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$type</stringProp>
                  <stringProp name="Argument.value">PC1000</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                  <stringProp name="Argument.value">01/01/2022</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                  <stringProp name="Argument.value">CS4</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$caseOwnerUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$caseOwnerUserName</stringProp>
                  <stringProp name="Argument.value">Owner</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$caseOwnerUserName_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$caseOwnerUserName_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$caseOwnerUserName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$caseOwnerUserName</stringProp>
                </elementProp>
                <elementProp name="__o3id7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id7</stringProp>
                  <stringProp name="Argument.value">01/01/2023</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$employerConcernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$employerConcernRoleID</stringProp>
                  <stringProp name="Argument.value">Employer</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$employerConcernRoleID_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$employerConcernRoleID_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$employerConcernRoleID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$employerConcernRoleID</stringProp>
                </elementProp>
                <elementProp name="__o3fwl.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">Service Delivery Site</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwl.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch</stringProp>
                </elementProp>
                <elementProp name="__o3.ACTION$key$caseSearchCriteria$providerConcernRoleIDSearch_desc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3.ACTION$key$caseSearchCriteria$providerConcernRoleIDSearch_desc</stringProp>
                </elementProp>
                <elementProp name="__o3fwp.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fwp.ACTION.key$caseSearchCriteria$providerConcernRoleIDSearch</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$caseReference&quot;,&quot;Case Reference&quot;,&quot;CASE_REFERENCE&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$samsMemberIDInd&quot;,&quot;Display cases with SAMS Member ID&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$searchWithServicePlans&quot;,&quot;Display cases with Service Plans&quot;,&quot;CURAM_INDICATOR&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$primaryAlternateID&quot;,&quot;Client Reference&quot;,&quot;ALTERNATE_ID&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$category&quot;,&quot;Category &amp; Program&quot;,&quot;CASE_CATEGORY&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$status&quot;,&quot;Status&quot;,&quot;CASE_STATUS_CODE&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$startDate&quot;,&quot;Start Date&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/key$caseSearchCriteria$endDate&quot;,&quot;End Date&quot;,&quot;CURAM_DATE&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">Case_search</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Results \(Number of Items: 50 out of ([0-9]+)\)/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
			log.info &quot;FOUND: ${match[0][1]} cases&quot;
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug - Search Payment" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">creds/cams_creds_2.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">USER,PASSWORD</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/j_security_check</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="j_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="j_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">j_username</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;USER: ${USER}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || data.contains(&quot;Unsuccessful Login&quot;)) {
		log.info &quot;RESPONSE CODE IS NOT 200&quot;
		log.info &quot;RESPONSE CODE: ${prev.getResponseCode()}&quot;
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGIN FAILED - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Load Payment Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/MTCUPayment_searchPage.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4096</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Criteria/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO PAYMENT SEARCh PAGE LOADED&quot;
			should_restart = true
		} else {
			params.keySet().each { key -&gt;
				pattern = &quot;&lt;input .*name=\&quot;${key}\&quot;.*?value=\&quot;(.*?)\&quot;.*?/&gt;&quot;
				match = data =~ pattern
				if(!match || match.size() == 0 || match[0].size &lt; 2) {
					log.info &quot;NO INPUT FOUND: ${key}&quot;
					should_restart = true
				} else {
					//log.info &quot;$key: ${match[0][1]}&quot;
					vars.put(key, match[0][1])
				}
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;PAYMENT SEARCH PAGE: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Payment" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">Curam/en/MTCUPayment_searchAction.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__o3rpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3rpu</stringProp>
                </elementProp>
                <elementProp name="__o3cpu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3cpu</stringProp>
                  <stringProp name="Argument.value">MTCUPayment_searchPage.do?o3ctx=4096</stringProp>
                </elementProp>
                <elementProp name="o3ctx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3ctx</stringProp>
                  <stringProp name="Argument.value">4099</stringProp>
                </elementProp>
                <elementProp name="__o3synch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3synch</stringProp>
                  <stringProp name="Argument.value">${__o3synch}</stringProp>
                </elementProp>
                <elementProp name="__o3id0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id0</stringProp>
                </elementProp>
                <elementProp name="__o3id1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id1</stringProp>
                </elementProp>
                <elementProp name="__o3id2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id2</stringProp>
                </elementProp>
                <elementProp name="__o3id3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id3</stringProp>
                  <stringProp name="Argument.value">29/06/2018</stringProp>
                </elementProp>
                <elementProp name="__o3id4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id4</stringProp>
                  <stringProp name="Argument.value">02/04/2018</stringProp>
                </elementProp>
                <elementProp name="__o3id5" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id5</stringProp>
                </elementProp>
                <elementProp name="__o3id6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id6</stringProp>
                </elementProp>
                <elementProp name="__o3id7" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id7</stringProp>
                </elementProp>
                <elementProp name="__o3id8" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3id8</stringProp>
                </elementProp>
                <elementProp name="__o3btn.CTL1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3btn.CTL1</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                </elementProp>
                <elementProp name="__o3fmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__o3fmeta</stringProp>
                  <stringProp name="Argument.value">{&quot;__o3id0&quot;:[&quot;\/data\/si\/ACTION\/key$chequeNumber&quot;,&quot;Cheque \/ EFT Number&quot;,&quot;REFERENCE_NUMBER&quot;,false],&quot;__o3id2&quot;:[&quot;\/data\/si\/ACTION\/key$processedDateFrom&quot;,&quot;Processed Date From&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id1&quot;:[&quot;\/data\/si\/ACTION\/key$processedDateTo&quot;,&quot;Processed Date To&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id4&quot;:[&quot;\/data\/si\/ACTION\/key$issueDateFrom&quot;,&quot;Issue Date From&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id3&quot;:[&quot;\/data\/si\/ACTION\/key$issueDateTo&quot;,&quot;Issue Date To&quot;,&quot;CURAM_DATE&quot;,false],&quot;__o3id6&quot;:[&quot;\/data\/si\/ACTION\/key$status&quot;,&quot;Status&quot;,&quot;PMT_RECONCILIATION_STATUS_CODE&quot;,false],&quot;__o3id5&quot;:[&quot;\/data\/si\/ACTION\/key$accountNumber&quot;,&quot;Bank Account Number&quot;,&quot;BANK_ACCOUNT_NUMBER&quot;,false],&quot;__o3id8&quot;:[&quot;\/data\/si\/ACTION\/key$dtlRecordNum&quot;,&quot;Ministry Reference Number&quot;,&quot;INTERNAL_ID&quot;,false],&quot;__o3id7&quot;:[&quot;\/data\/si\/ACTION\/key$invoiceNumber&quot;,&quot;Invoice Number&quot;,&quot;BANK_ACCOUNT_NAME&quot;,false]}</stringProp>
                </elementProp>
                <elementProp name="o3prv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">o3prv</stringProp>
                  <stringProp name="Argument.value">MTCUPayment_search</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def params = [
	&quot;__o3synch&quot;: &quot;&quot;
]
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Search Results \(Number of Items: 50 out of ([0-9]+)\)/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;NO SEARCH USER PERFORMED&quot;
			should_restart = true
		} else {
			log.info &quot;FOUND: ${match[0][1]} payments&quot;
		  }
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;USER SEARCH: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
