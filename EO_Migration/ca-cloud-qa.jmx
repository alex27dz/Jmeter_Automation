<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Common Assessment" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;113&quot;, &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="CA_URL" elementType="Argument">
            <stringProp name="Argument.name">CA_URL</stringProp>
            <stringProp name="Argument.value">intra.qa.ops.eois.labour.gov.on.ca</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIN_FILE_NAME" elementType="Argument">
            <stringProp name="Argument.name">SIN_FILE_NAME</stringProp>
            <stringProp name="Argument.value">${__P(sin_file,null)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">creds/cloud-qa_ca_creds_1.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">USER,PASSWORD</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Common Assessment search only" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="218402559">
            <stringProp name="836540540">${__P(users_so,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="296857239">${__P(startup_time,1)}</stringProp>
            <stringProp name="-613420217">${__P(run_time,120)}</stringProp>
            <stringProp name="1722">60</stringProp>
          </collectionProp>
          <collectionProp name="-230769790">
            <stringProp name="-2078287313">${__P(users_so_2,2)}</stringProp>
            <stringProp name="-702913103">${__P(so_stage2_delay,30)}</stringProp>
            <stringProp name="-1021974198">${__P(startup_time_2,1)}</stringProp>
            <stringProp name="500128247">${__P(run_time_2,60)}</stringProp>
            <stringProp name="1722">60</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1600</stringProp>
          <stringProp name="RandomTimer.range">1400.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication" enabled="true">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;${PASSWORD}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def credentials = [
	[user: &apos;IAAP105046&apos;, password: &apos;IAAP105046&apos;],
	[user: &apos;IAAP109980&apos;, password: &apos;IAAP109980&apos;],
	[user: &apos;IAAP108858&apos;, password: &apos;IAAP108858&apos;],
	[user: &apos;IAAP112449&apos;, password: &apos;IAAP112449&apos;]
]

Random rnd = new Random();
def idx = rnd.nextInt(credentials.size())

vars.put(&apos;USER&apos;, credentials[idx].user)
vars.put(&apos;PASSWORD&apos;, credentials[idx].password)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.token)) {
		should_restart = true
		log.info data.toString()
	}
	else {
		vars.put(&apos;auth_token&apos;, data.token)
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;AUTHENTICATION FAILED&quot;
	AssertionResult.setFailureMessage(prev.getResponseDataAsString());
     AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Common Request Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Allowed operations (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/operations</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Search for a Client (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/search/locale/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;dateOfBirth&quot;:null,&quot;city&quot;:null,&quot;sin&quot;:&quot;${sin_number}&quot;,&quot;postalCode&quot;:null,&quot;phoneNumber&quot;:null,&quot;email&quot;:null,&quot;clientId&quot;:null,&quot;caId&quot;:null,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def sin_numbers = [
	&apos;512204496&apos;,
	&apos;240624197&apos;,
	&apos;277366589&apos;,
	&apos;504541095&apos;,
	&apos;643859770&apos;,
	&apos;237566617&apos;,
	&apos;704019074&apos;,
	&apos;712820281&apos;,
	&apos;390422046&apos;,
	&apos;745406694&apos;,
	&apos;527739916&apos;,
	&apos;730508223&apos;
]

def rnd = new Random()
def idx = rnd.nextInt(sin_numbers.size())

vars.put(&apos;sin_number&apos;, sin_numbers[idx])</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify SIN found" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.statusMessage?.contains(&quot;Success&quot;) &amp;&amp;  data?.statusCode == 200)) {
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	//log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;EO - INCOMPATIBLE SIN - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(prev.getResponseDataAsString());
     AssertionResult.setFailure(true);
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Common Assessment full flow" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1882400138">
            <stringProp name="-1612152922">${__P(userd_all,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="296858200">${__P(startup_time,2)}</stringProp>
            <stringProp name="-613420217">${__P(run_time,120)}</stringProp>
            <stringProp name="1722">60</stringProp>
          </collectionProp>
          <collectionProp name="-214452297">
            <stringProp name="-1630626087">${__P(userd_all_2,2)}</stringProp>
            <stringProp name="-1024911240">${__P(all_stage2_delay,30)}</stringProp>
            <stringProp name="-1021973237">${__P(startup_time_2,2)}</stringProp>
            <stringProp name="500128247">${__P(run_time_2,60)}</stringProp>
            <stringProp name="1722">60</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1600</stringProp>
          <stringProp name="RandomTimer.range">1400.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication" enabled="true">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;${PASSWORD}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def credentials = [
	[user: &apos;IAAP105046&apos;, password: &apos;IAAP105046&apos;],
	[user: &apos;IAAP109980&apos;, password: &apos;IAAP109980&apos;],
	[user: &apos;IAAP108858&apos;, password: &apos;IAAP108858&apos;],
	[user: &apos;IAAP112449&apos;, password: &apos;IAAP112449&apos;]
]

Random rnd = new Random();
def idx = rnd.nextInt(credentials.size())

vars.put(&apos;USER&apos;, credentials[idx].user)
vars.put(&apos;PASSWORD&apos;, credentials[idx].password)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.token)) {
		should_restart = true
		log.info data.toString()
	}
	else {
		vars.put(&apos;auth_token&apos;, data.token)
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;AUTHENTICATION FAILED&quot;
	AssertionResult.setFailureMessage(prev.getResponseDataAsString());
     AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Common Request Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate Custom SIN" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Random;
import java.io.File;
import org.apache.jmeter.services.FileServer

def getCheckDigit(List digits) {
   def sum = digits.withIndex()
       .collect { d, i -&gt;
           i % 2 == 0 ? d : d * 2
       }
       .collect { d -&gt;
           d.intdiv(10) + (d % 10)
       }
       .sum()
   
  return (sum % 10) ? 10 - (sum % 10) : 0
}

def generate() {
   def random = new Random(System.currentTimeMillis());
   def digits = [random.nextInt(7) + 1]
   for(def i : (1..7)) {
       digits.add(random.nextInt(10))
   }
   
   digits.add(getCheckDigit(digits))
   def result = digits.collect { d -&gt;
       d.toString()
   }
   .join(&apos;&apos;)
}

def old_sins = []
if(vars.get(&quot;SIN_FILE_NAME&quot;)) {
	try {
		def path = FileServer.getFileServer().getBaseDir()
		File file = new File(&quot;$path/${SIN_FILE_NAME}&quot;)
		file.eachLine { line -&gt;
			old_sins.add(line.trim())
		}
	} catch(Exception ex) {
		log.info &quot;Unable to read file: ${ex.message}&quot;
	}
}

do {
	String new_sin = generate()
	//String new_sin = &quot;518648126&quot;
	
	if(!old_sins.contains(new_sin)) {
		vars.put(&apos;sin_number&apos;, new_sin)
		break
	}
} while(true)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Allowed operations (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/operations</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Search for a Client (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/search/locale/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;dateOfBirth&quot;:null,&quot;city&quot;:null,&quot;sin&quot;:&quot;${sin_number}&quot;,&quot;postalCode&quot;:null,&quot;phoneNumber&quot;:null,&quot;email&quot;:null,&quot;clientId&quot;:null,&quot;caId&quot;:null,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify SIN not found" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.statusMessage?.contains(&quot;No record found.&quot;) || data?.statusMessage?.contains(&quot;No client information found&quot;))) {
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	//log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;EO - INCOMPATIBLE SIN - RESTARTING TREAD&quot;
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 1 (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Validation Rules (GET)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question/validationrules/locale/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 2 (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;moduleId&quot;:10064,&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Save User Answers (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/save</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;caId&quot;:null,&quot;templateId&quot;:null,&quot;caClientId&quot;:null,&quot;crClientId&quot;:&quot;&quot;,&quot;currentModuleId&quot;:10064,&quot;sourceReferenceId&quot;:null,&quot;sourceSystem&quot;:null,&quot;complete&quot;:true,&quot;referred&quot;:false,&quot;questionnaireResponse&quot;:[{&quot;responseId&quot;:0,&quot;questionId&quot;:10800,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA113&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10801,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA113_1&quot;,&quot;value&quot;:&quot;true&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10001,&quot;questionAnswerType&quot;:7,&quot;questionCode&quot;:&quot;CA1&quot;,&quot;value&quot;:&quot;${sin_number}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10776,&quot;questionAnswerType&quot;:12,&quot;questionCode&quot;:&quot;CA1-1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10010,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10011,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_1&quot;,&quot;value&quot;:&quot;${first_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10012,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_2&quot;,&quot;value&quot;:&quot;${middle_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10013,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_3&quot;,&quot;value&quot;:&quot;${last_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10009,&quot;questionAnswerType&quot;:3,&quot;questionCode&quot;:&quot;CA3&quot;,&quot;value&quot;:&quot;1975-04-12&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10002,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA4&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10008,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_6&quot;,&quot;value&quot;:&quot;M2N3M1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10003,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10004,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_2&quot;,&quot;value&quot;:&quot;1200&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10005,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_3&quot;,&quot;value&quot;:&quot;Main&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10006,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_4&quot;,&quot;value&quot;:&quot;Toronto&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10007,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA4_5&quot;,&quot;value&quot;:&quot;CA_G10_ON&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10617,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA4_7&quot;,&quot;value&quot;:&quot;CA4_7_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10618,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA5&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10619,&quot;questionAnswerType&quot;:8,&quot;questionCode&quot;:&quot;CA5_1&quot;,&quot;value&quot;:&quot;${phone}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10620,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA5_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10622,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA5_5&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10621,&quot;questionAnswerType&quot;:8,&quot;questionCode&quot;:&quot;CA5_3&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10014,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA5_4&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10623,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA6&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10624,&quot;questionAnswerType&quot;:9,&quot;questionCode&quot;:&quot;CA6_1&quot;,&quot;value&quot;:&quot;${email}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10625,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA6_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10626,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA7&quot;,&quot;value&quot;:&quot;CA7_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10931,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA8&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10932,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA8_1&quot;,&quot;value&quot;:&quot;CA&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10933,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA8_2&quot;,&quot;value&quot;:&quot;false&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10930,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA10&quot;,&quot;value&quot;:&quot;CA10_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10954,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA10_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10934,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA108&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10935,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA110&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10630,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA9&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10692,&quot;questionAnswerType&quot;:3,&quot;questionCode&quot;:&quot;CA9_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10693,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA9_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10809,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA31&quot;,&quot;value&quot;:&quot;CA31_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10604,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA24&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10605,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA24_1&quot;,&quot;value&quot;:&quot;2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10606,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA24_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10628,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA11&quot;,&quot;value&quot;:&quot;CA11_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10016,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA11_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10632,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA12&quot;,&quot;value&quot;:&quot;CA12_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10927,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA14&quot;,&quot;value&quot;:&quot;CA12_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10956,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA13&quot;,&quot;value&quot;:&quot;CA13_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10957,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA137&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10958,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA137_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10959,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA137_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10635,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA15&quot;,&quot;value&quot;:&quot;CA15_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10019,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA15_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10810,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA32&quot;,&quot;value&quot;:&quot;CA32_OP_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10713,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA33&quot;,&quot;value&quot;:&quot;1998&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10696,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA34&quot;,&quot;value&quot;:&quot;CA34_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10694,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA27&quot;,&quot;value&quot;:&quot;CA27_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10914,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA51&quot;,&quot;value&quot;:&quot;CA_CA51_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10915,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA52&quot;,&quot;value&quot;:&quot;CA_CA52_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10916,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA53&quot;,&quot;value&quot;:&quot;CA_CA53_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10917,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA54&quot;,&quot;value&quot;:&quot;CA_CA54_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10918,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA55&quot;,&quot;value&quot;:&quot;CA_CA55_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10919,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA95&quot;,&quot;value&quot;:&quot;CA_CA95_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10920,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA96&quot;,&quot;value&quot;:&quot;CA_CA96_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10921,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA104&quot;,&quot;value&quot;:&quot;CA_CA104_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10922,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA105&quot;,&quot;value&quot;:&quot;CA_CA105_5&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10923,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA106&quot;,&quot;value&quot;:&quot;CA_CA106_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10862,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA120&quot;,&quot;value&quot;:&quot;CA120_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10710,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA28&quot;,&quot;value&quot;:&quot;CA28_OP_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10607,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA25&quot;,&quot;value&quot;:&quot;CA25_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10643,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA26&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10811,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA20&quot;,&quot;value&quot;:&quot;CA20_OP_6&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10812,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA21&quot;,&quot;value&quot;:&quot;1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10813,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA22&quot;,&quot;value&quot;:&quot;CA22_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10814,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA23&quot;,&quot;value&quot;:&quot;CA23_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10020,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA101&quot;,&quot;value&quot;:&quot;CA_G21_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10021,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA102&quot;,&quot;value&quot;:&quot;CA_G21_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10602,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA19&quot;,&quot;value&quot;:&quot;CA19_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10863,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA121&quot;,&quot;value&quot;:&quot;CA121_OP_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10955,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA136&quot;,&quot;value&quot;:&quot;CA136_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10860,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA111&quot;,&quot;value&quot;:&quot;CA111_OP_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10861,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA112&quot;,&quot;value&quot;:&quot;CA111_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10840,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;SLD01&quot;,&quot;value&quot;:&quot;SLD01_OP_2&quot;}],&quot;save&quot;:false,&quot;searchSave&quot;:false,&quot;previousSave&quot;:true,&quot;currentModuleComplete&quot;:true,&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Custom Data" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RSU

vars.put(&apos;first_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;last_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;middle_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;email&apos;, &quot;${RSU.randomAlphabetic(6)}@${RSU.randomAlphabetic(6)}.com&quot;)
vars.put(&apos;phone&apos;, &quot;6476${RSU.randomNumeric(6)}&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data.statusCode != 200) 
			|| !data.statusMessage.contains(&quot;saved successfully&quot;)
			|| !data.data.caId
			|| !data.data.caClientId) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
	else {
		vars.put(&quot;assessment_id&quot;, data.data.caId)
		vars.put(&quot;client_id&quot;, data.data.caClientId)
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SAVE - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 3 (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/edit</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;moduleId&quot;:10063,&quot;localeId&quot;:&quot;en&quot;,&quot;systemId&quot;:&quot;${assessment_id}&quot;,&quot;userId&quot;:&quot;${USER}&quot;,&quot;summaryPage&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Cancel Assessment Rules (GET)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/cancel/question/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Save User Answers (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/save</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;caId&quot;: &quot;${assessment_id}&quot;,&#xd;
    &quot;templateId&quot;: null,&#xd;
    &quot;caClientId&quot;: &quot;${client_id}&quot;,&#xd;
    &quot;crClientId&quot;: &quot;&quot;,&#xd;
    &quot;currentModuleId&quot;: 10063,&#xd;
    &quot;sourceReferenceId&quot;: null,&#xd;
    &quot;sourceSystem&quot;: null,&#xd;
    &quot;complete&quot;: true,&#xd;
    &quot;referred&quot;: false,&#xd;
    &quot;questionnaireResponse&quot;: [&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10800,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA113&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10801,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA113_1&quot;,&#xd;
            &quot;value&quot;: &quot;true&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10820,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA16&quot;,&#xd;
            &quot;value&quot;: &quot;CA16_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10821,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA16_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10879,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA17&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10880,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA17_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10823,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA18&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10825,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA18_2&quot;,&#xd;
            &quot;value&quot;: &quot;8&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10824,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA18_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10608,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA56&quot;,&#xd;
            &quot;value&quot;: &quot;CA56_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10644,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA57&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10686,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA58_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA58_T_1_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10687,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA58_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10689,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA59_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA59_T_2_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10688,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA59_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10690,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA60&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10651,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA61_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA61_T_1_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10652,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA61_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10654,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA62_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10653,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA62_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA62_T_1_OP_5&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10609,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA63&quot;,&#xd;
            &quot;value&quot;: &quot;CA63_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10655,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA64&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10656,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA65&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10657,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10659,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10658,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10660,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA67&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10685,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA68&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10661,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10663,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10662,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10664,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA70&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10665,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA71&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10610,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA72&quot;,&#xd;
            &quot;value&quot;: &quot;CA72_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10666,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA73&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10667,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA74&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10668,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA75&quot;,&#xd;
            &quot;value&quot;: &quot;CA75_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10669,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA76&quot;,&#xd;
            &quot;value&quot;: &quot;CA76_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10670,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA77&quot;,&#xd;
            &quot;value&quot;: &quot;CA77_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10671,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA78&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10672,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA79&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10673,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA80&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10674,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA81&quot;,&#xd;
            &quot;value&quot;: &quot;CA81_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10675,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA82&quot;,&#xd;
            &quot;value&quot;: &quot;CA82_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10000,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA83&quot;,&#xd;
            &quot;value&quot;: &quot;CA83_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10676,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA84&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10677,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA85&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10878,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA86&quot;,&#xd;
            &quot;value&quot;: &quot;CA86_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10679,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA87&quot;,&#xd;
            &quot;value&quot;: &quot;CA87_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10680,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA88&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10682,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA89_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10681,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA89_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10683,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA90&quot;,&#xd;
            &quot;value&quot;: &quot;CA90_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10684,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA91&quot;,&#xd;
            &quot;value&quot;: &quot;CA91_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10928,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA29&quot;,&#xd;
            &quot;value&quot;: &quot;CA29_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10712,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA30&quot;,&#xd;
            &quot;value&quot;: &quot;CA30_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10722,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA41&quot;,&#xd;
            &quot;value&quot;: &quot;CA41_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10723,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA42&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10775,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA42_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10724,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA43&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10714,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA35&quot;,&#xd;
            &quot;value&quot;: &quot;CA35_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10881,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA122&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10882,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA122_1&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10715,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA36&quot;,&#xd;
            &quot;value&quot;: &quot;CA36_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10716,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA37&quot;,&#xd;
            &quot;value&quot;: &quot;CA37_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10031,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA37_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10717,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA38&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10718,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA38_1&quot;,&#xd;
            &quot;value&quot;: &quot;30&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10719,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA38_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10721,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA40&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10752,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA40_1&quot;,&#xd;
            &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10753,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA40_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10874,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA107&quot;,&#xd;
            &quot;value&quot;: &quot;CA107_OP_2,CA107_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10725,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA44&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10826,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA109&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10827,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA109_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10697,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA45&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10699,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA45_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10698,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA45_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10701,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA45_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10726,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA46&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10727,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA46_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10728,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA46_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10730,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA48&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10760,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA48_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10731,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA48_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10703,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10708,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10707,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10702,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10705,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1_2&quot;,&#xd;
            &quot;value&quot;: &quot;18&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10704,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10961,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA50_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G19_0013&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10960,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA50_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10963,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA135_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G45_0013&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10962,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA135_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10030,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA103&quot;,&#xd;
            &quot;value&quot;: &quot;CA103_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10924,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA92&quot;,&#xd;
            &quot;value&quot;: &quot;CA92_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10925,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA93&quot;,&#xd;
            &quot;value&quot;: &quot;CA93_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10929,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA94&quot;,&#xd;
            &quot;value&quot;: &quot;CA94_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10749,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA97&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10750,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA97_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G19_0015&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10751,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA97_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10968,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA98&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10969,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA98_1&quot;,&#xd;
            &quot;value&quot;: &quot;35&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10970,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA98_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10746,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA100&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10767,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA100_1&quot;,&#xd;
            &quot;value&quot;: &quot;30&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10768,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA100_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;save&quot;: false,&#xd;
    &quot;searchSave&quot;: false,&#xd;
    &quot;previousSave&quot;: true,&#xd;
    &quot;currentModuleComplete&quot;: true,&#xd;
    &quot;userId&quot;: &quot;${USER}&quot;,&#xd;
    &quot;localeId&quot;: &quot;en&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data.statusCode != 200) 
			|| !data.statusMessage.contains(&quot;saved successfully&quot;)
			|| !data.data.caId
			|| !data.data.caClientId) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SAVE - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Summary (GET)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/summary/en/${assessment_id}/${USER}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data.statusCode != 200) || !data.statusMessage.contains(&quot;Success&quot;)) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
	else {
		vars.put(&apos;ca_sds&apos;, data.data.sdsList[0].serviceDeliverySiteId.toString())
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
	log.info &quot;ERROR: ${ex.toString()}&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;EO - UNABLE TO GET SUMMARY - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 9 (GET)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/return/question/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Assign Assessment (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/assign</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;localeId&quot;: &quot;en&quot;,&#xd;
    &quot;systemId&quot;: &quot;${assessment_id}&quot;,&#xd;
    &quot;userId&quot;: &quot;${USER}&quot;,&#xd;
    &quot;assignedUserId&quot;: &quot;&quot;,&#xd;
    &quot;sdsId&quot;: &quot;${ca_sds}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!data.statusMessage.contains(&quot;was assigned successfully&quot;)) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO GET SUMMARY - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Submit Assesment (POST)" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/submit</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;caReferenceNum&quot;:&quot;${assessment_id}&quot;,&quot;localeId&quot;:&quot;en&quot;,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data?.statusCode != 200) || !data?.statusMessage?.contains(&quot;submitted successfully&quot;)) {
		should_restart = true
		failure_message += data?.toString() ?: &quot;null response&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SUBMIT - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Refresh Token (GET)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/token/refresh</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Token Refresh Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

def failure_message = &quot;&quot;
def should_restart = true
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(data.token) {
		vars.put(&apos;auth_token&apos;, data.token)
		should_restart = false
	}
} catch (Exception ex) {
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Search for a Client (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/search/locale/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;dateOfBirth&quot;:null,&quot;city&quot;:null,&quot;sin&quot;:null,&quot;postalCode&quot;:null,&quot;phoneNumber&quot;:null,&quot;email&quot;:null,&quot;clientId&quot;:null,&quot;caId&quot;:&quot;${assessment_id}&quot;,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify SIN not found" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.statusMessage?.contains(&quot;No record found.&quot;) || data?.statusMessage?.contains(&quot;No client information found&quot;))) {
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	//log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;EO - INCOMPATIBLE SIN - RESTARTING TREAD&quot;
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Common Assessment" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1723011633">
            <stringProp name="1310534995">${__P(users,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="296857239">${__P(startup_time,1)}</stringProp>
            <stringProp name="-613420217">${__P(run_time,120)}</stringProp>
            <stringProp name="1722">60</stringProp>
          </collectionProp>
          <collectionProp name="-51612123">
            <stringProp name="-1836149434">${__P(users_2,2)}</stringProp>
            <stringProp name="-2079831018">${__P(stage2_delay,30)}</stringProp>
            <stringProp name="-1021974198">${__P(startup_time_2,1)}</stringProp>
            <stringProp name="500128247">${__P(run_time_2,60)}</stringProp>
            <stringProp name="1722">60</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1600</stringProp>
          <stringProp name="RandomTimer.range">1400.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;${PASSWORD}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def credentials = [
	[user: &apos;IAAP105046&apos;, password: &apos;IAAP105046&apos;],
	[user: &apos;IAAP109980&apos;, password: &apos;IAAP109980&apos;],
	[user: &apos;IAAP108858&apos;, password: &apos;IAAP108858&apos;],
	[user: &apos;IAAP112449&apos;, password: &apos;IAAP112449&apos;]
]

Random rnd = new Random();
def idx = rnd.nextInt(credentials.size())

vars.put(&apos;USER&apos;, credentials[idx].user)
vars.put(&apos;PASSWORD&apos;, credentials[idx].password)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.token)) {
		should_restart = true
		log.info data.toString()
	}
	else {
		vars.put(&apos;auth_token&apos;, data.token)
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;AUTHENTICATION FAILED&quot;
	AssertionResult.setFailureMessage(prev.getResponseDataAsString());
     AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.control.WeightedSwitchController guiclass="com.blazemeter.jmeter.control.WeightedSwitchControllerGui" testclass="com.blazemeter.jmeter.control.WeightedSwitchController" testname="bzm - Weighted Switch Controller">
          <boolProp name="IsRandomChoice">false</boolProp>
          <collectionProp name="Weights">
            <collectionProp name="-1070707866">
              <stringProp name="1581001674">CA Search</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="129332128">
              <stringProp name="-133947282">CA Submission</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
          </collectionProp>
        </com.blazemeter.jmeter.control.WeightedSwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CA Search">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Common Request Header">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Allowed operations (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/operations</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Search for a Client (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/search/locale/en</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;dateOfBirth&quot;:null,&quot;city&quot;:null,&quot;sin&quot;:&quot;${sin_number}&quot;,&quot;postalCode&quot;:null,&quot;phoneNumber&quot;:null,&quot;email&quot;:null,&quot;clientId&quot;:null,&quot;caId&quot;:null,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def sin_numbers = [
	&apos;512204496&apos;,
	&apos;240624197&apos;,
	&apos;277366589&apos;,
	&apos;504541095&apos;,
	&apos;643859770&apos;,
	&apos;237566617&apos;,
	&apos;704019074&apos;,
	&apos;712820281&apos;,
	&apos;390422046&apos;,
	&apos;745406694&apos;,
	&apos;527739916&apos;,
	&apos;730508223&apos;
]

def rnd = new Random()
def idx = rnd.nextInt(sin_numbers.size())

vars.put(&apos;sin_number&apos;, sin_numbers[idx])</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify SIN found" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.statusMessage?.contains(&quot;Success&quot;) &amp;&amp;  data?.statusCode == 200)) {
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	//log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;EO - INCOMPATIBLE SIN - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(prev.getResponseDataAsString());
     AssertionResult.setFailure(true);
}
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CA Submission">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Common Request Header">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate Custom SIN">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;
import java.io.File;
import org.apache.jmeter.services.FileServer

def getCheckDigit(List digits) {
   def sum = digits.withIndex()
       .collect { d, i -&gt;
           i % 2 == 0 ? d : d * 2
       }
       .collect { d -&gt;
           d.intdiv(10) + (d % 10)
       }
       .sum()
   
  return (sum % 10) ? 10 - (sum % 10) : 0
}

def generate() {
   def random = new Random(System.currentTimeMillis());
   def digits = [random.nextInt(7) + 1]
   for(def i : (1..7)) {
       digits.add(random.nextInt(10))
   }
   
   digits.add(getCheckDigit(digits))
   def result = digits.collect { d -&gt;
       d.toString()
   }
   .join(&apos;&apos;)
}

def old_sins = []
if(vars.get(&quot;SIN_FILE_NAME&quot;)) {
	try {
		def path = FileServer.getFileServer().getBaseDir()
		File file = new File(&quot;$path/${SIN_FILE_NAME}&quot;)
		file.eachLine { line -&gt;
			old_sins.add(line.trim())
		}
	} catch(Exception ex) {
		log.info &quot;Unable to read file: ${ex.message}&quot;
	}
}

do {
	String new_sin = generate()
	//String new_sin = &quot;518648126&quot;
	
	if(!old_sins.contains(new_sin)) {
		vars.put(&apos;sin_number&apos;, new_sin)
		break
	}
} while(true)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Allowed operations (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/operations</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Search for a Client (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/search/locale/en</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;dateOfBirth&quot;:null,&quot;city&quot;:null,&quot;sin&quot;:&quot;${sin_number}&quot;,&quot;postalCode&quot;:null,&quot;phoneNumber&quot;:null,&quot;email&quot;:null,&quot;clientId&quot;:null,&quot;caId&quot;:null,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify SIN not found" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.statusMessage?.contains(&quot;No record found.&quot;) || data?.statusMessage?.contains(&quot;No client information found&quot;))) {
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	//log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;EO - INCOMPATIBLE SIN - RESTARTING TREAD&quot;
}
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 1 (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Validation Rules (GET)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question/validationrules/locale/en</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 2 (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;moduleId&quot;:10064,&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Save User Answers (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/save</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;caId&quot;:null,&quot;templateId&quot;:null,&quot;caClientId&quot;:null,&quot;crClientId&quot;:&quot;&quot;,&quot;currentModuleId&quot;:10064,&quot;sourceReferenceId&quot;:null,&quot;sourceSystem&quot;:null,&quot;complete&quot;:true,&quot;referred&quot;:false,&quot;questionnaireResponse&quot;:[{&quot;responseId&quot;:0,&quot;questionId&quot;:10800,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA113&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10801,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA113_1&quot;,&quot;value&quot;:&quot;true&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10001,&quot;questionAnswerType&quot;:7,&quot;questionCode&quot;:&quot;CA1&quot;,&quot;value&quot;:&quot;${sin_number}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10776,&quot;questionAnswerType&quot;:12,&quot;questionCode&quot;:&quot;CA1-1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10010,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10011,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_1&quot;,&quot;value&quot;:&quot;${first_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10012,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_2&quot;,&quot;value&quot;:&quot;${middle_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10013,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_3&quot;,&quot;value&quot;:&quot;${last_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10009,&quot;questionAnswerType&quot;:3,&quot;questionCode&quot;:&quot;CA3&quot;,&quot;value&quot;:&quot;1975-04-12&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10002,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA4&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10008,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_6&quot;,&quot;value&quot;:&quot;M2N3M1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10003,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10004,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_2&quot;,&quot;value&quot;:&quot;1200&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10005,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_3&quot;,&quot;value&quot;:&quot;Main&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10006,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_4&quot;,&quot;value&quot;:&quot;Toronto&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10007,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA4_5&quot;,&quot;value&quot;:&quot;CA_G10_ON&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10617,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA4_7&quot;,&quot;value&quot;:&quot;CA4_7_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10618,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA5&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10619,&quot;questionAnswerType&quot;:8,&quot;questionCode&quot;:&quot;CA5_1&quot;,&quot;value&quot;:&quot;${phone}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10620,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA5_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10622,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA5_5&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10621,&quot;questionAnswerType&quot;:8,&quot;questionCode&quot;:&quot;CA5_3&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10014,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA5_4&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10623,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA6&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10624,&quot;questionAnswerType&quot;:9,&quot;questionCode&quot;:&quot;CA6_1&quot;,&quot;value&quot;:&quot;${email}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10625,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA6_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10626,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA7&quot;,&quot;value&quot;:&quot;CA7_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10931,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA8&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10932,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA8_1&quot;,&quot;value&quot;:&quot;CA&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10933,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA8_2&quot;,&quot;value&quot;:&quot;false&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10930,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA10&quot;,&quot;value&quot;:&quot;CA10_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10954,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA10_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10934,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA108&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10935,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA110&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10630,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA9&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10692,&quot;questionAnswerType&quot;:3,&quot;questionCode&quot;:&quot;CA9_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10693,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA9_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10809,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA31&quot;,&quot;value&quot;:&quot;CA31_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10604,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA24&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10605,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA24_1&quot;,&quot;value&quot;:&quot;2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10606,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA24_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10628,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA11&quot;,&quot;value&quot;:&quot;CA11_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10016,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA11_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10632,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA12&quot;,&quot;value&quot;:&quot;CA12_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10927,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA14&quot;,&quot;value&quot;:&quot;CA12_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10956,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA13&quot;,&quot;value&quot;:&quot;CA13_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10957,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA137&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10958,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA137_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10959,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA137_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10635,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA15&quot;,&quot;value&quot;:&quot;CA15_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10019,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA15_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10810,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA32&quot;,&quot;value&quot;:&quot;CA32_OP_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10713,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA33&quot;,&quot;value&quot;:&quot;1998&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10696,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA34&quot;,&quot;value&quot;:&quot;CA34_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10694,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA27&quot;,&quot;value&quot;:&quot;CA27_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10914,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA51&quot;,&quot;value&quot;:&quot;CA_CA51_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10915,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA52&quot;,&quot;value&quot;:&quot;CA_CA52_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10916,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA53&quot;,&quot;value&quot;:&quot;CA_CA53_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10917,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA54&quot;,&quot;value&quot;:&quot;CA_CA54_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10918,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA55&quot;,&quot;value&quot;:&quot;CA_CA55_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10919,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA95&quot;,&quot;value&quot;:&quot;CA_CA95_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10920,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA96&quot;,&quot;value&quot;:&quot;CA_CA96_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10921,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA104&quot;,&quot;value&quot;:&quot;CA_CA104_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10922,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA105&quot;,&quot;value&quot;:&quot;CA_CA105_5&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10923,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA106&quot;,&quot;value&quot;:&quot;CA_CA106_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10862,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA120&quot;,&quot;value&quot;:&quot;CA120_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10710,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA28&quot;,&quot;value&quot;:&quot;CA28_OP_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10607,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA25&quot;,&quot;value&quot;:&quot;CA25_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10643,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA26&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10811,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA20&quot;,&quot;value&quot;:&quot;CA20_OP_6&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10812,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA21&quot;,&quot;value&quot;:&quot;1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10813,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA22&quot;,&quot;value&quot;:&quot;CA22_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10814,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA23&quot;,&quot;value&quot;:&quot;CA23_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10020,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA101&quot;,&quot;value&quot;:&quot;CA_G21_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10021,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA102&quot;,&quot;value&quot;:&quot;CA_G21_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10602,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA19&quot;,&quot;value&quot;:&quot;CA19_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10863,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA121&quot;,&quot;value&quot;:&quot;CA121_OP_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10955,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA136&quot;,&quot;value&quot;:&quot;CA136_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10860,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA111&quot;,&quot;value&quot;:&quot;CA111_OP_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10861,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA112&quot;,&quot;value&quot;:&quot;CA111_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10840,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;SLD01&quot;,&quot;value&quot;:&quot;SLD01_OP_2&quot;}],&quot;save&quot;:false,&quot;searchSave&quot;:false,&quot;previousSave&quot;:true,&quot;currentModuleComplete&quot;:true,&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Custom Data" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RSU

vars.put(&apos;first_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;last_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;middle_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;email&apos;, &quot;${RSU.randomAlphabetic(6)}@${RSU.randomAlphabetic(6)}.com&quot;)
vars.put(&apos;phone&apos;, &quot;6476${RSU.randomNumeric(6)}&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data.statusCode != 200) 
			|| !data.statusMessage.contains(&quot;saved successfully&quot;)
			|| !data.data.caId
			|| !data.data.caClientId) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
	else {
		vars.put(&quot;assessment_id&quot;, data.data.caId)
		vars.put(&quot;client_id&quot;, data.data.caClientId)
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SAVE - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 3 (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/edit</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;moduleId&quot;:10063,&quot;localeId&quot;:&quot;en&quot;,&quot;systemId&quot;:&quot;${assessment_id}&quot;,&quot;userId&quot;:&quot;${USER}&quot;,&quot;summaryPage&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Cancel Assessment Rules (GET)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/cancel/question/en</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Save User Answers (POST)">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/save</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;caId&quot;: &quot;${assessment_id}&quot;,&#xd;
    &quot;templateId&quot;: null,&#xd;
    &quot;caClientId&quot;: &quot;${client_id}&quot;,&#xd;
    &quot;crClientId&quot;: &quot;&quot;,&#xd;
    &quot;currentModuleId&quot;: 10063,&#xd;
    &quot;sourceReferenceId&quot;: null,&#xd;
    &quot;sourceSystem&quot;: null,&#xd;
    &quot;complete&quot;: true,&#xd;
    &quot;referred&quot;: false,&#xd;
    &quot;questionnaireResponse&quot;: [&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10800,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA113&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10801,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA113_1&quot;,&#xd;
            &quot;value&quot;: &quot;true&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10820,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA16&quot;,&#xd;
            &quot;value&quot;: &quot;CA16_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10821,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA16_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10879,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA17&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10880,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA17_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10823,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA18&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10825,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA18_2&quot;,&#xd;
            &quot;value&quot;: &quot;8&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10824,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA18_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10608,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA56&quot;,&#xd;
            &quot;value&quot;: &quot;CA56_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10644,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA57&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10686,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA58_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA58_T_1_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10687,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA58_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10689,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA59_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA59_T_2_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10688,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA59_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10690,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA60&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10651,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA61_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA61_T_1_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10652,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA61_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10654,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA62_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10653,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA62_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA62_T_1_OP_5&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10609,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA63&quot;,&#xd;
            &quot;value&quot;: &quot;CA63_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10655,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA64&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10656,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA65&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10657,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10659,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10658,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10660,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA67&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10685,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA68&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10661,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10663,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10662,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10664,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA70&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10665,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA71&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10610,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA72&quot;,&#xd;
            &quot;value&quot;: &quot;CA72_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10666,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA73&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10667,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA74&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10668,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA75&quot;,&#xd;
            &quot;value&quot;: &quot;CA75_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10669,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA76&quot;,&#xd;
            &quot;value&quot;: &quot;CA76_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10670,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA77&quot;,&#xd;
            &quot;value&quot;: &quot;CA77_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10671,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA78&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10672,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA79&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10673,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA80&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10674,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA81&quot;,&#xd;
            &quot;value&quot;: &quot;CA81_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10675,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA82&quot;,&#xd;
            &quot;value&quot;: &quot;CA82_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10000,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA83&quot;,&#xd;
            &quot;value&quot;: &quot;CA83_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10676,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA84&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10677,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA85&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10878,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA86&quot;,&#xd;
            &quot;value&quot;: &quot;CA86_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10679,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA87&quot;,&#xd;
            &quot;value&quot;: &quot;CA87_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10680,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA88&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10682,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA89_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10681,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA89_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10683,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA90&quot;,&#xd;
            &quot;value&quot;: &quot;CA90_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10684,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA91&quot;,&#xd;
            &quot;value&quot;: &quot;CA91_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10928,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA29&quot;,&#xd;
            &quot;value&quot;: &quot;CA29_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10712,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA30&quot;,&#xd;
            &quot;value&quot;: &quot;CA30_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10722,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA41&quot;,&#xd;
            &quot;value&quot;: &quot;CA41_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10723,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA42&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10775,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA42_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10724,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA43&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10714,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA35&quot;,&#xd;
            &quot;value&quot;: &quot;CA35_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10881,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA122&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10882,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA122_1&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10715,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA36&quot;,&#xd;
            &quot;value&quot;: &quot;CA36_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10716,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA37&quot;,&#xd;
            &quot;value&quot;: &quot;CA37_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10031,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA37_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10717,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA38&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10718,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA38_1&quot;,&#xd;
            &quot;value&quot;: &quot;30&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10719,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA38_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10721,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA40&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10752,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA40_1&quot;,&#xd;
            &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10753,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA40_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10874,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA107&quot;,&#xd;
            &quot;value&quot;: &quot;CA107_OP_2,CA107_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10725,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA44&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10826,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA109&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10827,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA109_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10697,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA45&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10699,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA45_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10698,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA45_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10701,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA45_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10726,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA46&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10727,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA46_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10728,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA46_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10730,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA48&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10760,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA48_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10731,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA48_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10703,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10708,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10707,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10702,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10705,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1_2&quot;,&#xd;
            &quot;value&quot;: &quot;18&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10704,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10961,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA50_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G19_0013&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10960,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA50_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10963,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA135_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G45_0013&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10962,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA135_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10030,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA103&quot;,&#xd;
            &quot;value&quot;: &quot;CA103_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10924,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA92&quot;,&#xd;
            &quot;value&quot;: &quot;CA92_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10925,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA93&quot;,&#xd;
            &quot;value&quot;: &quot;CA93_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10929,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA94&quot;,&#xd;
            &quot;value&quot;: &quot;CA94_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10749,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA97&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10750,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA97_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G19_0015&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10751,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA97_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10968,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA98&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10969,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA98_1&quot;,&#xd;
            &quot;value&quot;: &quot;35&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10970,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA98_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10746,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA100&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10767,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA100_1&quot;,&#xd;
            &quot;value&quot;: &quot;30&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10768,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA100_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;save&quot;: false,&#xd;
    &quot;searchSave&quot;: false,&#xd;
    &quot;previousSave&quot;: true,&#xd;
    &quot;currentModuleComplete&quot;: true,&#xd;
    &quot;userId&quot;: &quot;${USER}&quot;,&#xd;
    &quot;localeId&quot;: &quot;en&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data.statusCode != 200) 
			|| !data.statusMessage.contains(&quot;saved successfully&quot;)
			|| !data.data.caId
			|| !data.data.caClientId) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SAVE - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Summary (GET)" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/summary/en/${assessment_id}/${USER}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data.statusCode != 200) || !data.statusMessage.contains(&quot;Success&quot;)) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
	else {
		vars.put(&apos;ca_sds&apos;, data.data.sdsList[0].serviceDeliverySiteId.toString())
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
	log.info &quot;ERROR: ${ex.toString()}&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;EO - UNABLE TO GET SUMMARY - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 9 (GET)" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/return/question/en</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Assign Assessment (POST)" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/assign</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;localeId&quot;: &quot;en&quot;,&#xd;
    &quot;systemId&quot;: &quot;${assessment_id}&quot;,&#xd;
    &quot;userId&quot;: &quot;${USER}&quot;,&#xd;
    &quot;assignedUserId&quot;: &quot;&quot;,&#xd;
    &quot;sdsId&quot;: &quot;${ca_sds}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!data.statusMessage.contains(&quot;was assigned successfully&quot;)) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO GET SUMMARY - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Submit Assesment (POST)" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/submit</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;caReferenceNum&quot;:&quot;${assessment_id}&quot;,&quot;localeId&quot;:&quot;en&quot;,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data?.statusCode != 200) || !data?.statusMessage?.contains(&quot;submitted successfully&quot;)) {
		should_restart = true
		failure_message += data?.toString() ?: &quot;null response&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SUBMIT - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Refresh Token (GET)" enabled="false">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/token/refresh</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Token Refresh Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;

def failure_message = &quot;&quot;
def should_restart = true
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(data.token) {
		vars.put(&apos;auth_token&apos;, data.token)
		should_restart = false
	}
} catch (Exception ex) {
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Search for a Client (POST)" enabled="false">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">CommonAssessmentAPI/search/locale/en</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;dateOfBirth&quot;:null,&quot;city&quot;:null,&quot;sin&quot;:null,&quot;postalCode&quot;:null,&quot;phoneNumber&quot;:null,&quot;email&quot;:null,&quot;clientId&quot;:null,&quot;caId&quot;:&quot;${assessment_id}&quot;,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify SIN not found" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.statusMessage?.contains(&quot;No record found.&quot;) || data?.statusMessage?.contains(&quot;No client information found&quot;))) {
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	//log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;EO - INCOMPATIBLE SIN - RESTARTING TREAD&quot;
}
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug - Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">1600</stringProp>
          <stringProp name="RandomTimer.range">1400.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;${PASSWORD}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def credentials = [
	[user: &apos;IAAP105046&apos;, password: &apos;IAAP105046&apos;],
	[user: &apos;IAAP109980&apos;, password: &apos;IAAP109980&apos;],
	[user: &apos;IAAP108858&apos;, password: &apos;IAAP108858&apos;],
	[user: &apos;IAAP112449&apos;, password: &apos;IAAP112449&apos;]
]

Random rnd = new Random();
def idx = rnd.nextInt(credentials.size())

vars.put(&apos;USER&apos;, credentials[idx].user)
vars.put(&apos;PASSWORD&apos;, credentials[idx].password)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.token)) {
		should_restart = true
		log.info data.toString()
	}
	else {
		vars.put(&apos;auth_token&apos;, data.token)
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;AUTHENTICATION FAILED&quot;
	AssertionResult.setFailureMessage(prev.getResponseDataAsString());
     AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Common Request Header">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${auth_token}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate Custom SIN">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Random
import java.io.File
import org.apache.jmeter.services.FileServer

def getCheckDigit(List digits) {
   def sum = digits.withIndex()
       .collect { d, i -&gt;
           i % 2 == 0 ? d : d * 2
       }
       .collect { d -&gt;
           d.intdiv(10) + (d % 10)
       }
       .sum()
   
  return (sum % 10) ? 10 - (sum % 10) : 0
}

def generate() {
   def random = new Random(System.currentTimeMillis())
   def digits = [random.nextInt(7) + 1]
   for(def i : (1..7)) {
       digits.add(random.nextInt(10))
   }
   
   digits.add(getCheckDigit(digits))
   def result = digits.collect { d -&gt;
       d.toString()
   }
   .join(&apos;&apos;)
}

def old_sins = []
if(vars.get(&quot;SIN_FILE_NAME&quot;)) {
	try {
		def path = FileServer.getFileServer().getBaseDir()
		File file = new File(&quot;$path/${SIN_FILE_NAME}&quot;)
		file.eachLine { line -&gt;
			old_sins.add(line.trim())
		}
	} catch(Exception ex) {
		log.info &quot;Unable to read file: ${ex.message}&quot;
	}
}

do {
	String new_sin = generate()
	
	if(!old_sins.contains(new_sin)) {
		vars.put(&apos;sin_number&apos;, new_sin)
		break
	}
} while(true)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Check SIN in vars">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def my_sin = vars.get(&quot;sin_number&quot;)
log.info(&quot;NEW SIN: ${my_sin}&quot;)
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Allowed operations (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/operations</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;${USER}&quot;,&quot;password&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Search for a Client (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/search/locale/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;dateOfBirth&quot;:null,&quot;city&quot;:null,&quot;sin&quot;:&quot;${sin_number}&quot;,&quot;postalCode&quot;:null,&quot;phoneNumber&quot;:null,&quot;email&quot;:null,&quot;clientId&quot;:null,&quot;caId&quot;:null,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify SIN not found">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.statusMessage?.contains(&quot;No record found&quot;) || data?.statusMessage?.contains(&quot;No client information found&quot;))) {
	    should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	//log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;EO - INCOMPATIBLE SIN - RESTARTING TREAD&quot;
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 1 (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Validation Rules (GET)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question/validationrules/locale/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 2 (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/question</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;moduleId&quot;:10067,&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Save User Answers (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/save</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;caId&quot;:null,&quot;templateId&quot;:null,&quot;caClientId&quot;:null,&quot;crClientId&quot;:&quot;&quot;,&quot;currentModuleId&quot;:10064,&quot;sourceReferenceId&quot;:null,&quot;sourceSystem&quot;:null,&quot;complete&quot;:true,&quot;referred&quot;:false,&quot;questionnaireResponse&quot;:[{&quot;responseId&quot;:0,&quot;questionId&quot;:10800,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA113&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10801,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA113_1&quot;,&quot;value&quot;:&quot;true&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10001,&quot;questionAnswerType&quot;:7,&quot;questionCode&quot;:&quot;CA1&quot;,&quot;value&quot;:&quot;${sin_number}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10776,&quot;questionAnswerType&quot;:12,&quot;questionCode&quot;:&quot;CA1-1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10010,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10011,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_1&quot;,&quot;value&quot;:&quot;${first_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10012,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_2&quot;,&quot;value&quot;:&quot;${middle_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10013,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA2_3&quot;,&quot;value&quot;:&quot;${last_name}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10009,&quot;questionAnswerType&quot;:3,&quot;questionCode&quot;:&quot;CA3&quot;,&quot;value&quot;:&quot;1975-04-12&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10002,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA4&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10008,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_6&quot;,&quot;value&quot;:&quot;M2N3M1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10003,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10004,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_2&quot;,&quot;value&quot;:&quot;1200&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10005,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_3&quot;,&quot;value&quot;:&quot;Main&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10006,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA4_4&quot;,&quot;value&quot;:&quot;Toronto&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10007,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA4_5&quot;,&quot;value&quot;:&quot;CA_G10_ON&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10617,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA4_7&quot;,&quot;value&quot;:&quot;CA4_7_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10618,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA5&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10619,&quot;questionAnswerType&quot;:8,&quot;questionCode&quot;:&quot;CA5_1&quot;,&quot;value&quot;:&quot;${phone}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10620,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA5_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10622,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA5_5&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10621,&quot;questionAnswerType&quot;:8,&quot;questionCode&quot;:&quot;CA5_3&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10014,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA5_4&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10623,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA6&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10624,&quot;questionAnswerType&quot;:9,&quot;questionCode&quot;:&quot;CA6_1&quot;,&quot;value&quot;:&quot;${email}&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10625,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA6_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10626,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA7&quot;,&quot;value&quot;:&quot;CA7_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10931,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA8&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10932,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA8_1&quot;,&quot;value&quot;:&quot;CA&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10933,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA8_2&quot;,&quot;value&quot;:&quot;false&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10930,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA10&quot;,&quot;value&quot;:&quot;CA10_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10954,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA10_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10934,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA108&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10935,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA110&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10630,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA9&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10692,&quot;questionAnswerType&quot;:3,&quot;questionCode&quot;:&quot;CA9_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10693,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA9_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10809,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA31&quot;,&quot;value&quot;:&quot;CA31_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10604,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA24&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10605,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA24_1&quot;,&quot;value&quot;:&quot;2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10606,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA24_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10628,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA11&quot;,&quot;value&quot;:&quot;CA11_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10016,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA11_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10632,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA12&quot;,&quot;value&quot;:&quot;CA12_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10927,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA14&quot;,&quot;value&quot;:&quot;CA12_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10956,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA13&quot;,&quot;value&quot;:&quot;CA13_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10957,&quot;questionAnswerType&quot;:0,&quot;questionCode&quot;:&quot;CA137&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10958,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA137_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10959,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA137_2&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10635,&quot;questionAnswerType&quot;:5,&quot;questionCode&quot;:&quot;CA15&quot;,&quot;value&quot;:&quot;CA15_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10019,&quot;questionAnswerType&quot;:1,&quot;questionCode&quot;:&quot;CA15_1&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10810,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA32&quot;,&quot;value&quot;:&quot;CA32_OP_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10713,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA33&quot;,&quot;value&quot;:&quot;1998&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10696,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA34&quot;,&quot;value&quot;:&quot;CA34_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10694,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA27&quot;,&quot;value&quot;:&quot;CA27_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10914,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA51&quot;,&quot;value&quot;:&quot;CA_CA51_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10915,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA52&quot;,&quot;value&quot;:&quot;CA_CA52_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10916,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA53&quot;,&quot;value&quot;:&quot;CA_CA53_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10917,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA54&quot;,&quot;value&quot;:&quot;CA_CA54_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10918,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA55&quot;,&quot;value&quot;:&quot;CA_CA55_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10919,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA95&quot;,&quot;value&quot;:&quot;CA_CA95_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10920,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA96&quot;,&quot;value&quot;:&quot;CA_CA96_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10921,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA104&quot;,&quot;value&quot;:&quot;CA_CA104_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10922,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA105&quot;,&quot;value&quot;:&quot;CA_CA105_5&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10923,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA106&quot;,&quot;value&quot;:&quot;CA_CA106_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10862,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA120&quot;,&quot;value&quot;:&quot;CA120_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10710,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA28&quot;,&quot;value&quot;:&quot;CA28_OP_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10607,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA25&quot;,&quot;value&quot;:&quot;CA25_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10643,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA26&quot;,&quot;value&quot;:&quot;&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10811,&quot;questionAnswerType&quot;:4,&quot;questionCode&quot;:&quot;CA20&quot;,&quot;value&quot;:&quot;CA20_OP_6&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10812,&quot;questionAnswerType&quot;:2,&quot;questionCode&quot;:&quot;CA21&quot;,&quot;value&quot;:&quot;1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10813,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA22&quot;,&quot;value&quot;:&quot;CA22_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10814,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA23&quot;,&quot;value&quot;:&quot;CA23_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10020,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA101&quot;,&quot;value&quot;:&quot;CA_G21_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10021,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA102&quot;,&quot;value&quot;:&quot;CA_G21_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10602,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA19&quot;,&quot;value&quot;:&quot;CA19_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10863,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA121&quot;,&quot;value&quot;:&quot;CA121_OP_4&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10955,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA136&quot;,&quot;value&quot;:&quot;CA136_OP_2&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10860,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA111&quot;,&quot;value&quot;:&quot;CA111_OP_3&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10861,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;CA112&quot;,&quot;value&quot;:&quot;CA111_OP_1&quot;},{&quot;responseId&quot;:0,&quot;questionId&quot;:10840,&quot;questionAnswerType&quot;:6,&quot;questionCode&quot;:&quot;SLD01&quot;,&quot;value&quot;:&quot;SLD01_OP_2&quot;}],&quot;save&quot;:false,&quot;searchSave&quot;:false,&quot;previousSave&quot;:true,&quot;currentModuleComplete&quot;:true,&quot;userId&quot;:&quot;${USER}&quot;,&quot;localeId&quot;:&quot;en&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Custom Data">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RSU

vars.put(&apos;first_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;last_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;middle_name&apos;, RSU.randomAlphabetic(6))
vars.put(&apos;email&apos;, &quot;${RSU.randomAlphabetic(6)}@${RSU.randomAlphabetic(6)}.com&quot;)
vars.put(&apos;phone&apos;, &quot;6476${RSU.randomNumeric(6)}&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data.statusCode != 200) 
			|| !data.statusMessage.contains(&quot;saved successfully&quot;)
			|| !data.data.caId
			|| !data.data.caClientId) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
	else {
		vars.put(&quot;assessment_id&quot;, data.data.caId)
		vars.put(&quot;client_id&quot;, data.data.caClientId)
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SAVE - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 3 (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/edit</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;moduleId&quot;:10066,&quot;localeId&quot;:&quot;en&quot;,&quot;systemId&quot;:&quot;${assessment_id}&quot;,&quot;userId&quot;:&quot;${USER}&quot;,&quot;summaryPage&quot;:false}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Cancel Assessment Rules (GET)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/cancel/question/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Save User Answers (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/save</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;caId&quot;: &quot;${assessment_id}&quot;,&#xd;
    &quot;templateId&quot;: null,&#xd;
    &quot;caClientId&quot;: &quot;${client_id}&quot;,&#xd;
    &quot;crClientId&quot;: &quot;&quot;,&#xd;
    &quot;currentModuleId&quot;: 10067,&#xd;
    &quot;sourceReferenceId&quot;: null,&#xd;
    &quot;sourceSystem&quot;: null,&#xd;
    &quot;complete&quot;: true,&#xd;
    &quot;referred&quot;: false,&#xd;
    &quot;questionnaireResponse&quot;: [&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10800,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA113&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10801,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA113_1&quot;,&#xd;
            &quot;value&quot;: &quot;true&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10820,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA16&quot;,&#xd;
            &quot;value&quot;: &quot;CA16_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10821,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA16_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10879,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA17&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10880,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA17_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10823,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA18&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10825,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA18_2&quot;,&#xd;
            &quot;value&quot;: &quot;8&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10824,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA18_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10608,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA56&quot;,&#xd;
            &quot;value&quot;: &quot;CA56_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10644,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA57&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10686,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA58_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA58_T_1_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10687,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA58_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10689,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA59_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA59_T_2_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10688,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA59_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10690,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA60&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10651,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA61_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA61_T_1_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10652,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA61_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10654,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA62_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10653,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA62_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA62_T_1_OP_5&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10609,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA63&quot;,&#xd;
            &quot;value&quot;: &quot;CA63_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10655,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA64&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10656,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA65&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10657,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10659,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10658,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA66_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10660,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA67&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10685,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA68&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10661,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10663,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10662,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA69_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10664,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA70&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10665,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA71&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10610,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA72&quot;,&#xd;
            &quot;value&quot;: &quot;CA72_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10666,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA73&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10667,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA74&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10668,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA75&quot;,&#xd;
            &quot;value&quot;: &quot;CA75_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10669,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA76&quot;,&#xd;
            &quot;value&quot;: &quot;CA76_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10670,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA77&quot;,&#xd;
            &quot;value&quot;: &quot;CA77_OP_3&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10671,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA78&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10672,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA79&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10673,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA80&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10674,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA81&quot;,&#xd;
            &quot;value&quot;: &quot;CA81_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10675,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA82&quot;,&#xd;
            &quot;value&quot;: &quot;CA82_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10000,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA83&quot;,&#xd;
            &quot;value&quot;: &quot;CA83_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10676,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA84&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10677,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA85&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10878,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA86&quot;,&#xd;
            &quot;value&quot;: &quot;CA86_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10679,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA87&quot;,&#xd;
            &quot;value&quot;: &quot;CA87_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10680,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA88&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10682,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA89_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA12_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10681,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA89_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10683,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA90&quot;,&#xd;
            &quot;value&quot;: &quot;CA90_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10684,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA91&quot;,&#xd;
            &quot;value&quot;: &quot;CA91_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10928,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA29&quot;,&#xd;
            &quot;value&quot;: &quot;CA29_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10712,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA30&quot;,&#xd;
            &quot;value&quot;: &quot;CA30_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10722,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA41&quot;,&#xd;
            &quot;value&quot;: &quot;CA41_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10723,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA42&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10775,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA42_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10724,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA43&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10714,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA35&quot;,&#xd;
            &quot;value&quot;: &quot;CA35_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10881,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA122&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10882,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA122_1&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10715,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA36&quot;,&#xd;
            &quot;value&quot;: &quot;CA36_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10716,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA37&quot;,&#xd;
            &quot;value&quot;: &quot;CA37_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10031,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA37_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10717,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA38&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10718,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA38_1&quot;,&#xd;
            &quot;value&quot;: &quot;30&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10719,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA38_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10721,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA40&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10752,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA40_1&quot;,&#xd;
            &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10753,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA40_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10874,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA107&quot;,&#xd;
            &quot;value&quot;: &quot;CA107_OP_2,CA107_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10725,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA44&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10826,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA109&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10827,&#xd;
            &quot;questionAnswerType&quot;: 1,&#xd;
            &quot;questionCode&quot;: &quot;CA109_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10697,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA45&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10699,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA45_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10698,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA45_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10701,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA45_3&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10726,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA46&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10727,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA46_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10728,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA46_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10730,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA48&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10760,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA48_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10731,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA48_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10703,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10708,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10707,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_2_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10702,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10705,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1_2&quot;,&#xd;
            &quot;value&quot;: &quot;18&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10704,&#xd;
            &quot;questionAnswerType&quot;: 2,&#xd;
            &quot;questionCode&quot;: &quot;CA49_T_1_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10961,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA50_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G19_0013&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10960,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA50_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10963,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA135_T_2&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G45_0013&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10962,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA135_T_1&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10030,&#xd;
            &quot;questionAnswerType&quot;: 6,&#xd;
            &quot;questionCode&quot;: &quot;CA103&quot;,&#xd;
            &quot;value&quot;: &quot;CA103_OP_1&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10924,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA92&quot;,&#xd;
            &quot;value&quot;: &quot;CA92_OP_2&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10925,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA93&quot;,&#xd;
            &quot;value&quot;: &quot;CA93_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10929,&#xd;
            &quot;questionAnswerType&quot;: 4,&#xd;
            &quot;questionCode&quot;: &quot;CA94&quot;,&#xd;
            &quot;value&quot;: &quot;CA94_OP_4&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10749,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA97&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10750,&#xd;
            &quot;questionAnswerType&quot;: 13,&#xd;
            &quot;questionCode&quot;: &quot;CA97_1&quot;,&#xd;
            &quot;value&quot;: &quot;CA_G19_0015&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10751,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA97_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10968,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA98&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10969,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA98_1&quot;,&#xd;
            &quot;value&quot;: &quot;35&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10970,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA98_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10746,&#xd;
            &quot;questionAnswerType&quot;: 0,&#xd;
            &quot;questionCode&quot;: &quot;CA100&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10767,&#xd;
            &quot;questionAnswerType&quot;: 11,&#xd;
            &quot;questionCode&quot;: &quot;CA100_1&quot;,&#xd;
            &quot;value&quot;: &quot;30&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;responseId&quot;: 0,&#xd;
            &quot;questionId&quot;: 10768,&#xd;
            &quot;questionAnswerType&quot;: 5,&#xd;
            &quot;questionCode&quot;: &quot;CA100_2&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;save&quot;: false,&#xd;
    &quot;searchSave&quot;: false,&#xd;
    &quot;previousSave&quot;: true,&#xd;
    &quot;currentModuleComplete&quot;: true,&#xd;
    &quot;userId&quot;: &quot;${USER}&quot;,&#xd;
    &quot;localeId&quot;: &quot;en&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if((data.statusCode != 200) 
			|| !data.statusMessage.contains(&quot;saved successfully&quot;)
			|| !data.data.caId
			|| !data.data.caClientId) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SAVE - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Summary (GET)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/summary/en/${assessment_id}/${USER}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
    String responseData = prev.getResponseDataAsString()
    log.info &quot;Response Data: $responseData&quot;
    def data = new JsonSlurper().parseText(responseData)

    if(data.statusCode != 200 || !data.statusMessage.contains(&quot;Success&quot;)) {
        should_restart = true
        failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
    } else {
        vars.put(&apos;ca_sds&apos;, data.data.sdsList[0].serviceDeliverySiteId.toString())
    }
} catch (Exception ex) {
    should_restart = true
    failure_message = &quot;Response is not a JSON object.&quot;
    log.error &quot;ERROR parsing response: ${ex.toString()}&quot;
}

if(should_restart) {
    log.info &quot;EO - UNABLE TO GET SUMMARY - RESTARTING THREAD&quot;
    AssertionResult.setFailureMessage(failure_message)
    AssertionResult.setFailure(true)
    ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}

</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Questions - Module 9 (GET)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/return/question/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Assign Assessment (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/assign</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;localeId&quot;: &quot;en&quot;,&#xd;
    &quot;systemId&quot;: &quot;${assessment_id}&quot;,&#xd;
    &quot;userId&quot;: &quot;${USER}&quot;,&#xd;
    &quot;assignedUserId&quot;: &quot;&quot;,&#xd;
    &quot;sdsId&quot;: &quot;${ca_sds}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!data.statusMessage.contains(&quot;was assigned successfully&quot;)) {
		should_restart = true
		failure_message += &quot;Status: ${data.statusCode}, Message: ${data.statusMessage}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO GET SUMMARY - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Submit Assesment (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/submit</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;caReferenceNum&quot;:&quot;${assessment_id}&quot;,&quot;localeId&quot;:&quot;en&quot;,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Saved Successfully" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def file_name = &quot;good_creds.txt&quot;

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!data?.statusMessage?.contains(&quot;submitted successfully&quot;)) {
		should_restart = true
		failure_message += data?.toString() ?: &quot;null response&quot;
	}
	else {
		def fl = new File(file_name)
		fl &lt;&lt; vars.get(&apos;USER&apos;)
		fl &lt;&lt; &quot;/n&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;UNABLE TO SUBMIT - RESTARTING TREAD&quot;
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Refresh Token (GET)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/auth/token/refresh</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Token Refresh Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

def failure_message = &quot;&quot;
def should_restart = true
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(data.token) {
		vars.put(&apos;auth_token&apos;, data.token)
		should_restart = false
	}
} catch (Exception ex) {
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: EO - Search for a Client (POST)" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${CA_URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">CommonAssessmentAPI/search/locale/en</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;firstName&quot;:null,&quot;lastName&quot;:null,&quot;dateOfBirth&quot;:null,&quot;city&quot;:null,&quot;sin&quot;:null,&quot;postalCode&quot;:null,&quot;phoneNumber&quot;:null,&quot;email&quot;:null,&quot;clientId&quot;:null,&quot;caId&quot;:&quot;${assessment_id}&quot;,&quot;userId&quot;:&quot;${USER}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify SIN not found" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!(data?.statusMessage?.contains(&quot;No record found.&quot;) || data?.statusMessage?.contains(&quot;No client information found&quot;))) {
		should_restart = true
	}
} catch (Exception ex) {
	should_restart = true
	//log.info ex.message
	AssertionResult.setFailureMessage(&quot;Response is not a JSON object.&quot;);
     AssertionResult.setFailure(true);
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
	log.info &quot;EO - INCOMPATIBLE SIN - RESTARTING TREAD&quot;
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="Property Display" enabled="true"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
