<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="APPR application">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.3.1.23. Please contact support@blazemeter.com for further support.</stringProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;113&quot;, &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
          </elementProp>
          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
            <stringProp name="Header.value">1</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">intra.qa.ops.eois.labour.gov.on.ca</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
        <stringProp name="filename">creds/appr_creds.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">USER,PASSWORD</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Create Sponsor">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1049888847">
            <stringProp name="-975060588">${__P(users_csp,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="newType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">newType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">passwordFromHeader</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submitLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submitLogin</stringProp>
                  <stringProp name="Argument.value">log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userIDFromHeader</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="predefroles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">predefroles</stringProp>
                  <stringProp name="Argument.value">1700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /Program Entry - Apprenticeship section/
		match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Apprenticeship Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Sponsor\/Employer Search/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Apprenticeship Search Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Apprenticeship Search Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Apprenticeship" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="legalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">legalName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__BACK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__BACK</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.areaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.areaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.lineNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">Alan</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.prefix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">LTEE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Sponsor\/Employer ID/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot; Search Apprenticeship IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot; Search Apprenticeship: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Create Apprenticeship page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/XSponsorX/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Enter the specific TOSS code/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Create Apprenticeship page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Create Apprenticeship page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Select Trade/Occupation" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/DisplayProgramQuestions.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">425A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerRequirementsAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerRequirementsAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Does the applicant currently have a location in Ontario\?/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Select Trade/Occupation IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Select Trade/Occupation: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Accept Program Questions" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/AcceptProgramQuestions.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">true,false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">true,false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_fr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_fr</stringProp>
                  <stringProp name="Argument.value">Technicien d&apos;entretien automobile (Apprentissage)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillSetInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillSetInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorTypeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorTypeDisplayed</stringProp>
                  <stringProp name="Argument.value">SPONSEMPL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillsInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillsInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.03,Repair body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.04,Verify repair of body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.01,Perform visual inspection,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.02,Diagnose and troubleshoot body and trim,Carrosserie et sellerie,APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.07,Verify repair of anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.06,Repair anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.05,Diagnose and troubleshoot anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.03,Repair hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.02,Diagnose and troubleshoot hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.04,Verify repair of hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.09,Repair anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.10,Verify repair of anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.11,Measure and resurface brake drums, linings, and rotors,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.08,Diagnose and troubleshoot anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.03,Repair drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.04,Verify repair of drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.02,Diagnose and troubleshoot drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.03,Repair body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.02,Diagnose and troubleshoot body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.06,Repair supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.05,Diagnose and troubleshoot supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.07,Verify repair of supplemental restraint system (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.04,Verify repair of body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.08,Repair charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.09,Verify repair of charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.03,Service and boost/charge batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.02,Diagnose and troubleshoot batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.06,Verify repair of starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.07,Diagnose and troubleshoot charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.04,Diagnose and troubleshoot starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.05,Repair starting systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.13,Perform mechanical diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.12,Perform electronic diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.11,Perform gasoline engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.10,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.08,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.02,Diagnose and troubleshoot fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.03,Repair fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.04,Verify repair of fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.09,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.07,Verify repair of ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.06,Repair ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.05,Diagnose and troubleshoot ignition systems and components,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,U5161.07,Verify repair of engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.08,Diagnose and troubleshoot cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.13,Verify repair of engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.01,Perform visual inspection,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.02,Diagnose and troubleshoot cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.03,Repair cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.09,Repair cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.11,Diagnose and troubleshoot engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.10,Verify repair of cylinder heads and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.06,Repair engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.05,Diagnose and troubleshoot engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.04,Verify repair of cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.12,Repair engine blocks and components,Moteurs,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.02,Diagnose and troubleshoot exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.13,Verify repair of Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.09,Repair Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.10,Verify repair of Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.11,Diagnose and troubleshoot Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.12,Repair Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.03,Repair exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.04,Verify repair of exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.05,Diagnose and troubleshoot turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.06,Repair turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.07,Verify repair of turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.08,Diagnose and troubleshoot Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.02,Diagnose and troubleshoot gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.03,Repair gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.04,Verify repair of gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.05,Diagnose and troubleshoot diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.06,Repair diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.07,Verify repair of diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.02,Diagnose and troubleshoot air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.03,Repair air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.04,Verify repair of air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.05,Diagnose and troubleshoot heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.07,Verify repair of heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.06,Repair heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer],U5175A,Hybrid Vehicle Systems,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.01,Identify potential workplace health and safety hazards,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.03,Wear and maintain personal protective equipment,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.04,Comply with workplace-related legislation,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.06,Practice good housekeeping in the workplace,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.05,Interpret and apply service-related information,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.02,Handle, store and dispose of hazardous materials,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.07,Comply with Workplace Hazardous Materials Information System (WHMIS) guidelines,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.04,Verify repair of steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.03,Repair steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.02,Diagnose and troubleshoot steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.05,Align steering, axles, and suspensions,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.04,Verify repair of suspension systems, frames/sub-frames, and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.02,Diagnose and troubleshoot suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.03,Repair suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.01,Perform visual inspection,Suspensions et cadres,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.01,Perform visual inspection,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.05,Balance tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.04,Verify repair of tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.03,Repair tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.02,Diagnose and troubleshoot tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.15,Repair transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.14,Diagnose and troubleshoot transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.13,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.12,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.11,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.10,Verify repair of automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.09,Repair automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.08,Diagnose and troubleshoot automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.16,Verify repair of transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.07,Verify repair of manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.06,Repair manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.05,Diagnose and troubleshoot manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.03,Repair clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.02,Diagnose and troubleshoot clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.04,Verify repair of clutch systems and components,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerQualificationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerQualificationDisplayed</stringProp>
                  <stringProp name="Argument.value">PRIORCERT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_en" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_en</stringProp>
                  <stringProp name="Argument.value">Automotive Service Technician Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /to be used to contact the Sponsor\/Employer and prepare/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Lookup Sponsor Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/AcceptSponsor.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="formname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">formname</stringProp>
                  <stringProp name="Argument.value">Sponsor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorOwner" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorOwner</stringProp>
                  <stringProp name="Argument.value">${sponsorOwner}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxExchange</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillsInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillsInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.03,Repair body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.04,Verify repair of body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.01,Perform visual inspection,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.02,Diagnose and troubleshoot body and trim,Carrosserie et sellerie,APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.07,Verify repair of anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.06,Repair anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.05,Diagnose and troubleshoot anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.03,Repair hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.02,Diagnose and troubleshoot hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.04,Verify repair of hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.09,Repair anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.10,Verify repair of anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.11,Measure and resurface brake drums, linings, and rotors,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.08,Diagnose and troubleshoot anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.03,Repair drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.04,Verify repair of drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.02,Diagnose and troubleshoot drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.03,Repair body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.02,Diagnose and troubleshoot body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.06,Repair supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.05,Diagnose and troubleshoot supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.07,Verify repair of supplemental restraint system (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.04,Verify repair of body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.08,Repair charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.09,Verify repair of charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.03,Service and boost/charge batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.02,Diagnose and troubleshoot batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.06,Verify repair of starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.07,Diagnose and troubleshoot charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.04,Diagnose and troubleshoot starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.05,Repair starting systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.13,Perform mechanical diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.12,Perform electronic diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.11,Perform gasoline engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.10,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.08,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.02,Diagnose and troubleshoot fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.03,Repair fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.04,Verify repair of fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.09,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.07,Verify repair of ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.06,Repair ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.05,Diagnose and troubleshoot ignition systems and components,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,U5161.07,Verify repair of engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.08,Diagnose and troubleshoot cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.13,Verify repair of engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.01,Perform visual inspection,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.02,Diagnose and troubleshoot cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.03,Repair cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.09,Repair cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.11,Diagnose and troubleshoot engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.10,Verify repair of cylinder heads and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.06,Repair engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.05,Diagnose and troubleshoot engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.04,Verify repair of cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.12,Repair engine blocks and components,Moteurs,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.02,Diagnose and troubleshoot exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.13,Verify repair of Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.09,Repair Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.10,Verify repair of Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.11,Diagnose and troubleshoot Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.12,Repair Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.03,Repair exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.04,Verify repair of exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.05,Diagnose and troubleshoot turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.06,Repair turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.07,Verify repair of turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.08,Diagnose and troubleshoot Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.02,Diagnose and troubleshoot gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.03,Repair gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.04,Verify repair of gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.05,Diagnose and troubleshoot diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.06,Repair diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.07,Verify repair of diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.02,Diagnose and troubleshoot air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.03,Repair air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.04,Verify repair of air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.05,Diagnose and troubleshoot heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.07,Verify repair of heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.06,Repair heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer],U5175A,Hybrid Vehicle Systems,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.01,Identify potential workplace health and safety hazards,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.03,Wear and maintain personal protective equipment,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.04,Comply with workplace-related legislation,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.06,Practice good housekeeping in the workplace,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.05,Interpret and apply service-related information,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.02,Handle, store and dispose of hazardous materials,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.07,Comply with Workplace Hazardous Materials Information System (WHMIS) guidelines,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.04,Verify repair of steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.03,Repair steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.02,Diagnose and troubleshoot steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.05,Align steering, axles, and suspensions,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.04,Verify repair of suspension systems, frames/sub-frames, and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.02,Diagnose and troubleshoot suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.03,Repair suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.01,Perform visual inspection,Suspensions et cadres,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.01,Perform visual inspection,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.05,Balance tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.04,Verify repair of tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.03,Repair tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.02,Diagnose and troubleshoot tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.15,Repair transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.14,Diagnose and troubleshoot transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.13,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.12,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.11,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.10,Verify repair of automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.09,Repair automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.08,Diagnose and troubleshoot automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.16,Verify repair of transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.07,Verify repair of manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.06,Repair manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.05,Diagnose and troubleshoot manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.03,Repair clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.02,Diagnose and troubleshoot clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.04,Verify repair of clutch systems and components,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteaddressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteaddressproperty</stringProp>
                  <stringProp name="Argument.value">siteAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="addressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addressproperty</stringProp>
                  <stringProp name="Argument.value">address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerQualificationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerQualificationDisplayed</stringProp>
                  <stringProp name="Argument.value">PRIORCERT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_en" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_en</stringProp>
                  <stringProp name="Argument.value">Automotive Service Technician Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.countryCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.additionalDeliverInformation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.additionalDeliverInformation</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExchange</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactAreaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteformname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteformname</stringProp>
                  <stringProp name="Argument.value">Sponsor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerRequirementsAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerRequirementsAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_fr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_fr</stringProp>
                  <stringProp name="Argument.value">Technicien d&apos;entretien automobile (Apprentissage)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">L4J 9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">${sponsorName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Look up Address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillSetInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillSetInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExtension" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExtension</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorTypeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorTypeDisplayed</stringProp>
                  <stringProp name="Argument.value">SPONSEMPL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="groupSponsorPurpose" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">groupSponsorPurpose</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">returnURL</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/APPRWEB/PR/setAddressPropsMail.do</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxAreaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prefLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prefLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorPartyType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorPartyType</stringProp>
                  <stringProp name="Argument.value">LTEE,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactEmail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactEmail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorLegalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorLegalName</stringProp>
                  <stringProp name="Argument.value">${sponsorLegalName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR,ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RSU

vars.put(&apos;sponsorOwner&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)}&quot;)
vars.put(&apos;sponsorName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)}&quot;)
vars.put(&apos;sponsorLegalName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)} LTD&quot;)
vars.put(&apos;contactName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /The postal code database has returned multiple results/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Lookup Sponsor Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Lookup Sponsor Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Select Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/addresslookup/AddressChoice.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="lookup" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lookup</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="addressIndex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addressIndex</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="event:next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">event:next</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Please complete additional address fields where necessary/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Select Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Select Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Complete Mailing Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/addresslookup/EditLookupMailingAddress.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetType</stringProp>
                  <stringProp name="Argument.value">GATE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">THORNHILL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">unitNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="event:next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">event:next</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">civicNumber</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetName</stringProp>
                  <stringProp name="Argument.value">BASIE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PCL_ERR_CNT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PCL_ERR_CNT</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">countryCode</stringProp>
                  <stringProp name="Argument.value">CANADA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /to be used to contact the Sponsor\/Employer and prepare/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Complete Mailing Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Complete Mailing Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Accept Sponsor with Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/AcceptSponsor.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">GATE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="formname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">formname</stringProp>
                  <stringProp name="Argument.value">Sponsor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorOwner" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorOwner</stringProp>
                  <stringProp name="Argument.value">${sponsorOwner}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxExchange</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillsInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillsInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.03,Repair body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.04,Verify repair of body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.01,Perform visual inspection,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.02,Diagnose and troubleshoot body and trim,Carrosserie et sellerie,APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.07,Verify repair of anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.06,Repair anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.05,Diagnose and troubleshoot anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.03,Repair hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.02,Diagnose and troubleshoot hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.04,Verify repair of hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.09,Repair anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.10,Verify repair of anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.11,Measure and resurface brake drums, linings, and rotors,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.08,Diagnose and troubleshoot anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.03,Repair drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.04,Verify repair of drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.02,Diagnose and troubleshoot drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.03,Repair body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.02,Diagnose and troubleshoot body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.06,Repair supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.05,Diagnose and troubleshoot supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.07,Verify repair of supplemental restraint system (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.04,Verify repair of body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.08,Repair charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.09,Verify repair of charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.03,Service and boost/charge batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.02,Diagnose and troubleshoot batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.06,Verify repair of starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.07,Diagnose and troubleshoot charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.04,Diagnose and troubleshoot starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.05,Repair starting systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.13,Perform mechanical diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.12,Perform electronic diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.11,Perform gasoline engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.10,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.08,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.02,Diagnose and troubleshoot fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.03,Repair fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.04,Verify repair of fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.09,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.07,Verify repair of ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.06,Repair ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.05,Diagnose and troubleshoot ignition systems and components,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,U5161.07,Verify repair of engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.08,Diagnose and troubleshoot cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.13,Verify repair of engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.01,Perform visual inspection,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.02,Diagnose and troubleshoot cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.03,Repair cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.09,Repair cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.11,Diagnose and troubleshoot engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.10,Verify repair of cylinder heads and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.06,Repair engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.05,Diagnose and troubleshoot engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.04,Verify repair of cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.12,Repair engine blocks and components,Moteurs,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.02,Diagnose and troubleshoot exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.13,Verify repair of Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.09,Repair Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.10,Verify repair of Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.11,Diagnose and troubleshoot Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.12,Repair Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.03,Repair exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.04,Verify repair of exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.05,Diagnose and troubleshoot turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.06,Repair turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.07,Verify repair of turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.08,Diagnose and troubleshoot Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.02,Diagnose and troubleshoot gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.03,Repair gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.04,Verify repair of gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.05,Diagnose and troubleshoot diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.06,Repair diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.07,Verify repair of diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.02,Diagnose and troubleshoot air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.03,Repair air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.04,Verify repair of air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.05,Diagnose and troubleshoot heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.07,Verify repair of heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.06,Repair heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer],U5175A,Hybrid Vehicle Systems,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.01,Identify potential workplace health and safety hazards,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.03,Wear and maintain personal protective equipment,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.04,Comply with workplace-related legislation,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.06,Practice good housekeeping in the workplace,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.05,Interpret and apply service-related information,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.02,Handle, store and dispose of hazardous materials,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.07,Comply with Workplace Hazardous Materials Information System (WHMIS) guidelines,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.04,Verify repair of steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.03,Repair steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.02,Diagnose and troubleshoot steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.05,Align steering, axles, and suspensions,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.04,Verify repair of suspension systems, frames/sub-frames, and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.02,Diagnose and troubleshoot suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.03,Repair suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.01,Perform visual inspection,Suspensions et cadres,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.01,Perform visual inspection,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.05,Balance tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.04,Verify repair of tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.03,Repair tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.02,Diagnose and troubleshoot tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.15,Repair transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.14,Diagnose and troubleshoot transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.13,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.12,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.11,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.10,Verify repair of automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.09,Repair automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.08,Diagnose and troubleshoot automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.16,Verify repair of transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.07,Verify repair of manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.06,Repair manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.05,Diagnose and troubleshoot manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.03,Repair clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.02,Diagnose and troubleshoot clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.04,Verify repair of clutch systems and components,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteaddressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteaddressproperty</stringProp>
                  <stringProp name="Argument.value">siteAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="addressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addressproperty</stringProp>
                  <stringProp name="Argument.value">address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerQualificationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerQualificationDisplayed</stringProp>
                  <stringProp name="Argument.value">PRIORCERT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">THORNHILL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value">${contactName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_en" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_en</stringProp>
                  <stringProp name="Argument.value">Automotive Service Technician Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.countryCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.additionalDeliverInformation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.additionalDeliverInformation</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExchange</stringProp>
                  <stringProp name="Argument.value">646</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactAreaCode</stringProp>
                  <stringProp name="Argument.value">647</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteformname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteformname</stringProp>
                  <stringProp name="Argument.value">Sponsor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerRequirementsAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerRequirementsAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_fr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_fr</stringProp>
                  <stringProp name="Argument.value">Technicien d&apos;entretien automobile (Apprentissage)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">${sponsorName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillSetInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillSetInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExtension" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExtension</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorTypeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorTypeDisplayed</stringProp>
                  <stringProp name="Argument.value">SPONSEMPL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactNumber</stringProp>
                  <stringProp name="Argument.value">6366</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="groupSponsorPurpose" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">groupSponsorPurpose</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">returnURL</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/APPRWEB/PR/setAddressPropsMail.do</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxAreaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prefLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prefLanguage</stringProp>
                  <stringProp name="Argument.value">EN,EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorPartyType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorPartyType</stringProp>
                  <stringProp name="Argument.value">LTEE,LTEE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactEmail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactEmail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">BASIE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorLegalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorLegalName</stringProp>
                  <stringProp name="Argument.value">${sponsorLegalName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR,ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /The applicant entered the following information on their application/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Sponsor with Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Sponsor with Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Confirm Party Identification" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/AcceptConfirmPartyIdentification.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">GATE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorOwner" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorOwner</stringProp>
                  <stringProp name="Argument.value">${sponsorOwner}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillsInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillsInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.03,Repair body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.04,Verify repair of body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.01,Perform visual inspection,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.02,Diagnose and troubleshoot body and trim,Carrosserie et sellerie,APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.07,Verify repair of anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.06,Repair anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.05,Diagnose and troubleshoot anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.03,Repair hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.02,Diagnose and troubleshoot hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.04,Verify repair of hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.09,Repair anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.10,Verify repair of anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.11,Measure and resurface brake drums, linings, and rotors,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.08,Diagnose and troubleshoot anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.03,Repair drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.04,Verify repair of drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.02,Diagnose and troubleshoot drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.03,Repair body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.02,Diagnose and troubleshoot body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.06,Repair supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.05,Diagnose and troubleshoot supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.07,Verify repair of supplemental restraint system (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.04,Verify repair of body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.08,Repair charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.09,Verify repair of charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.03,Service and boost/charge batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.02,Diagnose and troubleshoot batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.06,Verify repair of starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.07,Diagnose and troubleshoot charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.04,Diagnose and troubleshoot starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.05,Repair starting systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.13,Perform mechanical diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.12,Perform electronic diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.11,Perform gasoline engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.10,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.08,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.02,Diagnose and troubleshoot fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.03,Repair fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.04,Verify repair of fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.09,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.07,Verify repair of ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.06,Repair ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.05,Diagnose and troubleshoot ignition systems and components,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,U5161.07,Verify repair of engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.08,Diagnose and troubleshoot cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.13,Verify repair of engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.01,Perform visual inspection,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.02,Diagnose and troubleshoot cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.03,Repair cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.09,Repair cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.11,Diagnose and troubleshoot engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.10,Verify repair of cylinder heads and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.06,Repair engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.05,Diagnose and troubleshoot engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.04,Verify repair of cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.12,Repair engine blocks and components,Moteurs,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.02,Diagnose and troubleshoot exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.13,Verify repair of Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.09,Repair Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.10,Verify repair of Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.11,Diagnose and troubleshoot Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.12,Repair Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.03,Repair exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.04,Verify repair of exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.05,Diagnose and troubleshoot turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.06,Repair turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.07,Verify repair of turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.08,Diagnose and troubleshoot Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.02,Diagnose and troubleshoot gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.03,Repair gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.04,Verify repair of gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.05,Diagnose and troubleshoot diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.06,Repair diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.07,Verify repair of diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.02,Diagnose and troubleshoot air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.03,Repair air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.04,Verify repair of air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.05,Diagnose and troubleshoot heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.07,Verify repair of heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.06,Repair heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer],U5175A,Hybrid Vehicle Systems,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.01,Identify potential workplace health and safety hazards,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.03,Wear and maintain personal protective equipment,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.04,Comply with workplace-related legislation,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.06,Practice good housekeeping in the workplace,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.05,Interpret and apply service-related information,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.02,Handle, store and dispose of hazardous materials,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.07,Comply with Workplace Hazardous Materials Information System (WHMIS) guidelines,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.04,Verify repair of steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.03,Repair steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.02,Diagnose and troubleshoot steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.05,Align steering, axles, and suspensions,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.04,Verify repair of suspension systems, frames/sub-frames, and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.02,Diagnose and troubleshoot suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.03,Repair suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.01,Perform visual inspection,Suspensions et cadres,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.01,Perform visual inspection,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.05,Balance tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.04,Verify repair of tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.03,Repair tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.02,Diagnose and troubleshoot tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.15,Repair transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.14,Diagnose and troubleshoot transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.13,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.12,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.11,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.10,Verify repair of automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.09,Repair automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.08,Diagnose and troubleshoot automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.16,Verify repair of transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.07,Verify repair of manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.06,Repair manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.05,Diagnose and troubleshoot manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.03,Repair clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.02,Diagnose and troubleshoot clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.04,Verify repair of clutch systems and components,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerQualificationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerQualificationDisplayed</stringProp>
                  <stringProp name="Argument.value">PRIORCERT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="designatePartyConfirmationChoice" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">designatePartyConfirmationChoice</stringProp>
                  <stringProp name="Argument.value">none_designate_party</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">THORNHILL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__googleReturnActionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__googleReturnActionPath</stringProp>
                  <stringProp name="Argument.value">/Sponsor/AcceptSponsorRequirements</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value">${contactName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_en" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_en</stringProp>
                  <stringProp name="Argument.value">Automotive Service Technician Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExchange</stringProp>
                  <stringProp name="Argument.value">646</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactAreaCode</stringProp>
                  <stringProp name="Argument.value">647</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerRequirementsAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerRequirementsAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_fr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_fr</stringProp>
                  <stringProp name="Argument.value">Technicien d&apos;entretien automobile (Apprentissage)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">${sponsorName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillSetInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillSetInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorTypeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorTypeDisplayed</stringProp>
                  <stringProp name="Argument.value">SPONSEMPL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactNumber</stringProp>
                  <stringProp name="Argument.value">6366</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorPartyConfirmationChoice" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorPartyConfirmationChoice</stringProp>
                  <stringProp name="Argument.value">new_sponsor_party</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prefLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prefLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorPartyType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorPartyType</stringProp>
                  <stringProp name="Argument.value">LTEE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">BASIE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorLegalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorLegalName</stringProp>
                  <stringProp name="Argument.value">${sponsorLegalName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="confirm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">confirm</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button.applyonline.sponsor.confirmparties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button.applyonline.sponsor.confirmparties</stringProp>
                  <stringProp name="Argument.value">Confirm party identification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Please take a moment to review the information below/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Confirm Party Identification IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def http_props = [:]
			def inputs = res[1][0] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Confirm Party Identification: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Submit Apprenticeship" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/XSponsorX/AcceptConfirmation.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Update Applied and Activity May Follow/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Submit Apprenticeship IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Submit Apprenticeship: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Create Client" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-446583730">
            <stringProp name="-1436821088">${__P(users_ccl,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate Custom SIN" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.util.Random;
import java.io.File;
import org.apache.jmeter.services.FileServer

def getCheckDigit(List digits) {
   def sum = digits.withIndex()
       .collect { d, i -&gt;
           i % 2 == 0 ? d : d * 2
       }
       .collect { d -&gt;
           d.intdiv(10) + (d % 10)
       }
       .sum()
   
  return (sum % 10) ? 10 - (sum % 10) : 0
}

def generate() {
   def random = new Random(System.currentTimeMillis());
   def digits = [random.nextInt(7) + 1]
   for(def i : (1..7)) {
       digits.add(random.nextInt(10))
   }
   
   digits.add(getCheckDigit(digits))
   def result = digits.collect { d -&gt;
       d.toString()
   }
   .join(&apos;&apos;)
}

def old_sins = []
if(vars.get(&quot;SIN_FILE_NAME&quot;)) {
	try {
		def path = FileServer.getFileServer().getBaseDir()
		File file = new File(&quot;$path/${SIN_FILE_NAME}&quot;)
		file.eachLine { line -&gt;
			old_sins.add(line.trim())
		}
	} catch(Exception ex) {
		log.info &quot;Unable to read file: ${ex.message}&quot;
	}
}

do {
	String new_sin = generate()
	//String new_sin = &quot;518648126&quot;
	
	if(!old_sins.contains(new_sin)) {
		vars.put(&apos;sin_number&apos;, new_sin)
		break
	}
} while(true)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="newType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">newType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">passwordFromHeader</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submitLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submitLogin</stringProp>
                  <stringProp name="Argument.value">log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userIDFromHeader</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="predefroles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">predefroles</stringProp>
                  <stringProp name="Argument.value">1700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Client Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Program Entry Client Search/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Client Search Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Client Search Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Client" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">Alan</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_1</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasppID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasppID</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_2</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_3</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__BACK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__BACK</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">Smith</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="OEN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">OEN</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Client ID:/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Search Client IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Search Client: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Choose Program Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApprenticeshipChooseProgram.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Choose a trade\/occupation/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Choose Program Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Choose Program Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Accept Program Questions" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptTOSSQuestions.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="feeDetails.showButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.showButton</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.year</stringProp>
                  <stringProp name="Argument.value">2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isButtonShow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isButtonShow</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isDocShown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isDocShown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixAddress</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isUserInternal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isUserInternal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isReissue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isReissue</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixPayment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixPayment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdInput</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isFrmWorkFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isFrmWorkFlow</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.returnCertificate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.returnCertificate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.clientIdentified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.clientIdentified</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.date</stringProp>
                  <stringProp name="Argument.value">2023-10-26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.month</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.personalInfoPopulated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.personalInfoPopulated</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">425A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.acceptAgreement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.acceptAgreement</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSinEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSinEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.reissueReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.reissueReasonCode</stringProp>
                  <stringProp name="Argument.value">FULL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.numOfTimeTried" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.numOfTimeTried</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nextstep" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nextstep</stringProp>
                  <stringProp name="Argument.value"> Next Step </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isApproved</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isWall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isWall</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.day</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.countEntryTimes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.countEntryTimes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Postsecondary Education and\/or Training Completed/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Postal Code Lookup" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptClientPersonalInfo.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="feeDetails.showButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.showButton</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.year</stringProp>
                  <stringProp name="Argument.value">2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="formname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">formname</stringProp>
                  <stringProp name="Argument.value">ProgramEntryAnswers</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isButtonShow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isButtonShow</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isDocShown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isDocShown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="residencyStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">residencyStatus</stringProp>
                  <stringProp name="Argument.value">CANCITIZEN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preferredName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preferredName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="addressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addressproperty</stringProp>
                  <stringProp name="Argument.value">address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2no</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="electronicMail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">electronicMail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixAddress</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.additionalDeliverInformation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.additionalDeliverInformation</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2ex</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isUserInternal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isUserInternal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isReissue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isReissue</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossLegislationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossLegislationType</stringProp>
                  <stringProp name="Argument.value">ACARES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${lastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixPayment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixPayment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1area</stringProp>
                  <stringProp name="Argument.value">634</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdInput</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2ext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2ext</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isFrmWorkFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isFrmWorkFlow</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2type</stringProp>
                  <stringProp name="Argument.value">CELL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin1</stringProp>
                  <stringProp name="Argument.value">${sin1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin0</stringProp>
                  <stringProp name="Argument.value">${sin0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin2</stringProp>
                  <stringProp name="Argument.value">${sin2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.returnCertificate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.returnCertificate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.clientIdentified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.clientIdentified</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.date</stringProp>
                  <stringProp name="Argument.value">2023-10-26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.month</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedQualificationMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedQualificationMethod</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.personalInfoPopulated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.personalInfoPopulated</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="genderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">genderType</stringProp>
                  <stringProp name="Argument.value">F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.acceptAgreement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.acceptAgreement</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">${firstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numOfDependence" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numOfDependence</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSinEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSinEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.reissueReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.reissueReasonCode</stringProp>
                  <stringProp name="Argument.value">FULL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1ext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1ext</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preferredLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preferredLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.numOfTimeTried" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.numOfTimeTried</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Look up Address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isApproved</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isWall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isWall</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.day</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">returnURL</stringProp>
                  <stringProp name="Argument.value">https://apprweb.ws.qa.services.eois.labour.gov.on.ca/APPRWEB/PR/setAddressPropsMail.do</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1no</stringProp>
                  <stringProp name="Argument.value">4653</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2area</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="instructionLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">instructionLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1type</stringProp>
                  <stringProp name="Argument.value">HOME</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1ex</stringProp>
                  <stringProp name="Argument.value">765</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="middleName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">middleName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.countEntryTimes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.countEntryTimes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="primaryLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">primaryLanguage</stringProp>
                  <stringProp name="Argument.value">ENGLISH</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RSU

def sin = vars.get(&apos;sin_number&apos;)
vars.put(&apos;sin0&apos;, sin.substring(0, 3))
vars.put(&apos;sin1&apos;, sin.substring(3, 6))
vars.put(&apos;sin2&apos;, sin.substring(6))

vars.put(&apos;lastName&apos;, RSU.randomAlphabetic(5,8))
vars.put(&apos;firstName&apos;, RSU.randomAlphabetic(4,9))
vars.put(&apos;sponsorLegalName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)} LTD&quot;)
vars.put(&apos;contactName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Postal Code Look-up/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Lookup Sponsor Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Lookup Sponsor Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Select Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/addresslookup/EditLookupMailingAddress.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetType</stringProp>
                  <stringProp name="Argument.value">RD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">unitNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="event:next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">event:next</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">civicNumber</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetName</stringProp>
                  <stringProp name="Argument.value">CLOVERDALE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PCL_ERR_CNT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PCL_ERR_CNT</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">countryCode</stringProp>
                  <stringProp name="Argument.value">CANADA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Postsecondary Education and\/or Training Completed/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Lookup Sponsor Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Select Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Submit Client Personal Info" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptClientPersonalInfo.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">${firstName}</stringProp>
                </elementProp>
                <elementProp name="middleName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">middleName</stringProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${lastName}</stringProp>
                </elementProp>
                <elementProp name="preferredName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">preferredName</stringProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                </elementProp>
                <elementProp name="sin0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sin0</stringProp>
                  <stringProp name="Argument.value">${sin0}</stringProp>
                </elementProp>
                <elementProp name="sin1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sin1</stringProp>
                  <stringProp name="Argument.value">${sin1}</stringProp>
                </elementProp>
                <elementProp name="sin2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sin2</stringProp>
                  <stringProp name="Argument.value">${sin2}</stringProp>
                </elementProp>
                <elementProp name="ph1type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1type</stringProp>
                  <stringProp name="Argument.value">HOME</stringProp>
                </elementProp>
                <elementProp name="ph1area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1area</stringProp>
                  <stringProp name="Argument.value">324</stringProp>
                </elementProp>
                <elementProp name="ph1ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1ex</stringProp>
                  <stringProp name="Argument.value">234</stringProp>
                </elementProp>
                <elementProp name="ph1no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1no</stringProp>
                  <stringProp name="Argument.value">3234</stringProp>
                </elementProp>
                <elementProp name="ph1ext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1ext</stringProp>
                </elementProp>
                <elementProp name="ph2type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2type</stringProp>
                  <stringProp name="Argument.value">CELL</stringProp>
                </elementProp>
                <elementProp name="ph2area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2area</stringProp>
                </elementProp>
                <elementProp name="ph2ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2ex</stringProp>
                </elementProp>
                <elementProp name="ph2no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2no</stringProp>
                </elementProp>
                <elementProp name="ph2ext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2ext</stringProp>
                </elementProp>
                <elementProp name="electronicMail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">electronicMail</stringProp>
                </elementProp>
                <elementProp name="schoolName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">schoolName</stringProp>
                </elementProp>
                <elementProp name="genderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">genderType</stringProp>
                  <stringProp name="Argument.value">M</stringProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                </elementProp>
                <elementProp name="numOfDependence" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">numOfDependence</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                </elementProp>
                <elementProp name="preferredLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">preferredLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                </elementProp>
                <elementProp name="instructionLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">instructionLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                </elementProp>
                <elementProp name="residencyStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">residencyStatus</stringProp>
                  <stringProp name="Argument.value">CANCITIZEN</stringProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                </elementProp>
                <elementProp name="immigrantYear" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">immigrantYear</stringProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="formname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">formname</stringProp>
                  <stringProp name="Argument.value">ProgramEntryAnswers</stringProp>
                </elementProp>
                <elementProp name="addressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">addressproperty</stringProp>
                  <stringProp name="Argument.value">address</stringProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">CLOVERDALE</stringProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">RD</stringProp>
                </elementProp>
                <elementProp name="address.streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.streetDirectionCode</stringProp>
                </elementProp>
                <elementProp name="address.postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.postOfficeBoxId</stringProp>
                </elementProp>
                <elementProp name="address.deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryMode</stringProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationType</stringProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationQualifier</stringProp>
                </elementProp>
                <elementProp name="address.suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.suffix</stringProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                </elementProp>
                <elementProp name="address.additionalDeliverInformation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.additionalDeliverInformation</stringProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="returnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">returnURL</stringProp>
                  <stringProp name="Argument.value">https://apprweb.ws.qa.services.eois.labour.gov.on.ca/APPRWEB/PR/setAddressPropsMail.do</stringProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.acceptAgreement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.acceptAgreement</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.client.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.client.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.client.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.clientIdentified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.clientIdentified</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.countEntryTimes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.countEntryTimes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.date</stringProp>
                  <stringProp name="Argument.value">2023-10-26</stringProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.day</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.month</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.year</stringProp>
                  <stringProp name="Argument.value">2023</stringProp>
                </elementProp>
                <elementProp name="feeDetails.inFixAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixAddress</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.inFixPayment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixPayment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isApproved</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isButtonShow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isButtonShow</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdInput</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isDocShown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isDocShown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isFrmWorkFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isFrmWorkFlow</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isReissue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isReissue</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isSinEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSinEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isUserInternal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isUserInternal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isWall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isWall</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.numOfTimeTried" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.numOfTimeTried</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="feeDetails.payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.date</stringProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.personalInfoPopulated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.personalInfoPopulated</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                </elementProp>
                <elementProp name="feeDetails.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.reissueReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.reissueReasonCode</stringProp>
                  <stringProp name="Argument.value">FULL</stringProp>
                </elementProp>
                <elementProp name="feeDetails.returnCertificate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.returnCertificate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="feeDetails.showButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.showButton</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="selectedQualificationMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedQualificationMethod</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                </elementProp>
                <elementProp name="tossLegislationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tossLegislationType</stringProp>
                  <stringProp name="Argument.value">ACARES</stringProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Required Documents/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Submit Client Personal Info IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Submit Client Personal Info HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;hidden&quot;.*?name=&quot;org\.apache\.struts\.taglib\.html\.TOKEN&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def inputs = res[1][0] =~ pattern
			if(inputs.size() &lt; 1) {
				should_restart = true
			} else {
				vars.put(&apos;html_token&apos;, inputs[0][1])
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Submit Client Personal Info: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search School Board" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ajax/searchSchoolBoard.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="district" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">district</stringProp>
                  <stringProp name="Argument.value">01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!&quot;200&quot;.equals(prev.getResponseCode()) || !data || data?.size() &lt; 1) {
		should_restart = true
		log.info &quot;DATA: ${data}&quot;
		failure_message += &quot;Response Data: ${prev.getResponseDataAsString()}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Search School Board FAILED&quot;
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Required Documents Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptRequiredDocuments.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="feeDetails.showButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.showButton</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.year</stringProp>
                  <stringProp name="Argument.value">2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeTSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeTSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isButtonShow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isButtonShow</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isDocShown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isDocShown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="residencyStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">residencyStatus</stringProp>
                  <stringProp name="Argument.value">CANCITIZEN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardID</stringProp>
                  <stringProp name="Argument.value">2539454</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixAddress</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeTSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeTSVersion</stringProp>
                  <stringProp name="Argument.value">2014-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isUserInternal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isUserInternal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isReissue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isReissue</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="next.step" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">next.step</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossLegislationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossLegislationType</stringProp>
                  <stringProp name="Argument.value">ACARES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${lastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixPayment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixPayment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1area</stringProp>
                  <stringProp name="Argument.value">634</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdInput</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isFrmWorkFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isFrmWorkFlow</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeCSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeCSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin1</stringProp>
                  <stringProp name="Argument.value">${sin1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin0</stringProp>
                  <stringProp name="Argument.value">${sin0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin2</stringProp>
                  <stringProp name="Argument.value">${sin2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.returnCertificate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.returnCertificate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.clientIdentified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.clientIdentified</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">RD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.date</stringProp>
                  <stringProp name="Argument.value">2023-10-26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.month</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedQualificationMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedQualificationMethod</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="recognitionTypesDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">recognitionTypesDisplayed</stringProp>
                  <stringProp name="Argument.value">COFA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.personalInfoPopulated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.personalInfoPopulated</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="genderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">genderType</stringProp>
                  <stringProp name="Argument.value">F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeCSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeCSVersion</stringProp>
                  <stringProp name="Argument.value">2010-09-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.acceptAgreement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.acceptAgreement</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">${firstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeRSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeRSVersion</stringProp>
                  <stringProp name="Argument.value">1901-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numOfDependence" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numOfDependence</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSinEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSinEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.reissueReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.reissueReasonCode</stringProp>
                  <stringProp name="Argument.value">FULL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedDocumentSets" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedDocumentSets</stringProp>
                  <stringProp name="Argument.value">1,CPER_REQUIRED_FDSP_OYAP1,22,CPER_REQUIRED_FDSP_OYAP2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sbDistrict" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sbDistrict</stringProp>
                  <stringProp name="Argument.value">01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preferredLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preferredLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.numOfTimeTried" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.numOfTimeTried</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="org.apache.struts.taglib.html.TOKEN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">org.apache.struts.taglib.html.TOKEN</stringProp>
                  <stringProp name="Argument.value">${html_token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeRSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeRSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isApproved</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isWall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isWall</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.day</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1no</stringProp>
                  <stringProp name="Argument.value">4653</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">CLOVERDALE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="instructionLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">instructionLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1type</stringProp>
                  <stringProp name="Argument.value">HOME</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.date</stringProp>
                  <stringProp name="Argument.value">1990-02-02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1ex</stringProp>
                  <stringProp name="Argument.value">765</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.countEntryTimes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.countEntryTimes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="primaryLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">primaryLanguage</stringProp>
                  <stringProp name="Argument.value">ENGLISH</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /The applicant entered the following information on their application/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Sponsor with Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Submit Client Personal Info HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;hidden&quot;.*?name=&quot;org\.apache\.struts\.taglib\.html\.TOKEN&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def inputs = res[1][0] =~ pattern
			if(inputs.size() &lt; 1) {
				should_restart = true
			} else {
				vars.put(&apos;html_token&apos;, inputs[0][1])
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Sponsor with Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Confirm Party Identification" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptConfirmPartyIdentification.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="button.applyonline.programentry.confirmparties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button.applyonline.programentry.confirmparties</stringProp>
                  <stringProp name="Argument.value">Confirm party identification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeTSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeTSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="residencyStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">residencyStatus</stringProp>
                  <stringProp name="Argument.value">CANCITIZEN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientPartyConfirmationChoice" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientPartyConfirmationChoice</stringProp>
                  <stringProp name="Argument.value">new_client_party</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardID</stringProp>
                  <stringProp name="Argument.value">2539454</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeTSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeTSVersion</stringProp>
                  <stringProp name="Argument.value">2014-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossLegislationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossLegislationType</stringProp>
                  <stringProp name="Argument.value">ACARES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${lastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1area</stringProp>
                  <stringProp name="Argument.value">634</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeCSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeCSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin1</stringProp>
                  <stringProp name="Argument.value">${sin1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin0</stringProp>
                  <stringProp name="Argument.value">${sin0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin2</stringProp>
                  <stringProp name="Argument.value">${sin2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="confirm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">confirm</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">RD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedQualificationMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedQualificationMethod</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="recognitionTypesDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">recognitionTypesDisplayed</stringProp>
                  <stringProp name="Argument.value">COFA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="genderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">genderType</stringProp>
                  <stringProp name="Argument.value">F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeCSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeCSVersion</stringProp>
                  <stringProp name="Argument.value">2010-09-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__googleReturnActionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__googleReturnActionPath</stringProp>
                  <stringProp name="Argument.value">/ApplyOnline/DisplayConfirmation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">${firstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeRSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeRSVersion</stringProp>
                  <stringProp name="Argument.value">1901-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numOfDependence" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numOfDependence</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedDocumentSets" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedDocumentSets</stringProp>
                  <stringProp name="Argument.value">1,CPER_REQUIRED_FDSP_OYAP1,22,CPER_REQUIRED_FDSP_OYAP2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sbDistrict" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sbDistrict</stringProp>
                  <stringProp name="Argument.value">01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preferredLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preferredLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="org.apache.struts.taglib.html.TOKEN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">org.apache.struts.taglib.html.TOKEN</stringProp>
                  <stringProp name="Argument.value">${html_token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeRSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeRSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1no</stringProp>
                  <stringProp name="Argument.value">4653</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">CLOVERDALE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="instructionLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">instructionLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1type</stringProp>
                  <stringProp name="Argument.value">HOME</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.date</stringProp>
                  <stringProp name="Argument.value">1990-02-02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1ex</stringProp>
                  <stringProp name="Argument.value">765</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="primaryLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">primaryLanguage</stringProp>
                  <stringProp name="Argument.value">ENGLISH</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Confirm Application/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Sponsor with Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
		
		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def http_props = [:]
			def inputs = res[1][0] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Sponsor with Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Submit Application" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/XApplyOnlineX/AcceptConfirmation.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	//log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Application Summary/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Sponsor with Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /&lt;a href=&quot;.*?entityID=\d+?&quot; title=&quot;View Client Details&quot;&gt;(\d+)&lt;\/a&gt;/
		def inputs = data =~ pattern
		if(inputs.size() &lt; 1) {
			should_restart = true
		} else {
			vars.put(&apos;client_number&apos;, inputs[0][1])
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Sponsor with Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Client Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ClientDetailsGeneralTab.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">entityID</stringProp>
                  <stringProp name="Argument.value">${client_number}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Personal Information/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form .*?action = &quot;\/APPRWEB\/PR\/ClientDocuments\.do&quot;&gt;(.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() == 0) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def http_props = [:]
			def inputs = res[0][1] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Client&apos;s Documents Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ClientDocuments.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="x" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">x</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="y" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">y</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	//log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Social Insurance Number/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form .*?action=&quot;\/APPRWEB\/PR\/ClientDocuments\.do&quot;&gt;(.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() == 0) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def http_props = [:]
			def inputs = res[0][1] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)

			pattern = /(?ms)&lt;input type=&quot;checkbox&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def docs = []
			inputs = res[0][1] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				docs.add(inputs[idx][2])
			}
			if(docs.size() == 0) {
				should_restart = true
			} else {
				//vars.putObject(&apos;documents&apos;, docs.join(&apos;,&apos;))
				vars.putObject(&apos;documents&apos;, docs[0])
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Update Client&apos;s Documents" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ClientDocuments.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="statusFilter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">statusFilter</stringProp>
                  <stringProp name="Argument.value">%</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value">Go</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedClientDocumentList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedClientDocumentList</stringProp>
                  <stringProp name="Argument.value">${documents}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedProgram</stringProp>
                  <stringProp name="Argument.value">%</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedActionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedActionPath</stringProp>
                  <stringProp name="Argument.value">/PR/CltDtlsConfirmDoc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	//log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Status change/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=(?:&apos;|&quot;)(.*?)(?:&apos;|&quot;).*?&gt;/
			def http_props = [:]
			def inputs = res[1][0] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				//log.info &quot;${inputs[idx][2]}: ${inputs[idx][3]}&quot;
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Confirm Document Change" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/CltDtlsConfirmDoc.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="C:\Users\PanichIg\OneDrive - Government of Ontario\Documents\JMeter\CVOR\Other.png" elementType="HTTPFileArg">
                  <stringProp name="File.mimetype">image/png</stringProp>
                  <stringProp name="File.path">C:\Users\PanichIg\OneDrive - Government of Ontario\Documents\JMeter\CVOR\Other.png</stringProp>
                  <stringProp name="File.paramname">newAttachment</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="note" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">note</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="completionDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">completionDate.day</stringProp>
                </elementProp>
                <elementProp name="save" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">save</stringProp>
                  <stringProp name="Argument.value">Save</stringProp>
                </elementProp>
                <elementProp name="schoolLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">schoolLocation</stringProp>
                </elementProp>
                <elementProp name="testDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">testDate.month</stringProp>
                </elementProp>
                <elementProp name="testDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">testDate.day</stringProp>
                  <stringProp name="HTTPArgument.content_type">text/plain</stringProp>
                </elementProp>
                <elementProp name="testDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">testDate.year</stringProp>
                </elementProp>
                <elementProp name="selectedTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedTDA</stringProp>
                </elementProp>
                <elementProp name="completionDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">completionDate.month</stringProp>
                </elementProp>
                <elementProp name="completionDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">completionDate.year</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundary8AClTiRRNc588ctI</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	//log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Search Client" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="659624629">
            <stringProp name="-121664080">${__P(users_scl,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="newType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">newType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">passwordFromHeader</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submitLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submitLogin</stringProp>
                  <stringProp name="Argument.value">log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userIDFromHeader</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="predefroles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">predefroles</stringProp>
                  <stringProp name="Argument.value">1700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Client Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Program Entry Client Search/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Client Search Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Client Search Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Client" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${last_name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_1</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasppID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasppID</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_2</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_3</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__BACK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__BACK</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="OEN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">OEN</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def names = [
	[last_name: &apos;Smith&apos;],
	[last_name: &apos;Kenneth&apos;],
	[last_name: &apos;Ivanov&apos;],
	[last_name: &apos;John&apos;],
	[last_name: &apos;Jordan&apos;],
	[last_name: &apos;Li&apos;],
	[last_name: &apos;Bush&apos;],
	[last_name: &apos;Baiden&apos;],
	[last_name: &apos;Allan&apos;],
	[last_name: &apos;Levin&apos;],
	[last_name: &apos;Simpson&apos;],
	[last_name: &apos;Messi&apos;]
]

vars.put(&apos;last_name&apos;, names[new Random().nextInt(names.size())].last_name)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Client ID:/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Search Client IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Search Client: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="VU: Search Sponsor">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-217919718">
            <stringProp name="340096420">${__P(users_ssp,2)}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-787083727">${__P(startup,10)}</stringProp>
            <stringProp name="1493389315">${__P(hold_load,60)}</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(constant_delay,1000)}</stringProp>
          <stringProp name="RandomTimer.range">1500.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="newType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">newType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">passwordFromHeader</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submitLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submitLogin</stringProp>
                  <stringProp name="Argument.value">log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userIDFromHeader</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="predefroles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">predefroles</stringProp>
                  <stringProp name="Argument.value">1700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Sponsor Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/SponsorSearch.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Sponsor\/Employer Search/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Apprenticeship Search Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Apprenticeship Search Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Sponsor" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/SponsorSearch.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="legalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">legalName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__BACK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__BACK</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.areaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.areaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.lineNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">${last_name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.prefix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">LTEE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sponsorID</stringProp>
                </elementProp>
                <elementProp name="sadFirstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sadFirstName</stringProp>
                </elementProp>
                <elementProp name="sadLastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sadLastName</stringProp>
                </elementProp>
                <elementProp name="programParticipationStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">programParticipationStatus</stringProp>
                  <stringProp name="Argument.value">%A0</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def names = [
	[last_name: &apos;Smith&apos;],
	[last_name: &apos;Kenneth&apos;],
	[last_name: &apos;Ivanov&apos;],
	[last_name: &apos;John&apos;],
	[last_name: &apos;Jordan&apos;],
	[last_name: &apos;Li&apos;],
	[last_name: &apos;Bush&apos;],
	[last_name: &apos;Baiden&apos;],
	[last_name: &apos;Allan&apos;],
	[last_name: &apos;Levin&apos;],
	[last_name: &apos;Simpson&apos;],
	[last_name: &apos;Messi&apos;]
]

vars.put(&apos;last_name&apos;, names[new Random().nextInt(names.size())].last_name)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Sponsor\/Employer ID/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot; Search Apprenticeship IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot; Search Apprenticeship: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug: Login" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="newType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">newType</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">passwordFromHeader</stringProp>
                <stringProp name="Argument.value">${PASSWORD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="submitLogin" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">submitLogin</stringProp>
                <stringProp name="Argument.value">log in</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">userIDFromHeader</stringProp>
                <stringProp name="Argument.value">${USER}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="locale" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">locale</stringProp>
                <stringProp name="Argument.value">en</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /Program Entry - Apprenticeship section/
		match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.nio.charset.StandardCharsets

def environment = &quot;cloud-qa&quot;
def successFilePath = &quot;${environment}_appr_creds_ok.csv&quot;
def failureFilePath = &quot;${environment}_appr_creds_failed.csv&quot;
def user = vars.get(&quot;USER&quot;)

def data = prev.getResponseDataAsString()
def pattern = /Apprenticeship Sponsor\/Employer section/
def match = data =~ pattern

if (match &amp;&amp; match.size() &gt; 0) {
    FileUtils.writeStringToFile(new File(successFilePath), &quot;${user}\n&quot;, StandardCharsets.UTF_8, true)
}
else {
    FileUtils.writeStringToFile(new File(failureFilePath), &quot;${user}\n&quot;, StandardCharsets.UTF_8, true)
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug: Create Sponsor" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="newType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">newType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">passwordFromHeader</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submitLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submitLogin</stringProp>
                  <stringProp name="Argument.value">log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userIDFromHeader</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="predefroles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">predefroles</stringProp>
                  <stringProp name="Argument.value">1700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	}
	else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /Program Entry - Apprenticeship section/
		match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message);
     AssertionResult.setFailure(true);
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Apprenticeship Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Sponsor\/Employer Search/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Apprenticeship Search Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Apprenticeship Search Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Apprenticeship" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="legalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">legalName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__BACK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__BACK</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.areaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.areaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.lineNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">Alan</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.prefix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">LTEE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Sponsor\/Employer ID/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot; Search Apprenticeship IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot; Search Apprenticeship: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Create Apprenticeship page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/XSponsorX/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Enter the specific TOSS code/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Create Apprenticeship page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Create Apprenticeship page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Select Trade/Occupation" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/DisplayProgramQuestions.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">425A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerRequirementsAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerRequirementsAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Does the applicant currently have a location in Ontario\?/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Select Trade/Occupation IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Select Trade/Occupation: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Accept Program Questions" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/AcceptProgramQuestions.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">true,false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">true,false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_fr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_fr</stringProp>
                  <stringProp name="Argument.value">Technicien d&apos;entretien automobile (Apprentissage)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillSetInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillSetInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorTypeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorTypeDisplayed</stringProp>
                  <stringProp name="Argument.value">SPONSEMPL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillsInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillsInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.03,Repair body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.04,Verify repair of body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.01,Perform visual inspection,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.02,Diagnose and troubleshoot body and trim,Carrosserie et sellerie,APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.07,Verify repair of anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.06,Repair anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.05,Diagnose and troubleshoot anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.03,Repair hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.02,Diagnose and troubleshoot hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.04,Verify repair of hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.09,Repair anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.10,Verify repair of anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.11,Measure and resurface brake drums, linings, and rotors,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.08,Diagnose and troubleshoot anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.03,Repair drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.04,Verify repair of drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.02,Diagnose and troubleshoot drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.03,Repair body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.02,Diagnose and troubleshoot body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.06,Repair supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.05,Diagnose and troubleshoot supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.07,Verify repair of supplemental restraint system (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.04,Verify repair of body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.08,Repair charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.09,Verify repair of charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.03,Service and boost/charge batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.02,Diagnose and troubleshoot batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.06,Verify repair of starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.07,Diagnose and troubleshoot charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.04,Diagnose and troubleshoot starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.05,Repair starting systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.13,Perform mechanical diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.12,Perform electronic diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.11,Perform gasoline engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.10,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.08,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.02,Diagnose and troubleshoot fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.03,Repair fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.04,Verify repair of fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.09,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.07,Verify repair of ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.06,Repair ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.05,Diagnose and troubleshoot ignition systems and components,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,U5161.07,Verify repair of engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.08,Diagnose and troubleshoot cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.13,Verify repair of engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.01,Perform visual inspection,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.02,Diagnose and troubleshoot cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.03,Repair cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.09,Repair cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.11,Diagnose and troubleshoot engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.10,Verify repair of cylinder heads and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.06,Repair engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.05,Diagnose and troubleshoot engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.04,Verify repair of cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.12,Repair engine blocks and components,Moteurs,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.02,Diagnose and troubleshoot exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.13,Verify repair of Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.09,Repair Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.10,Verify repair of Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.11,Diagnose and troubleshoot Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.12,Repair Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.03,Repair exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.04,Verify repair of exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.05,Diagnose and troubleshoot turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.06,Repair turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.07,Verify repair of turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.08,Diagnose and troubleshoot Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.02,Diagnose and troubleshoot gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.03,Repair gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.04,Verify repair of gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.05,Diagnose and troubleshoot diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.06,Repair diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.07,Verify repair of diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.02,Diagnose and troubleshoot air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.03,Repair air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.04,Verify repair of air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.05,Diagnose and troubleshoot heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.07,Verify repair of heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.06,Repair heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer],U5175A,Hybrid Vehicle Systems,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.01,Identify potential workplace health and safety hazards,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.03,Wear and maintain personal protective equipment,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.04,Comply with workplace-related legislation,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.06,Practice good housekeeping in the workplace,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.05,Interpret and apply service-related information,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.02,Handle, store and dispose of hazardous materials,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.07,Comply with Workplace Hazardous Materials Information System (WHMIS) guidelines,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.04,Verify repair of steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.03,Repair steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.02,Diagnose and troubleshoot steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.05,Align steering, axles, and suspensions,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.04,Verify repair of suspension systems, frames/sub-frames, and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.02,Diagnose and troubleshoot suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.03,Repair suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.01,Perform visual inspection,Suspensions et cadres,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.01,Perform visual inspection,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.05,Balance tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.04,Verify repair of tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.03,Repair tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.02,Diagnose and troubleshoot tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.15,Repair transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.14,Diagnose and troubleshoot transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.13,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.12,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.11,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.10,Verify repair of automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.09,Repair automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.08,Diagnose and troubleshoot automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.16,Verify repair of transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.07,Verify repair of manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.06,Repair manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.05,Diagnose and troubleshoot manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.03,Repair clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.02,Diagnose and troubleshoot clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.04,Verify repair of clutch systems and components,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerQualificationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerQualificationDisplayed</stringProp>
                  <stringProp name="Argument.value">PRIORCERT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_en" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_en</stringProp>
                  <stringProp name="Argument.value">Automotive Service Technician Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /to be used to contact the Sponsor\/Employer and prepare/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Lookup Sponsor Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/AcceptSponsor.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="formname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">formname</stringProp>
                  <stringProp name="Argument.value">Sponsor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorOwner" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorOwner</stringProp>
                  <stringProp name="Argument.value">${sponsorOwner}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxExchange</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillsInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillsInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.03,Repair body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.04,Verify repair of body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.01,Perform visual inspection,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.02,Diagnose and troubleshoot body and trim,Carrosserie et sellerie,APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.07,Verify repair of anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.06,Repair anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.05,Diagnose and troubleshoot anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.03,Repair hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.02,Diagnose and troubleshoot hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.04,Verify repair of hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.09,Repair anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.10,Verify repair of anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.11,Measure and resurface brake drums, linings, and rotors,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.08,Diagnose and troubleshoot anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.03,Repair drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.04,Verify repair of drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.02,Diagnose and troubleshoot drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.03,Repair body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.02,Diagnose and troubleshoot body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.06,Repair supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.05,Diagnose and troubleshoot supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.07,Verify repair of supplemental restraint system (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.04,Verify repair of body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.08,Repair charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.09,Verify repair of charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.03,Service and boost/charge batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.02,Diagnose and troubleshoot batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.06,Verify repair of starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.07,Diagnose and troubleshoot charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.04,Diagnose and troubleshoot starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.05,Repair starting systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.13,Perform mechanical diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.12,Perform electronic diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.11,Perform gasoline engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.10,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.08,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.02,Diagnose and troubleshoot fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.03,Repair fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.04,Verify repair of fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.09,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.07,Verify repair of ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.06,Repair ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.05,Diagnose and troubleshoot ignition systems and components,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,U5161.07,Verify repair of engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.08,Diagnose and troubleshoot cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.13,Verify repair of engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.01,Perform visual inspection,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.02,Diagnose and troubleshoot cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.03,Repair cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.09,Repair cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.11,Diagnose and troubleshoot engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.10,Verify repair of cylinder heads and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.06,Repair engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.05,Diagnose and troubleshoot engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.04,Verify repair of cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.12,Repair engine blocks and components,Moteurs,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.02,Diagnose and troubleshoot exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.13,Verify repair of Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.09,Repair Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.10,Verify repair of Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.11,Diagnose and troubleshoot Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.12,Repair Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.03,Repair exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.04,Verify repair of exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.05,Diagnose and troubleshoot turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.06,Repair turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.07,Verify repair of turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.08,Diagnose and troubleshoot Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.02,Diagnose and troubleshoot gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.03,Repair gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.04,Verify repair of gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.05,Diagnose and troubleshoot diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.06,Repair diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.07,Verify repair of diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.02,Diagnose and troubleshoot air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.03,Repair air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.04,Verify repair of air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.05,Diagnose and troubleshoot heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.07,Verify repair of heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.06,Repair heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer],U5175A,Hybrid Vehicle Systems,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.01,Identify potential workplace health and safety hazards,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.03,Wear and maintain personal protective equipment,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.04,Comply with workplace-related legislation,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.06,Practice good housekeeping in the workplace,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.05,Interpret and apply service-related information,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.02,Handle, store and dispose of hazardous materials,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.07,Comply with Workplace Hazardous Materials Information System (WHMIS) guidelines,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.04,Verify repair of steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.03,Repair steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.02,Diagnose and troubleshoot steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.05,Align steering, axles, and suspensions,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.04,Verify repair of suspension systems, frames/sub-frames, and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.02,Diagnose and troubleshoot suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.03,Repair suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.01,Perform visual inspection,Suspensions et cadres,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.01,Perform visual inspection,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.05,Balance tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.04,Verify repair of tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.03,Repair tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.02,Diagnose and troubleshoot tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.15,Repair transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.14,Diagnose and troubleshoot transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.13,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.12,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.11,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.10,Verify repair of automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.09,Repair automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.08,Diagnose and troubleshoot automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.16,Verify repair of transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.07,Verify repair of manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.06,Repair manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.05,Diagnose and troubleshoot manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.03,Repair clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.02,Diagnose and troubleshoot clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.04,Verify repair of clutch systems and components,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteaddressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteaddressproperty</stringProp>
                  <stringProp name="Argument.value">siteAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="addressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addressproperty</stringProp>
                  <stringProp name="Argument.value">address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerQualificationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerQualificationDisplayed</stringProp>
                  <stringProp name="Argument.value">PRIORCERT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_en" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_en</stringProp>
                  <stringProp name="Argument.value">Automotive Service Technician Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.countryCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.additionalDeliverInformation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.additionalDeliverInformation</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExchange</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactAreaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteformname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteformname</stringProp>
                  <stringProp name="Argument.value">Sponsor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerRequirementsAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerRequirementsAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_fr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_fr</stringProp>
                  <stringProp name="Argument.value">Technicien d&apos;entretien automobile (Apprentissage)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">L4J 9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">${sponsorName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Look up Address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillSetInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillSetInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExtension" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExtension</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorTypeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorTypeDisplayed</stringProp>
                  <stringProp name="Argument.value">SPONSEMPL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="groupSponsorPurpose" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">groupSponsorPurpose</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">returnURL</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/APPRWEB/PR/setAddressPropsMail.do</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxAreaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prefLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prefLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorPartyType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorPartyType</stringProp>
                  <stringProp name="Argument.value">LTEE,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactEmail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactEmail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorLegalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorLegalName</stringProp>
                  <stringProp name="Argument.value">${sponsorLegalName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR,ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RSU

vars.put(&apos;sponsorOwner&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)}&quot;)
vars.put(&apos;sponsorName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)}&quot;)
vars.put(&apos;sponsorLegalName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)} LTD&quot;)
vars.put(&apos;contactName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /The postal code database has returned multiple results/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Lookup Sponsor Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Lookup Sponsor Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Select Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/addresslookup/AddressChoice.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="lookup" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lookup</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="addressIndex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addressIndex</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="event:next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">event:next</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Please complete additional address fields where necessary/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Select Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Select Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Complete Mailing Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/addresslookup/EditLookupMailingAddress.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetType</stringProp>
                  <stringProp name="Argument.value">GATE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">THORNHILL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">unitNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="event:next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">event:next</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">civicNumber</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetName</stringProp>
                  <stringProp name="Argument.value">BASIE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PCL_ERR_CNT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PCL_ERR_CNT</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">countryCode</stringProp>
                  <stringProp name="Argument.value">CANADA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /to be used to contact the Sponsor\/Employer and prepare/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Complete Mailing Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Complete Mailing Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Accept Sponsor with Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/AcceptSponsor.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">GATE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="formname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">formname</stringProp>
                  <stringProp name="Argument.value">Sponsor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorOwner" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorOwner</stringProp>
                  <stringProp name="Argument.value">${sponsorOwner}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxExchange</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillsInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillsInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.03,Repair body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.04,Verify repair of body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.01,Perform visual inspection,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.02,Diagnose and troubleshoot body and trim,Carrosserie et sellerie,APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.07,Verify repair of anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.06,Repair anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.05,Diagnose and troubleshoot anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.03,Repair hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.02,Diagnose and troubleshoot hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.04,Verify repair of hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.09,Repair anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.10,Verify repair of anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.11,Measure and resurface brake drums, linings, and rotors,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.08,Diagnose and troubleshoot anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.03,Repair drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.04,Verify repair of drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.02,Diagnose and troubleshoot drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.03,Repair body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.02,Diagnose and troubleshoot body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.06,Repair supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.05,Diagnose and troubleshoot supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.07,Verify repair of supplemental restraint system (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.04,Verify repair of body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.08,Repair charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.09,Verify repair of charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.03,Service and boost/charge batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.02,Diagnose and troubleshoot batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.06,Verify repair of starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.07,Diagnose and troubleshoot charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.04,Diagnose and troubleshoot starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.05,Repair starting systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.13,Perform mechanical diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.12,Perform electronic diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.11,Perform gasoline engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.10,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.08,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.02,Diagnose and troubleshoot fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.03,Repair fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.04,Verify repair of fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.09,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.07,Verify repair of ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.06,Repair ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.05,Diagnose and troubleshoot ignition systems and components,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,U5161.07,Verify repair of engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.08,Diagnose and troubleshoot cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.13,Verify repair of engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.01,Perform visual inspection,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.02,Diagnose and troubleshoot cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.03,Repair cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.09,Repair cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.11,Diagnose and troubleshoot engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.10,Verify repair of cylinder heads and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.06,Repair engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.05,Diagnose and troubleshoot engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.04,Verify repair of cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.12,Repair engine blocks and components,Moteurs,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.02,Diagnose and troubleshoot exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.13,Verify repair of Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.09,Repair Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.10,Verify repair of Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.11,Diagnose and troubleshoot Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.12,Repair Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.03,Repair exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.04,Verify repair of exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.05,Diagnose and troubleshoot turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.06,Repair turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.07,Verify repair of turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.08,Diagnose and troubleshoot Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.02,Diagnose and troubleshoot gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.03,Repair gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.04,Verify repair of gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.05,Diagnose and troubleshoot diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.06,Repair diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.07,Verify repair of diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.02,Diagnose and troubleshoot air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.03,Repair air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.04,Verify repair of air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.05,Diagnose and troubleshoot heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.07,Verify repair of heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.06,Repair heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer],U5175A,Hybrid Vehicle Systems,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.01,Identify potential workplace health and safety hazards,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.03,Wear and maintain personal protective equipment,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.04,Comply with workplace-related legislation,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.06,Practice good housekeeping in the workplace,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.05,Interpret and apply service-related information,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.02,Handle, store and dispose of hazardous materials,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.07,Comply with Workplace Hazardous Materials Information System (WHMIS) guidelines,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.04,Verify repair of steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.03,Repair steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.02,Diagnose and troubleshoot steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.05,Align steering, axles, and suspensions,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.04,Verify repair of suspension systems, frames/sub-frames, and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.02,Diagnose and troubleshoot suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.03,Repair suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.01,Perform visual inspection,Suspensions et cadres,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.01,Perform visual inspection,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.05,Balance tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.04,Verify repair of tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.03,Repair tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.02,Diagnose and troubleshoot tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.15,Repair transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.14,Diagnose and troubleshoot transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.13,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.12,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.11,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.10,Verify repair of automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.09,Repair automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.08,Diagnose and troubleshoot automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.16,Verify repair of transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.07,Verify repair of manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.06,Repair manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.05,Diagnose and troubleshoot manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.03,Repair clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.02,Diagnose and troubleshoot clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.04,Verify repair of clutch systems and components,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteaddressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteaddressproperty</stringProp>
                  <stringProp name="Argument.value">siteAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="addressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addressproperty</stringProp>
                  <stringProp name="Argument.value">address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerQualificationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerQualificationDisplayed</stringProp>
                  <stringProp name="Argument.value">PRIORCERT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">THORNHILL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value">${contactName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_en" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_en</stringProp>
                  <stringProp name="Argument.value">Automotive Service Technician Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.countryCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.additionalDeliverInformation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.additionalDeliverInformation</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExchange</stringProp>
                  <stringProp name="Argument.value">646</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactAreaCode</stringProp>
                  <stringProp name="Argument.value">647</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteformname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteformname</stringProp>
                  <stringProp name="Argument.value">Sponsor</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerRequirementsAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerRequirementsAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_fr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_fr</stringProp>
                  <stringProp name="Argument.value">Technicien d&apos;entretien automobile (Apprentissage)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">${sponsorName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillSetInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillSetInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExtension" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExtension</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorTypeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorTypeDisplayed</stringProp>
                  <stringProp name="Argument.value">SPONSEMPL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactNumber</stringProp>
                  <stringProp name="Argument.value">6366</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="groupSponsorPurpose" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">groupSponsorPurpose</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">returnURL</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_1}/APPRWEB/PR/setAddressPropsMail.do</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxAreaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prefLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prefLanguage</stringProp>
                  <stringProp name="Argument.value">EN,EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorPartyType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorPartyType</stringProp>
                  <stringProp name="Argument.value">LTEE,LTEE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactEmail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactEmail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">BASIE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorLegalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorLegalName</stringProp>
                  <stringProp name="Argument.value">${sponsorLegalName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="faxNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">faxNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR,ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /The applicant entered the following information on their application/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Sponsor with Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Sponsor with Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Confirm Party Identification" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Sponsor/AcceptConfirmPartyIdentification.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="hasTrainerQualification" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasTrainerQualification</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">GATE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocationDisplayed</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="requiresSigningAuthorityDesignate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">requiresSigningAuthorityDesignate</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorOwner" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorOwner</stringProp>
                  <stringProp name="Argument.value">${sponsorOwner}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerListAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerListAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillsInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillsInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.03,Repair body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.04,Verify repair of body and trim,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.01,Perform visual inspection,Carrosserie et sellerie,APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,U5173.02,Diagnose and troubleshoot body and trim,Carrosserie et sellerie,APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.07,Verify repair of anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.06,Repair anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.05,Diagnose and troubleshoot anti-lock braking systems (ABS) and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.03,Repair hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.02,Diagnose and troubleshoot hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.04,Verify repair of hydraulic braking systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.09,Repair anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.10,Verify repair of anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.11,Measure and resurface brake drums, linings, and rotors,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],U5170.08,Diagnose and troubleshoot anti-skid/traction control systems and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.03,Repair drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.04,Verify repair of drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.02,Diagnose and troubleshoot drive shafts, differentials, drive axle assemblies, and components,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],U5167.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.03,Repair body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.02,Diagnose and troubleshoot body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.06,Repair supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.05,Diagnose and troubleshoot supplemental restraint systems (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.07,Verify repair of supplemental restraint system (SRS) and components,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],U5164.04,Verify repair of body electrical and computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.08,Repair charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.09,Verify repair of charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.03,Service and boost/charge batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.02,Diagnose and troubleshoot batteries,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.06,Verify repair of starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.07,Diagnose and troubleshoot charging systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.04,Diagnose and troubleshoot starting systems and components,[object ArrayBuffer],APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],U5162.05,Repair starting systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.13,Perform mechanical diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.12,Perform electronic diesel engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.11,Perform gasoline engine tune-ups,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.10,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.08,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.02,Diagnose and troubleshoot fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.03,Repair fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.04,Verify repair of fuel control systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.09,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.07,Verify repair of ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.06,Repair ignition systems and components,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],U5163.05,Diagnose and troubleshoot ignition systems and components,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,U5161.07,Verify repair of engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.08,Diagnose and troubleshoot cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.13,Verify repair of engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.01,Perform visual inspection,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.02,Diagnose and troubleshoot cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.03,Repair cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.09,Repair cylinder head and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.11,Diagnose and troubleshoot engine blocks and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.10,Verify repair of cylinder heads and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.06,Repair engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.05,Diagnose and troubleshoot engine lubricating systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.04,Verify repair of cooling systems and components,Moteurs,APPR310S,false,U5161,Engine Systems,Moteurs,U5161.12,Repair engine blocks and components,Moteurs,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.02,Diagnose and troubleshoot exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.13,Verify repair of Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.09,Repair Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.10,Verify repair of Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.11,Diagnose and troubleshoot Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.12,Repair Level II emission control systems and components (Electronically-Controlled EGR, evaporative Recovery Systems, spark Timing and Idle Control Systems),[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.03,Repair exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.04,Verify repair of exhaust and intake systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.05,Diagnose and troubleshoot turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.06,Repair turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.07,Verify repair of turbocharger/supercharger systems and components,[object ArrayBuffer],APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],U5174.08,Diagnose and troubleshoot Level I emission control systems and components (Positive Crankcase Ventilation (PCV), exhaust Gas Recirculation (EGR), thermostatic Air Intake and Evaporative Fuel Systems),[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.02,Diagnose and troubleshoot gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.03,Repair gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.04,Verify repair of gasoline fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.05,Diagnose and troubleshoot diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.06,Repair diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],U5165.07,Verify repair of diesel fuel systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.02,Diagnose and troubleshoot air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.03,Repair air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.04,Verify repair of air-conditioning systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.05,Diagnose and troubleshoot heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.07,Verify repair of heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],U5172.06,Repair heating and ventilation systems and components,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer],U5175A,Hybrid Vehicle Systems,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.01,Identify potential workplace health and safety hazards,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.03,Wear and maintain personal protective equipment,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.04,Comply with workplace-related legislation,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.06,Practice good housekeeping in the workplace,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.05,Interpret and apply service-related information,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.02,Handle, store and dispose of hazardous materials,[object ArrayBuffer],APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],U5160.07,Comply with Workplace Hazardous Materials Information System (WHMIS) guidelines,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.04,Verify repair of steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.03,Repair steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.02,Diagnose and troubleshoot steering systems and components,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],U5169.05,Align steering, axles, and suspensions,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.04,Verify repair of suspension systems, frames/sub-frames, and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.02,Diagnose and troubleshoot suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.03,Repair suspension systems, frames/sub-frames and components,Suspensions et cadres,APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,U5168.01,Perform visual inspection,Suspensions et cadres,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.01,Perform visual inspection,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.05,Balance tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.04,Verify repair of tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.03,Repair tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,U5171.02,Diagnose and troubleshoot tires and components,Pneus, roues, jantes et moyeux,APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.15,Repair transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.14,Diagnose and troubleshoot transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.13,Verify repair of computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.12,Repair computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.11,Diagnose and troubleshoot computer-controlled systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.10,Verify repair of automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.09,Repair automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.08,Diagnose and troubleshoot automatic transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.16,Verify repair of transfer cases and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.07,Verify repair of manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.06,Repair manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.05,Diagnose and troubleshoot manual transmissions/transaxles and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.03,Repair clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.02,Diagnose and troubleshoot clutch systems and components,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.01,Perform visual inspection,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],U5166.04,Verify repair of clutch systems and components,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerQualificationDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerQualificationDisplayed</stringProp>
                  <stringProp name="Argument.value">PRIORCERT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="designatePartyConfirmationChoice" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">designatePartyConfirmationChoice</stringProp>
                  <stringProp name="Argument.value">none_designate_party</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">THORNHILL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="displayTrainer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">displayTrainer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInAssessmentDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInAssessmentDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/Sponsor/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canAddNewParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canAddNewParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__googleReturnActionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__googleReturnActionPath</stringProp>
                  <stringProp name="Argument.value">/Sponsor/AcceptSponsorRequirements</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value">${contactName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_en" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_en</stringProp>
                  <stringProp name="Argument.value">Automotive Service Technician Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializedDateSubmitted" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializedDateSubmitted</stringProp>
                  <stringProp name="Argument.value">Oct 25, 2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactExchange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactExchange</stringProp>
                  <stringProp name="Argument.value">646</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactAreaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactAreaCode</stringProp>
                  <stringProp name="Argument.value">647</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trainerRequirementsAttachmentResource.fileSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">trainerRequirementsAttachmentResource.fileSize</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasOntarioLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasOntarioLocation</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programDescription_fr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programDescription_fr</stringProp>
                  <stringProp name="Argument.value">Technicien d&apos;entretien automobile (Apprentissage)</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">${sponsorName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serializeSkillSetInProgramBeans" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">serializeSkillSetInProgramBeans</stringProp>
                  <stringProp name="Argument.value">APPR310S,false,U5160,Occupational Health And Safety Procedures,[object ArrayBuffer],APPR310S,false,U5161,Engine Systems,Moteurs,APPR310S,false,U5162,Electrical Systems - Starting And Charging,[object ArrayBuffer],APPR310S,false,U5163,Engine Management Systems,[object ArrayBuffer],APPR310S,false,U5164,Electrical Systems - Body,[object ArrayBuffer],APPR310S,false,U5165,Fuel Delivery Systems,[object ArrayBuffer],APPR310S,false,U5166,Transmission Systems,[object ArrayBuffer],APPR310S,false,U5167,Drive Shafts, Differentials, And Drive Axle Assemblies,[object ArrayBuffer],APPR310S,false,U5168,Suspension Systems And Frames,Suspensions et cadres,APPR310S,false,U5169,Steering Systems,[object ArrayBuffer],APPR310S,false,U5170,Braking Systems,[object ArrayBuffer],APPR310S,false,U5171,Tires, Wheels, Rims, And Hubs,Pneus, roues, jantes et moyeux,APPR310S,false,U5172,Heating, Ventilation, And Air-Conditioning Systems,[object ArrayBuffer],APPR310S,false,U5173,Body And Trim,Carrosserie et sellerie,APPR310S,false,U5174,Exhaust, Intake, And Emission Control Systems,[object ArrayBuffer],APPR310S,false,U5175,Hybrid Vehicle Systems,[object ArrayBuffer]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qualifiedTrainersAvailable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">qualifiedTrainersAvailable</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorTypeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorTypeDisplayed</stringProp>
                  <stringProp name="Argument.value">SPONSEMPL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactNumber</stringProp>
                  <stringProp name="Argument.value">6366</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorPartyConfirmationChoice" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorPartyConfirmationChoice</stringProp>
                  <stringProp name="Argument.value">new_sponsor_party</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isShowMgrApproveDateFrmWF" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isShowMgrApproveDateFrmWF</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">L4J9B4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prefLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prefLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canSearchForParty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canSearchForParty</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorPartyType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorPartyType</stringProp>
                  <stringProp name="Argument.value">LTEE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">BASIE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorLegalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorLegalName</stringProp>
                  <stringProp name="Argument.value">${sponsorLegalName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="confirm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">confirm</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button.applyonline.sponsor.confirmparties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button.applyonline.sponsor.confirmparties</stringProp>
                  <stringProp name="Argument.value">Confirm party identification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Please take a moment to review the information below/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Confirm Party Identification IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def http_props = [:]
			def inputs = res[1][0] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Confirm Party Identification: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Submit Apprenticeship" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/XSponsorX/AcceptConfirmation.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Update Applied and Activity May Follow/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Submit Apprenticeship IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Submit Apprenticeship: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug: Create Client" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate Custom SIN" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.util.Random;
import java.io.File;
import org.apache.jmeter.services.FileServer

def getCheckDigit(List digits) {
   def sum = digits.withIndex()
       .collect { d, i -&gt;
           i % 2 == 0 ? d : d * 2
       }
       .collect { d -&gt;
           d.intdiv(10) + (d % 10)
       }
       .sum()
   
  return (sum % 10) ? 10 - (sum % 10) : 0
}

def generate() {
   def random = new Random(System.currentTimeMillis());
   def digits = [random.nextInt(7) + 1]
   for(def i : (1..7)) {
       digits.add(random.nextInt(10))
   }
   
   digits.add(getCheckDigit(digits))
   def result = digits.collect { d -&gt;
       d.toString()
   }
   .join(&apos;&apos;)
}

def old_sins = []
if(vars.get(&quot;SIN_FILE_NAME&quot;)) {
	try {
		def path = FileServer.getFileServer().getBaseDir()
		File file = new File(&quot;$path/${SIN_FILE_NAME}&quot;)
		file.eachLine { line -&gt;
			old_sins.add(line.trim())
		}
	} catch(Exception ex) {
		log.info &quot;Unable to read file: ${ex.message}&quot;
	}
}

do {
	String new_sin = generate()
	//String new_sin = &quot;518648126&quot;
	
	if(!old_sins.contains(new_sin)) {
		vars.put(&apos;sin_number&apos;, new_sin)
		break
	}
} while(true)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="newType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">newType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">passwordFromHeader</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submitLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submitLogin</stringProp>
                  <stringProp name="Argument.value">log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userIDFromHeader</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="predefroles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">predefroles</stringProp>
                  <stringProp name="Argument.value">1700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Client Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Program Entry Client Search/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Client Search Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Client Search Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Client" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">Alan</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_1</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasppID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasppID</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_2</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_3</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__BACK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__BACK</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">Smith</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="OEN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">OEN</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Client ID:/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Search Client IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Search Client: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Choose Program Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApprenticeshipChooseProgram.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Choose a trade\/occupation/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Choose Program Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Choose Program Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Accept Program Questions" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptTOSSQuestions.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="feeDetails.showButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.showButton</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.year</stringProp>
                  <stringProp name="Argument.value">2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isButtonShow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isButtonShow</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isDocShown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isDocShown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixAddress</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isUserInternal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isUserInternal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isReissue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isReissue</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixPayment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixPayment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdInput</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isFrmWorkFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isFrmWorkFlow</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.returnCertificate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.returnCertificate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.clientIdentified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.clientIdentified</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.date</stringProp>
                  <stringProp name="Argument.value">2023-10-26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.month</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.personalInfoPopulated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.personalInfoPopulated</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">425A</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.acceptAgreement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.acceptAgreement</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSinEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSinEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.reissueReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.reissueReasonCode</stringProp>
                  <stringProp name="Argument.value">FULL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.numOfTimeTried" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.numOfTimeTried</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nextstep" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nextstep</stringProp>
                  <stringProp name="Argument.value"> Next Step </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isApproved</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isWall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isWall</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.day</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.countEntryTimes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.countEntryTimes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Postsecondary Education and\/or Training Completed/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Postal Code Lookup" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptClientPersonalInfo.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="feeDetails.showButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.showButton</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.year</stringProp>
                  <stringProp name="Argument.value">2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="formname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">formname</stringProp>
                  <stringProp name="Argument.value">ProgramEntryAnswers</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isButtonShow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isButtonShow</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isDocShown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isDocShown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="residencyStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">residencyStatus</stringProp>
                  <stringProp name="Argument.value">CANCITIZEN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preferredName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preferredName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="addressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addressproperty</stringProp>
                  <stringProp name="Argument.value">address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2no</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="electronicMail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">electronicMail</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixAddress</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.additionalDeliverInformation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.additionalDeliverInformation</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2ex</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isUserInternal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isUserInternal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isReissue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isReissue</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossLegislationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossLegislationType</stringProp>
                  <stringProp name="Argument.value">ACARES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${lastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixPayment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixPayment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1area</stringProp>
                  <stringProp name="Argument.value">634</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdInput</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2ext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2ext</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isFrmWorkFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isFrmWorkFlow</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2type</stringProp>
                  <stringProp name="Argument.value">CELL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin1</stringProp>
                  <stringProp name="Argument.value">${sin1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin0</stringProp>
                  <stringProp name="Argument.value">${sin0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin2</stringProp>
                  <stringProp name="Argument.value">${sin2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.returnCertificate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.returnCertificate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.clientIdentified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.clientIdentified</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.date</stringProp>
                  <stringProp name="Argument.value">2023-10-26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.month</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedQualificationMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedQualificationMethod</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.personalInfoPopulated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.personalInfoPopulated</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="genderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">genderType</stringProp>
                  <stringProp name="Argument.value">F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.acceptAgreement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.acceptAgreement</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">${firstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numOfDependence" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numOfDependence</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSinEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSinEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.reissueReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.reissueReasonCode</stringProp>
                  <stringProp name="Argument.value">FULL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1ext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1ext</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preferredLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preferredLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.numOfTimeTried" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.numOfTimeTried</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Look up Address</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isApproved</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isWall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isWall</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.day</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">returnURL</stringProp>
                  <stringProp name="Argument.value">https://apprweb.ws.qa.services.eois.labour.gov.on.ca/APPRWEB/PR/setAddressPropsMail.do</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1no</stringProp>
                  <stringProp name="Argument.value">4653</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph2area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph2area</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="instructionLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">instructionLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1type</stringProp>
                  <stringProp name="Argument.value">HOME</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1ex</stringProp>
                  <stringProp name="Argument.value">765</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="middleName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">middleName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.countEntryTimes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.countEntryTimes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="primaryLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">primaryLanguage</stringProp>
                  <stringProp name="Argument.value">ENGLISH</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils as RSU

def sin = vars.get(&apos;sin_number&apos;)
vars.put(&apos;sin0&apos;, sin.substring(0, 3))
vars.put(&apos;sin1&apos;, sin.substring(3, 6))
vars.put(&apos;sin2&apos;, sin.substring(6))

vars.put(&apos;lastName&apos;, RSU.randomAlphabetic(5,8))
vars.put(&apos;firstName&apos;, RSU.randomAlphabetic(4,9))
vars.put(&apos;sponsorLegalName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)} LTD&quot;)
vars.put(&apos;contactName&apos;, &quot;${RSU.randomAlphabetic(5,8)} ${RSU.randomAlphabetic(4,9)}&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Postal Code Look-up/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Lookup Sponsor Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Lookup Sponsor Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Select Address" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/addresslookup/EditLookupMailingAddress.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetType</stringProp>
                  <stringProp name="Argument.value">RD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">unitNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="event:next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">event:next</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">suffix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">civicNumber</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetDirectionCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">streetName</stringProp>
                  <stringProp name="Argument.value">CLOVERDALE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PCL_ERR_CNT" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">PCL_ERR_CNT</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryMode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">countryCode</stringProp>
                  <stringProp name="Argument.value">CANADA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postOfficeBoxId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryInstallationType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">deliveryInstallationQualifier</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Postsecondary Education and\/or Training Completed/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Lookup Sponsor Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Select Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Submit Client Personal Info" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptClientPersonalInfo.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">${firstName}</stringProp>
                </elementProp>
                <elementProp name="middleName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">middleName</stringProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${lastName}</stringProp>
                </elementProp>
                <elementProp name="preferredName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">preferredName</stringProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                </elementProp>
                <elementProp name="sin0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sin0</stringProp>
                  <stringProp name="Argument.value">${sin0}</stringProp>
                </elementProp>
                <elementProp name="sin1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sin1</stringProp>
                  <stringProp name="Argument.value">${sin1}</stringProp>
                </elementProp>
                <elementProp name="sin2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sin2</stringProp>
                  <stringProp name="Argument.value">${sin2}</stringProp>
                </elementProp>
                <elementProp name="ph1type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1type</stringProp>
                  <stringProp name="Argument.value">HOME</stringProp>
                </elementProp>
                <elementProp name="ph1area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1area</stringProp>
                  <stringProp name="Argument.value">324</stringProp>
                </elementProp>
                <elementProp name="ph1ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1ex</stringProp>
                  <stringProp name="Argument.value">234</stringProp>
                </elementProp>
                <elementProp name="ph1no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1no</stringProp>
                  <stringProp name="Argument.value">3234</stringProp>
                </elementProp>
                <elementProp name="ph1ext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph1ext</stringProp>
                </elementProp>
                <elementProp name="ph2type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2type</stringProp>
                  <stringProp name="Argument.value">CELL</stringProp>
                </elementProp>
                <elementProp name="ph2area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2area</stringProp>
                </elementProp>
                <elementProp name="ph2ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2ex</stringProp>
                </elementProp>
                <elementProp name="ph2no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2no</stringProp>
                </elementProp>
                <elementProp name="ph2ext" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ph2ext</stringProp>
                </elementProp>
                <elementProp name="electronicMail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">electronicMail</stringProp>
                </elementProp>
                <elementProp name="schoolName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">schoolName</stringProp>
                </elementProp>
                <elementProp name="genderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">genderType</stringProp>
                  <stringProp name="Argument.value">M</stringProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                </elementProp>
                <elementProp name="numOfDependence" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">numOfDependence</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                </elementProp>
                <elementProp name="preferredLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">preferredLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                </elementProp>
                <elementProp name="instructionLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">instructionLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                </elementProp>
                <elementProp name="residencyStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">residencyStatus</stringProp>
                  <stringProp name="Argument.value">CANCITIZEN</stringProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                </elementProp>
                <elementProp name="immigrantYear" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">immigrantYear</stringProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="formname" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">formname</stringProp>
                  <stringProp name="Argument.value">ProgramEntryAnswers</stringProp>
                </elementProp>
                <elementProp name="addressproperty" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">addressproperty</stringProp>
                  <stringProp name="Argument.value">address</stringProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">CLOVERDALE</stringProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">RD</stringProp>
                </elementProp>
                <elementProp name="address.streetDirectionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.streetDirectionCode</stringProp>
                </elementProp>
                <elementProp name="address.postOfficeBoxId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.postOfficeBoxId</stringProp>
                </elementProp>
                <elementProp name="address.deliveryMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryMode</stringProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationType</stringProp>
                </elementProp>
                <elementProp name="address.deliveryInstallationQualifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.deliveryInstallationQualifier</stringProp>
                </elementProp>
                <elementProp name="address.suffix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.suffix</stringProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                </elementProp>
                <elementProp name="address.additionalDeliverInformation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">address.additionalDeliverInformation</stringProp>
                </elementProp>
                <elementProp name="mailing" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mailing</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="returnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">returnURL</stringProp>
                  <stringProp name="Argument.value">https://apprweb.ws.qa.services.eois.labour.gov.on.ca/APPRWEB/PR/setAddressPropsMail.do</stringProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.acceptAgreement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.acceptAgreement</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.client.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.client.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.client.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.clientIdentified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.clientIdentified</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.countEntryTimes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.countEntryTimes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.date</stringProp>
                  <stringProp name="Argument.value">2023-10-26</stringProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.day</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.month</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.year</stringProp>
                  <stringProp name="Argument.value">2023</stringProp>
                </elementProp>
                <elementProp name="feeDetails.inFixAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixAddress</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.inFixPayment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixPayment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isApproved</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isButtonShow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isButtonShow</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdInput</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isDocShown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isDocShown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isFrmWorkFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isFrmWorkFlow</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isReissue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isReissue</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isSinEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSinEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isUserInternal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isUserInternal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.isWall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isWall</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.numOfTimeTried" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.numOfTimeTried</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="feeDetails.payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.date</stringProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.personalInfoPopulated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.personalInfoPopulated</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                </elementProp>
                <elementProp name="feeDetails.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="feeDetails.reissueReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.reissueReasonCode</stringProp>
                  <stringProp name="Argument.value">FULL</stringProp>
                </elementProp>
                <elementProp name="feeDetails.returnCertificate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.returnCertificate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="feeDetails.showButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.showButton</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="feeDetails.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="selectedQualificationMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedQualificationMethod</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                </elementProp>
                <elementProp name="tossLegislationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tossLegislationType</stringProp>
                  <stringProp name="Argument.value">ACARES</stringProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Required Documents/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Submit Client Personal Info IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Submit Client Personal Info HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;hidden&quot;.*?name=&quot;org\.apache\.struts\.taglib\.html\.TOKEN&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def inputs = res[1][0] =~ pattern
			if(inputs.size() &lt; 1) {
				should_restart = true
			} else {
				vars.put(&apos;html_token&apos;, inputs[0][1])
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Submit Client Personal Info: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search School Board" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ajax/searchSchoolBoard.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="district" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">district</stringProp>
                  <stringProp name="Argument.value">01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
def failure_message = &quot;&quot;
try {
	def data = new JsonSlurper().parseText(prev.getResponseDataAsString())
	if(!&quot;200&quot;.equals(prev.getResponseCode()) || !data || data?.size() &lt; 1) {
		should_restart = true
		log.info &quot;DATA: ${data}&quot;
		failure_message += &quot;Response Data: ${prev.getResponseDataAsString()}&quot;
	}
} catch (Exception ex) {
	should_restart = true
	failure_message = &quot;Response is not a JSON object.&quot;
}

if(should_restart) {
	//ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Search School Board FAILED&quot;
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
     ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Required Documents Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptRequiredDocuments.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="feeDetails.showButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.showButton</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.year</stringProp>
                  <stringProp name="Argument.value">2023</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.prefix</stringProp>
                  <stringProp name="Argument.value">nul</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeTSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeTSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isButtonShow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isButtonShow</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isDocShown" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isDocShown</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.number</stringProp>
                  <stringProp name="Argument.value">nullnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="residencyStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">residencyStatus</stringProp>
                  <stringProp name="Argument.value">CANCITIZEN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardID</stringProp>
                  <stringProp name="Argument.value">2539454</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixAddress</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeTSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeTSVersion</stringProp>
                  <stringProp name="Argument.value">2014-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isUserInternal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isUserInternal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isReissue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isReissue</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone3.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone3.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="next.step" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">next.step</stringProp>
                  <stringProp name="Argument.value">Next Step</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossLegislationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossLegislationType</stringProp>
                  <stringProp name="Argument.value">ACARES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${lastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone2.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone2.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.inFixPayment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.inFixPayment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1area</stringProp>
                  <stringProp name="Argument.value">634</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdInput</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isFrmWorkFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isFrmWorkFlow</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeCSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeCSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin1</stringProp>
                  <stringProp name="Argument.value">${sin1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin0</stringProp>
                  <stringProp name="Argument.value">${sin0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin2</stringProp>
                  <stringProp name="Argument.value">${sin2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.returnCertificate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.returnCertificate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.clientIdentified" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.clientIdentified</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">RD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.date</stringProp>
                  <stringProp name="Argument.value">2023-10-26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isClientIdEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isClientIdEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.month</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedQualificationMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedQualificationMethod</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="recognitionTypesDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">recognitionTypesDisplayed</stringProp>
                  <stringProp name="Argument.value">COFA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.personalInfoPopulated" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.personalInfoPopulated</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.phone1.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.phone1.lineNumber</stringProp>
                  <stringProp name="Argument.value">lnull</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="genderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">genderType</stringProp>
                  <stringProp name="Argument.value">F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeCSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeCSVersion</stringProp>
                  <stringProp name="Argument.value">2010-09-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.acceptAgreement" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.acceptAgreement</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">${firstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeRSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeRSVersion</stringProp>
                  <stringProp name="Argument.value">1901-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numOfDependence" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numOfDependence</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isSinEntered" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isSinEntered</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.reissueReasonCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.reissueReasonCode</stringProp>
                  <stringProp name="Argument.value">FULL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedDocumentSets" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedDocumentSets</stringProp>
                  <stringProp name="Argument.value">1,CPER_REQUIRED_FDSP_OYAP1,22,CPER_REQUIRED_FDSP_OYAP2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sbDistrict" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sbDistrict</stringProp>
                  <stringProp name="Argument.value">01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preferredLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preferredLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.numOfTimeTried" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.numOfTimeTried</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.client.physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.client.physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="org.apache.struts.taglib.html.TOKEN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">org.apache.struts.taglib.html.TOKEN</stringProp>
                  <stringProp name="Argument.value">${html_token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeRSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeRSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isApproved" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isApproved</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.isWall" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.isWall</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.dateOnReceipt.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.dateOnReceipt.day</stringProp>
                  <stringProp name="Argument.value">26</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1no</stringProp>
                  <stringProp name="Argument.value">4653</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">CLOVERDALE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="instructionLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">instructionLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1type</stringProp>
                  <stringProp name="Argument.value">HOME</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.date</stringProp>
                  <stringProp name="Argument.value">1990-02-02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1ex</stringProp>
                  <stringProp name="Argument.value">765</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="feeDetails.countEntryTimes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">feeDetails.countEntryTimes</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="primaryLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">primaryLanguage</stringProp>
                  <stringProp name="Argument.value">ENGLISH</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /The applicant entered the following information on their application/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Sponsor with Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Submit Client Personal Info HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;hidden&quot;.*?name=&quot;org\.apache\.struts\.taglib\.html\.TOKEN&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def inputs = res[1][0] =~ pattern
			if(inputs.size() &lt; 1) {
				should_restart = true
			} else {
				vars.put(&apos;html_token&apos;, inputs[0][1])
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Sponsor with Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Confirm Party Identification" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ApplyOnline/AcceptConfirmPartyIdentification.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="button.applyonline.programentry.confirmparties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">button.applyonline.programentry.confirmparties</stringProp>
                  <stringProp name="Argument.value">Confirm party identification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="specialProgramID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">specialProgramID</stringProp>
                  <stringProp name="Argument.value">SP_OYAP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSchoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSchoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeTSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeTSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumAge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumAge</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="residencyStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">residencyStatus</stringProp>
                  <stringProp name="Argument.value">CANCITIZEN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="internalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">internalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="classroomTrainingInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">classroomTrainingInd</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientPartyConfirmationChoice" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientPartyConfirmationChoice</stringProp>
                  <stringProp name="Argument.value">new_client_party</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasMinimumEntryGradeRequired" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasMinimumEntryGradeRequired</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preReciprocalDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preReciprocalDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSubmitApprove" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSubmitApprove</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardID</stringProp>
                  <stringProp name="Argument.value">2539454</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.city</stringProp>
                  <stringProp name="Argument.value">TORONTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">actionPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="updatingUserId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">updatingUserId</stringProp>
                  <stringProp name="Argument.value">DSAH10047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInRequestMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInRequestMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="examinationDocumentBean.selected" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">examinationDocumentBean.selected</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="physicalAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">physicalAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasPermission" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasPermission</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeTSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeTSVersion</stringProp>
                  <stringProp name="Argument.value">2014-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyNoexam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyNoexam</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="readingFromDatabase" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">readingFromDatabase</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="skipTossAnswer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">skipTossAnswer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossLegislationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossLegislationType</stringProp>
                  <stringProp name="Argument.value">ACARES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${lastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasNumberOfSchoolCredits" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasNumberOfSchoolCredits</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1area" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1area</stringProp>
                  <stringProp name="Argument.value">634</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMODFinalTestQuestion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showMODFinalTestQuestion</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasBenchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasBenchmarkHours</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="validateEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">validateEmployment</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="spOverrideEntry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">spOverrideEntry</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.countryCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.countryCode</stringProp>
                  <stringProp name="Argument.value">CA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeCSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeCSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.militaryTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.militaryTime</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin1</stringProp>
                  <stringProp name="Argument.value">${sin1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin0</stringProp>
                  <stringProp name="Argument.value">${sin0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isOYAPMatchingClient" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isOYAPMatchingClient</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin2</stringProp>
                  <stringProp name="Argument.value">${sin2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="confirm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">confirm</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasClassroomTraining" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasClassroomTraining</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasCofq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasCofq</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="siteAddress.usageType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">siteAddress.usageType</stringProp>
                  <stringProp name="Argument.value">ADDR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasResidency</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startOverPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">startOverPath</stringProp>
                  <stringProp name="Argument.value">/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rqmtsCourseDurationType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rqmtsCourseDurationType</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetType</stringProp>
                  <stringProp name="Argument.value">RD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingApprenticeship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingApprenticeship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingOther" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingOther</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfSchoolCreditsDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfSchoolCreditsDisplayed</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="precariousEmployment" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">precariousEmployment</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedQualificationMethod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedQualificationMethod</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="recognitionTypesDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">recognitionTypesDisplayed</stringProp>
                  <stringProp name="Argument.value">COFA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isTDA</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="immigrantInd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">immigrantInd</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInApprovedDoMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInApprovedDoMode</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="genderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">genderType</stringProp>
                  <stringProp name="Argument.value">F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeCSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeCSVersion</stringProp>
                  <stringProp name="Argument.value">2010-09-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__googleReturnActionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__googleReturnActionPath</stringProp>
                  <stringProp name="Argument.value">/ApplyOnline/DisplayConfirmation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedTossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedTossCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isInternalUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isInternalUser</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tradeCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tradeCode</stringProp>
                  <stringProp name="Argument.value">310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isSummary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isSummary</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyApprentceship" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyApprentceship</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.value">${firstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedResidency" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedResidency</stringProp>
                  <stringProp name="Argument.value">NONE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeRSVersion" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeRSVersion</stringProp>
                  <stringProp name="Argument.value">1901-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numOfDependence" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numOfDependence</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__MOMENTUM" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__MOMENTUM</stringProp>
                  <stringProp name="Argument.value">14</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canQualifyChallenger" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canQualifyChallenger</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedDocumentSets" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedDocumentSets</stringProp>
                  <stringProp name="Argument.value">1,CPER_REQUIRED_FDSP_OYAP1,22,CPER_REQUIRED_FDSP_OYAP2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maritalStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">maritalStatus</stringProp>
                  <stringProp name="Argument.value">S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sbDistrict" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sbDistrict</stringProp>
                  <stringProp name="Argument.value">01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="minimumAgeDisplayed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">minimumAgeDisplayed</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="preferredLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">preferredLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.lookupCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.lookupCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientIdentityEditable" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientIdentityEditable</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.civicNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.civicNumber</stringProp>
                  <stringProp name="Argument.value">29</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="org.apache.struts.taglib.html.TOKEN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">org.apache.struts.taglib.html.TOKEN</stringProp>
                  <stringProp name="Argument.value">${html_token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="schoolBoardUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">schoolBoardUser</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasWorkingStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasWorkingStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.unitNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.unitNumber</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="activeRSProgramId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">activeRSProgramId</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingGrandfather" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingGrandfather</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isModularMatchingActProg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isModularMatchingActProg</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="educationLevel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">educationLevel</stringProp>
                  <stringProp name="Argument.value">G10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isQualifyingReciprocal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isQualifyingReciprocal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.province" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.province</stringProp>
                  <stringProp name="Argument.value">ON</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programID</stringProp>
                  <stringProp name="Argument.value">APPR310S</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasSponsor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasSponsor</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1no</stringProp>
                  <stringProp name="Argument.value">4653</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.postalCode</stringProp>
                  <stringProp name="Argument.value">M6N3L6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                  <stringProp name="Argument.value">APPR</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="benchmarkHours" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">benchmarkHours</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.date</stringProp>
                  <stringProp name="Argument.value"> </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.streetName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.streetName</stringProp>
                  <stringProp name="Argument.value">CLOVERDALE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address.addressType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address.addressType</stringProp>
                  <stringProp name="Argument.value">MRCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="instructionLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">instructionLanguage</stringProp>
                  <stringProp name="Argument.value">EN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1type</stringProp>
                  <stringProp name="Argument.value">HOME</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="canConfirmParties" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">canConfirmParties</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedSector" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedSector</stringProp>
                  <stringProp name="Argument.value">AUTO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientAlreadyInProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientAlreadyInProgram</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isClientSupervisor" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">isClientSupervisor</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.date</stringProp>
                  <stringProp name="Argument.value">1990-02-02</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="payment.paymentDate.defaultSeconds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">payment.paymentDate.defaultSeconds</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ph1ex" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ph1ex</stringProp>
                  <stringProp name="Argument.value">765</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="numberOfClientToCreate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">numberOfClientToCreate</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showLinkButton" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">showLinkButton</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="primaryLanguage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">primaryLanguage</stringProp>
                  <stringProp name="Argument.value">ENGLISH</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wantsRedSeal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">wantsRedSeal</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Confirm Application/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Sponsor with Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
		
		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def http_props = [:]
			def inputs = res[1][0] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Sponsor with Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Submit Application" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/XApplyOnlineX/AcceptConfirmation.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	//log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Application Summary/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Sponsor with Address IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /&lt;a href=&quot;.*?entityID=\d+?&quot; title=&quot;View Client Details&quot;&gt;(\d+)&lt;\/a&gt;/
		def inputs = data =~ pattern
		if(inputs.size() &lt; 1) {
			should_restart = true
		} else {
			vars.put(&apos;client_number&apos;, inputs[0][1])
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Sponsor with Address: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Client Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ClientDetailsGeneralTab.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">entityID</stringProp>
                  <stringProp name="Argument.value">${client_number}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Personal Information/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form .*?action = &quot;\/APPRWEB\/PR\/ClientDocuments\.do&quot;&gt;(.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() == 0) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def http_props = [:]
			def inputs = res[0][1] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Client&apos;s Documents Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ClientDocuments.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="x" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">x</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="y" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">y</stringProp>
                  <stringProp name="Argument.value">16</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	//log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Social Insurance Number/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form .*?action=&quot;\/APPRWEB\/PR\/ClientDocuments\.do&quot;&gt;(.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() == 0) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def http_props = [:]
			def inputs = res[0][1] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)

			pattern = /(?ms)&lt;input type=&quot;checkbox&quot;.*?name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;.*?&gt;/
			def docs = []
			inputs = res[0][1] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				docs.add(inputs[idx][2])
			}
			if(docs.size() == 0) {
				should_restart = true
			} else {
				//vars.putObject(&apos;documents&apos;, docs.join(&apos;,&apos;))
				vars.putObject(&apos;documents&apos;, docs[0])
			}
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Update Client&apos;s Documents" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/ClientDocuments.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="statusFilter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">statusFilter</stringProp>
                  <stringProp name="Argument.value">%</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value">Go</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedClientDocumentList" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedClientDocumentList</stringProp>
                  <stringProp name="Argument.value">${documents}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedProgram" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedProgram</stringProp>
                  <stringProp name="Argument.value">%</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="selectedActionPath" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">selectedActionPath</stringProp>
                  <stringProp name="Argument.value">/PR/CltDtlsConfirmDoc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	//log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Status change/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Accept Program Questions IS NOT SUCCESSFULL&quot;
			should_restart = true
		}

		pattern = /(?s)&lt;form (.*?)&lt;\/form&gt;/
		def res = data =~ pattern
		if(res.size() &lt; 2) {
			log.info &quot;Confirm Party Identification HAS NO INPUT PARAMS FOR NEXT REQUEST&quot;
			should_restart = true
		} else {
			pattern = /(?ms)&lt;input type=&quot;(hidden|HIDDEN)&quot;.*?name=&quot;(.*?)&quot;.*?value=(?:&apos;|&quot;)(.*?)(?:&apos;|&quot;).*?&gt;/
			def http_props = [:]
			def inputs = res[1][0] =~ pattern
			for(def idx = 0; idx &lt; inputs.size(); idx++) {
				//log.info &quot;${inputs[idx][2]}: ${inputs[idx][3]}&quot;
				http_props[inputs[idx][2]] = inputs[idx][3]
			}
			vars.putObject(&apos;submit_props&apos;, http_props)
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Accept Program Questions: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Confirm Document Change" enabled="false">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/CltDtlsConfirmDoc.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="C:\Users\PanichIg\OneDrive - Government of Ontario\Documents\JMeter\CVOR\Other.png" elementType="HTTPFileArg">
                  <stringProp name="File.mimetype">image/png</stringProp>
                  <stringProp name="File.path">C:\Users\PanichIg\OneDrive - Government of Ontario\Documents\JMeter\CVOR\Other.png</stringProp>
                  <stringProp name="File.paramname">newAttachment</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="note" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">note</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="completionDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">completionDate.day</stringProp>
                </elementProp>
                <elementProp name="save" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">save</stringProp>
                  <stringProp name="Argument.value">Save</stringProp>
                </elementProp>
                <elementProp name="schoolLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">schoolLocation</stringProp>
                </elementProp>
                <elementProp name="testDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">testDate.month</stringProp>
                </elementProp>
                <elementProp name="testDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">testDate.day</stringProp>
                  <stringProp name="HTTPArgument.content_type">text/plain</stringProp>
                </elementProp>
                <elementProp name="testDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">testDate.year</stringProp>
                </elementProp>
                <elementProp name="selectedTDA" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedTDA</stringProp>
                </elementProp>
                <elementProp name="completionDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">completionDate.month</stringProp>
                </elementProp>
                <elementProp name="completionDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">completionDate.year</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundary8AClTiRRNc588ctI</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def submit_props = vars.getObject(&apos;submit_props&apos;)

submit_props.each { key, val -&gt;
	//log.info &quot;$key: $val&quot;
	sampler.addArgument(key, val)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug: Search Client" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="newType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">newType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">passwordFromHeader</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submitLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submitLogin</stringProp>
                  <stringProp name="Argument.value">log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userIDFromHeader</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="predefroles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">predefroles</stringProp>
                  <stringProp name="Argument.value">1700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Client Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Program Entry Client Search/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Client Search Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Client Search Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Client" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/AddANewClient/Apprenticeship.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                  <stringProp name="Argument.value">${last_name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_1</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasppID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">hasppID</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.month" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.month</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.day" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.day</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clientPhone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">clientPhone</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_2</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sin.sinPart_3" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sin.sinPart_3</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__BACK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__BACK</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="OEN" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">OEN</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="birthDate.year" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">birthDate.year</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def names = [
	[last_name: &apos;Smith&apos;],
	[last_name: &apos;Kenneth&apos;],
	[last_name: &apos;Ivanov&apos;],
	[last_name: &apos;John&apos;],
	[last_name: &apos;Jordan&apos;],
	[last_name: &apos;Li&apos;],
	[last_name: &apos;Bush&apos;],
	[last_name: &apos;Baiden&apos;],
	[last_name: &apos;Allan&apos;],
	[last_name: &apos;Levin&apos;],
	[last_name: &apos;Simpson&apos;],
	[last_name: &apos;Messi&apos;]
]

vars.put(&apos;last_name&apos;, names[new Random().nextInt(names.size())].last_name)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Client ID:/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Search Client IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Search Client: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug: Search Sponsor" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Logon" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/Logon.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="newType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">newType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="passwordFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">passwordFromHeader</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submitLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">submitLogin</stringProp>
                  <stringProp name="Argument.value">log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userIDFromHeader" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">userIDFromHeader</stringProp>
                  <stringProp name="Argument.value">${USER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value">en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="predefroles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">predefroles</stringProp>
                  <stringProp name="Argument.value">1700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Apprenticeship Sponsor\/Employer section/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;LOGON IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;LOGON: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Get Sponsor Search Page" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/SponsorSearch.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Sponsor\/Employer Search/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot;Get Apprenticeship Search Page IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot;Get Apprenticeship Search Page: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request: Search Sponsor" enabled="true">
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">APPRWEB/PR/LeftNavigationBar/Menu/SponsorSearch.do</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="legalName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">legalName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__BACK" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__BACK</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.areaCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.areaCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactName</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tossCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tossCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">Search</stringProp>
                  <stringProp name="Argument.value">Search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.lineNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="postalCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">postalCode</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sponsorName</stringProp>
                  <stringProp name="Argument.value">${last_name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="contactPhone.prefix" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">contactPhone.prefix</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">LTEE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sponsorID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sponsorID</stringProp>
                </elementProp>
                <elementProp name="sadFirstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sadFirstName</stringProp>
                </elementProp>
                <elementProp name="sadLastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sadLastName</stringProp>
                </elementProp>
                <elementProp name="programParticipationStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">programParticipationStatus</stringProp>
                  <stringProp name="Argument.value">%A0</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def names = [
	[last_name: &apos;Smith&apos;],
	[last_name: &apos;Kenneth&apos;],
	[last_name: &apos;Ivanov&apos;],
	[last_name: &apos;John&apos;],
	[last_name: &apos;Jordan&apos;],
	[last_name: &apos;Li&apos;],
	[last_name: &apos;Bush&apos;],
	[last_name: &apos;Baiden&apos;],
	[last_name: &apos;Allan&apos;],
	[last_name: &apos;Levin&apos;],
	[last_name: &apos;Simpson&apos;],
	[last_name: &apos;Messi&apos;]
]

vars.put(&apos;last_name&apos;, names[new Random().nextInt(names.size())].last_name)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

def should_restart = false
try {
	def data = prev.getResponseDataAsString()
	if(!(&quot;200&quot;.equals(prev.getResponseCode())) || !data) {
		should_restart = true
	} else {
		def pattern = /Sponsor\/Employer ID/
		def match = data =~ pattern
		if(!match || match.size() == 0) {
			log.info &quot; Search Apprenticeship IS NOT SUCCESSFULL&quot;
			should_restart = true
		}
	}
} catch (Exception ex) {
	should_restart = true
	log.info ex.message
}

if(should_restart) {
	ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP)
	log.info &quot; Search Apprenticeship: UNEXPECTED RESPONSE - RESTARTING TREAD&quot;
	def failure_message = prev.getResponseDataAsString()
	AssertionResult.setFailureMessage(failure_message)
     AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
